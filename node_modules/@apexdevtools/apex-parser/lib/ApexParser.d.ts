import { ATN } from "antlr4ts/atn/ATN";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { RuleContext } from "antlr4ts/RuleContext";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { ApexParserListener } from "./ApexParserListener";
import { ApexParserVisitor } from "./ApexParserVisitor";
export declare class ApexParser extends Parser {
    static readonly ABSTRACT = 1;
    static readonly AFTER = 2;
    static readonly BEFORE = 3;
    static readonly BREAK = 4;
    static readonly CATCH = 5;
    static readonly CLASS = 6;
    static readonly CONTINUE = 7;
    static readonly DELETE = 8;
    static readonly DO = 9;
    static readonly ELSE = 10;
    static readonly ENUM = 11;
    static readonly EXTENDS = 12;
    static readonly FINAL = 13;
    static readonly FINALLY = 14;
    static readonly FOR = 15;
    static readonly GET = 16;
    static readonly GLOBAL = 17;
    static readonly IF = 18;
    static readonly IMPLEMENTS = 19;
    static readonly INHERITED = 20;
    static readonly INSERT = 21;
    static readonly INSTANCEOF = 22;
    static readonly INTERFACE = 23;
    static readonly MERGE = 24;
    static readonly NEW = 25;
    static readonly NULL = 26;
    static readonly ON = 27;
    static readonly OVERRIDE = 28;
    static readonly PRIVATE = 29;
    static readonly PROTECTED = 30;
    static readonly PUBLIC = 31;
    static readonly RETURN = 32;
    static readonly SYSTEMRUNAS = 33;
    static readonly SET = 34;
    static readonly SHARING = 35;
    static readonly STATIC = 36;
    static readonly SUPER = 37;
    static readonly SWITCH = 38;
    static readonly TESTMETHOD = 39;
    static readonly THIS = 40;
    static readonly THROW = 41;
    static readonly TRANSIENT = 42;
    static readonly TRIGGER = 43;
    static readonly TRY = 44;
    static readonly UNDELETE = 45;
    static readonly UPDATE = 46;
    static readonly UPSERT = 47;
    static readonly VIRTUAL = 48;
    static readonly VOID = 49;
    static readonly WEBSERVICE = 50;
    static readonly WHEN = 51;
    static readonly WHILE = 52;
    static readonly WITH = 53;
    static readonly WITHOUT = 54;
    static readonly LIST = 55;
    static readonly MAP = 56;
    static readonly SYSTEM = 57;
    static readonly USER = 58;
    static readonly SELECT = 59;
    static readonly COUNT = 60;
    static readonly FROM = 61;
    static readonly AS = 62;
    static readonly USING = 63;
    static readonly SCOPE = 64;
    static readonly WHERE = 65;
    static readonly ORDER = 66;
    static readonly BY = 67;
    static readonly LIMIT = 68;
    static readonly SOQLAND = 69;
    static readonly SOQLOR = 70;
    static readonly NOT = 71;
    static readonly AVG = 72;
    static readonly COUNT_DISTINCT = 73;
    static readonly MIN = 74;
    static readonly MAX = 75;
    static readonly SUM = 76;
    static readonly TYPEOF = 77;
    static readonly END = 78;
    static readonly THEN = 79;
    static readonly LIKE = 80;
    static readonly IN = 81;
    static readonly INCLUDES = 82;
    static readonly EXCLUDES = 83;
    static readonly ASC = 84;
    static readonly DESC = 85;
    static readonly NULLS = 86;
    static readonly FIRST = 87;
    static readonly LAST = 88;
    static readonly GROUP = 89;
    static readonly ALL = 90;
    static readonly ROWS = 91;
    static readonly VIEW = 92;
    static readonly HAVING = 93;
    static readonly ROLLUP = 94;
    static readonly TOLABEL = 95;
    static readonly OFFSET = 96;
    static readonly DATA = 97;
    static readonly CATEGORY = 98;
    static readonly AT = 99;
    static readonly ABOVE = 100;
    static readonly BELOW = 101;
    static readonly ABOVE_OR_BELOW = 102;
    static readonly SECURITY_ENFORCED = 103;
    static readonly SYSTEM_MODE = 104;
    static readonly USER_MODE = 105;
    static readonly REFERENCE = 106;
    static readonly CUBE = 107;
    static readonly FORMAT = 108;
    static readonly TRACKING = 109;
    static readonly VIEWSTAT = 110;
    static readonly CUSTOM = 111;
    static readonly STANDARD = 112;
    static readonly DISTANCE = 113;
    static readonly GEOLOCATION = 114;
    static readonly GROUPING = 115;
    static readonly CALENDAR_MONTH = 116;
    static readonly CALENDAR_QUARTER = 117;
    static readonly CALENDAR_YEAR = 118;
    static readonly DAY_IN_MONTH = 119;
    static readonly DAY_IN_WEEK = 120;
    static readonly DAY_IN_YEAR = 121;
    static readonly DAY_ONLY = 122;
    static readonly FISCAL_MONTH = 123;
    static readonly FISCAL_QUARTER = 124;
    static readonly FISCAL_YEAR = 125;
    static readonly HOUR_IN_DAY = 126;
    static readonly WEEK_IN_MONTH = 127;
    static readonly WEEK_IN_YEAR = 128;
    static readonly CONVERT_TIMEZONE = 129;
    static readonly YESTERDAY = 130;
    static readonly TODAY = 131;
    static readonly TOMORROW = 132;
    static readonly LAST_WEEK = 133;
    static readonly THIS_WEEK = 134;
    static readonly NEXT_WEEK = 135;
    static readonly LAST_MONTH = 136;
    static readonly THIS_MONTH = 137;
    static readonly NEXT_MONTH = 138;
    static readonly LAST_90_DAYS = 139;
    static readonly NEXT_90_DAYS = 140;
    static readonly LAST_N_DAYS_N = 141;
    static readonly NEXT_N_DAYS_N = 142;
    static readonly N_DAYS_AGO_N = 143;
    static readonly NEXT_N_WEEKS_N = 144;
    static readonly LAST_N_WEEKS_N = 145;
    static readonly N_WEEKS_AGO_N = 146;
    static readonly NEXT_N_MONTHS_N = 147;
    static readonly LAST_N_MONTHS_N = 148;
    static readonly N_MONTHS_AGO_N = 149;
    static readonly THIS_QUARTER = 150;
    static readonly LAST_QUARTER = 151;
    static readonly NEXT_QUARTER = 152;
    static readonly NEXT_N_QUARTERS_N = 153;
    static readonly LAST_N_QUARTERS_N = 154;
    static readonly N_QUARTERS_AGO_N = 155;
    static readonly THIS_YEAR = 156;
    static readonly LAST_YEAR = 157;
    static readonly NEXT_YEAR = 158;
    static readonly NEXT_N_YEARS_N = 159;
    static readonly LAST_N_YEARS_N = 160;
    static readonly N_YEARS_AGO_N = 161;
    static readonly THIS_FISCAL_QUARTER = 162;
    static readonly LAST_FISCAL_QUARTER = 163;
    static readonly NEXT_FISCAL_QUARTER = 164;
    static readonly NEXT_N_FISCAL_QUARTERS_N = 165;
    static readonly LAST_N_FISCAL_QUARTERS_N = 166;
    static readonly N_FISCAL_QUARTERS_AGO_N = 167;
    static readonly THIS_FISCAL_YEAR = 168;
    static readonly LAST_FISCAL_YEAR = 169;
    static readonly NEXT_FISCAL_YEAR = 170;
    static readonly NEXT_N_FISCAL_YEARS_N = 171;
    static readonly LAST_N_FISCAL_YEARS_N = 172;
    static readonly N_FISCAL_YEARS_AGO_N = 173;
    static readonly DateLiteral = 174;
    static readonly DateTimeLiteral = 175;
    static readonly IntegralCurrencyLiteral = 176;
    static readonly FIND = 177;
    static readonly EMAIL = 178;
    static readonly NAME = 179;
    static readonly PHONE = 180;
    static readonly SIDEBAR = 181;
    static readonly FIELDS = 182;
    static readonly METADATA = 183;
    static readonly PRICEBOOKID = 184;
    static readonly NETWORK = 185;
    static readonly SNIPPET = 186;
    static readonly TARGET_LENGTH = 187;
    static readonly DIVISION = 188;
    static readonly RETURNING = 189;
    static readonly LISTVIEW = 190;
    static readonly FindLiteral = 191;
    static readonly FindLiteralAlt = 192;
    static readonly IntegerLiteral = 193;
    static readonly LongLiteral = 194;
    static readonly NumberLiteral = 195;
    static readonly BooleanLiteral = 196;
    static readonly StringLiteral = 197;
    static readonly NullLiteral = 198;
    static readonly LPAREN = 199;
    static readonly RPAREN = 200;
    static readonly LBRACE = 201;
    static readonly RBRACE = 202;
    static readonly LBRACK = 203;
    static readonly RBRACK = 204;
    static readonly SEMI = 205;
    static readonly COMMA = 206;
    static readonly DOT = 207;
    static readonly ASSIGN = 208;
    static readonly GT = 209;
    static readonly LT = 210;
    static readonly BANG = 211;
    static readonly TILDE = 212;
    static readonly QUESTIONDOT = 213;
    static readonly QUESTION = 214;
    static readonly COLON = 215;
    static readonly EQUAL = 216;
    static readonly TRIPLEEQUAL = 217;
    static readonly NOTEQUAL = 218;
    static readonly LESSANDGREATER = 219;
    static readonly TRIPLENOTEQUAL = 220;
    static readonly AND = 221;
    static readonly OR = 222;
    static readonly COAL = 223;
    static readonly INC = 224;
    static readonly DEC = 225;
    static readonly ADD = 226;
    static readonly SUB = 227;
    static readonly MUL = 228;
    static readonly DIV = 229;
    static readonly BITAND = 230;
    static readonly BITOR = 231;
    static readonly CARET = 232;
    static readonly MAPTO = 233;
    static readonly ADD_ASSIGN = 234;
    static readonly SUB_ASSIGN = 235;
    static readonly MUL_ASSIGN = 236;
    static readonly DIV_ASSIGN = 237;
    static readonly AND_ASSIGN = 238;
    static readonly OR_ASSIGN = 239;
    static readonly XOR_ASSIGN = 240;
    static readonly LSHIFT_ASSIGN = 241;
    static readonly RSHIFT_ASSIGN = 242;
    static readonly URSHIFT_ASSIGN = 243;
    static readonly ATSIGN = 244;
    static readonly Identifier = 245;
    static readonly WS = 246;
    static readonly DOC_COMMENT = 247;
    static readonly COMMENT = 248;
    static readonly LINE_COMMENT = 249;
    static readonly RULE_triggerUnit = 0;
    static readonly RULE_triggerCase = 1;
    static readonly RULE_triggerBlock = 2;
    static readonly RULE_triggerBlockMember = 3;
    static readonly RULE_compilationUnit = 4;
    static readonly RULE_typeDeclaration = 5;
    static readonly RULE_classDeclaration = 6;
    static readonly RULE_enumDeclaration = 7;
    static readonly RULE_enumConstants = 8;
    static readonly RULE_interfaceDeclaration = 9;
    static readonly RULE_typeList = 10;
    static readonly RULE_classBody = 11;
    static readonly RULE_interfaceBody = 12;
    static readonly RULE_classBodyDeclaration = 13;
    static readonly RULE_modifier = 14;
    static readonly RULE_memberDeclaration = 15;
    static readonly RULE_triggerMemberDeclaration = 16;
    static readonly RULE_methodDeclaration = 17;
    static readonly RULE_constructorDeclaration = 18;
    static readonly RULE_fieldDeclaration = 19;
    static readonly RULE_propertyDeclaration = 20;
    static readonly RULE_interfaceMethodDeclaration = 21;
    static readonly RULE_variableDeclarators = 22;
    static readonly RULE_variableDeclarator = 23;
    static readonly RULE_arrayInitializer = 24;
    static readonly RULE_typeRef = 25;
    static readonly RULE_arraySubscripts = 26;
    static readonly RULE_typeName = 27;
    static readonly RULE_typeArguments = 28;
    static readonly RULE_formalParameters = 29;
    static readonly RULE_formalParameterList = 30;
    static readonly RULE_formalParameter = 31;
    static readonly RULE_qualifiedName = 32;
    static readonly RULE_literal = 33;
    static readonly RULE_annotation = 34;
    static readonly RULE_elementValuePairs = 35;
    static readonly RULE_elementValuePair = 36;
    static readonly RULE_elementValue = 37;
    static readonly RULE_elementValueArrayInitializer = 38;
    static readonly RULE_block = 39;
    static readonly RULE_localVariableDeclarationStatement = 40;
    static readonly RULE_localVariableDeclaration = 41;
    static readonly RULE_statement = 42;
    static readonly RULE_ifStatement = 43;
    static readonly RULE_switchStatement = 44;
    static readonly RULE_whenControl = 45;
    static readonly RULE_whenValue = 46;
    static readonly RULE_whenLiteral = 47;
    static readonly RULE_forStatement = 48;
    static readonly RULE_whileStatement = 49;
    static readonly RULE_doWhileStatement = 50;
    static readonly RULE_tryStatement = 51;
    static readonly RULE_returnStatement = 52;
    static readonly RULE_throwStatement = 53;
    static readonly RULE_breakStatement = 54;
    static readonly RULE_continueStatement = 55;
    static readonly RULE_accessLevel = 56;
    static readonly RULE_insertStatement = 57;
    static readonly RULE_updateStatement = 58;
    static readonly RULE_deleteStatement = 59;
    static readonly RULE_undeleteStatement = 60;
    static readonly RULE_upsertStatement = 61;
    static readonly RULE_mergeStatement = 62;
    static readonly RULE_runAsStatement = 63;
    static readonly RULE_expressionStatement = 64;
    static readonly RULE_propertyBlock = 65;
    static readonly RULE_getter = 66;
    static readonly RULE_setter = 67;
    static readonly RULE_catchClause = 68;
    static readonly RULE_finallyBlock = 69;
    static readonly RULE_forControl = 70;
    static readonly RULE_forInit = 71;
    static readonly RULE_enhancedForControl = 72;
    static readonly RULE_forUpdate = 73;
    static readonly RULE_parExpression = 74;
    static readonly RULE_expressionList = 75;
    static readonly RULE_expression = 76;
    static readonly RULE_primary = 77;
    static readonly RULE_methodCall = 78;
    static readonly RULE_dotMethodCall = 79;
    static readonly RULE_creator = 80;
    static readonly RULE_createdName = 81;
    static readonly RULE_idCreatedNamePair = 82;
    static readonly RULE_noRest = 83;
    static readonly RULE_classCreatorRest = 84;
    static readonly RULE_arrayCreatorRest = 85;
    static readonly RULE_mapCreatorRest = 86;
    static readonly RULE_mapCreatorRestPair = 87;
    static readonly RULE_setCreatorRest = 88;
    static readonly RULE_arguments = 89;
    static readonly RULE_soqlLiteral = 90;
    static readonly RULE_query = 91;
    static readonly RULE_subQuery = 92;
    static readonly RULE_selectList = 93;
    static readonly RULE_selectEntry = 94;
    static readonly RULE_fieldName = 95;
    static readonly RULE_fromNameList = 96;
    static readonly RULE_subFieldList = 97;
    static readonly RULE_subFieldEntry = 98;
    static readonly RULE_soqlFieldsParameter = 99;
    static readonly RULE_soqlFunction = 100;
    static readonly RULE_dateFieldName = 101;
    static readonly RULE_locationValue = 102;
    static readonly RULE_coordinateValue = 103;
    static readonly RULE_typeOf = 104;
    static readonly RULE_whenClause = 105;
    static readonly RULE_elseClause = 106;
    static readonly RULE_fieldNameList = 107;
    static readonly RULE_usingScope = 108;
    static readonly RULE_whereClause = 109;
    static readonly RULE_logicalExpression = 110;
    static readonly RULE_conditionalExpression = 111;
    static readonly RULE_fieldExpression = 112;
    static readonly RULE_comparisonOperator = 113;
    static readonly RULE_value = 114;
    static readonly RULE_valueList = 115;
    static readonly RULE_signedNumber = 116;
    static readonly RULE_withClause = 117;
    static readonly RULE_filteringExpression = 118;
    static readonly RULE_dataCategorySelection = 119;
    static readonly RULE_dataCategoryName = 120;
    static readonly RULE_filteringSelector = 121;
    static readonly RULE_groupByClause = 122;
    static readonly RULE_orderByClause = 123;
    static readonly RULE_fieldOrderList = 124;
    static readonly RULE_fieldOrder = 125;
    static readonly RULE_limitClause = 126;
    static readonly RULE_offsetClause = 127;
    static readonly RULE_allRowsClause = 128;
    static readonly RULE_forClauses = 129;
    static readonly RULE_boundExpression = 130;
    static readonly RULE_dateFormula = 131;
    static readonly RULE_signedInteger = 132;
    static readonly RULE_soqlId = 133;
    static readonly RULE_soslLiteral = 134;
    static readonly RULE_soslLiteralAlt = 135;
    static readonly RULE_soslClauses = 136;
    static readonly RULE_soslWithClause = 137;
    static readonly RULE_searchGroup = 138;
    static readonly RULE_fieldSpecList = 139;
    static readonly RULE_fieldSpec = 140;
    static readonly RULE_fieldList = 141;
    static readonly RULE_updateList = 142;
    static readonly RULE_updateType = 143;
    static readonly RULE_networkList = 144;
    static readonly RULE_soslId = 145;
    static readonly RULE_id = 146;
    static readonly RULE_anyId = 147;
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException;
    constructor(input: TokenStream);
    triggerUnit(): TriggerUnitContext;
    triggerCase(): TriggerCaseContext;
    triggerBlock(): TriggerBlockContext;
    triggerBlockMember(): TriggerBlockMemberContext;
    compilationUnit(): CompilationUnitContext;
    typeDeclaration(): TypeDeclarationContext;
    classDeclaration(): ClassDeclarationContext;
    enumDeclaration(): EnumDeclarationContext;
    enumConstants(): EnumConstantsContext;
    interfaceDeclaration(): InterfaceDeclarationContext;
    typeList(): TypeListContext;
    classBody(): ClassBodyContext;
    interfaceBody(): InterfaceBodyContext;
    classBodyDeclaration(): ClassBodyDeclarationContext;
    modifier(): ModifierContext;
    memberDeclaration(): MemberDeclarationContext;
    triggerMemberDeclaration(): TriggerMemberDeclarationContext;
    methodDeclaration(): MethodDeclarationContext;
    constructorDeclaration(): ConstructorDeclarationContext;
    fieldDeclaration(): FieldDeclarationContext;
    propertyDeclaration(): PropertyDeclarationContext;
    interfaceMethodDeclaration(): InterfaceMethodDeclarationContext;
    variableDeclarators(): VariableDeclaratorsContext;
    variableDeclarator(): VariableDeclaratorContext;
    arrayInitializer(): ArrayInitializerContext;
    typeRef(): TypeRefContext;
    arraySubscripts(): ArraySubscriptsContext;
    typeName(): TypeNameContext;
    typeArguments(): TypeArgumentsContext;
    formalParameters(): FormalParametersContext;
    formalParameterList(): FormalParameterListContext;
    formalParameter(): FormalParameterContext;
    qualifiedName(): QualifiedNameContext;
    literal(): LiteralContext;
    annotation(): AnnotationContext;
    elementValuePairs(): ElementValuePairsContext;
    elementValuePair(): ElementValuePairContext;
    elementValue(): ElementValueContext;
    elementValueArrayInitializer(): ElementValueArrayInitializerContext;
    block(): BlockContext;
    localVariableDeclarationStatement(): LocalVariableDeclarationStatementContext;
    localVariableDeclaration(): LocalVariableDeclarationContext;
    statement(): StatementContext;
    ifStatement(): IfStatementContext;
    switchStatement(): SwitchStatementContext;
    whenControl(): WhenControlContext;
    whenValue(): WhenValueContext;
    whenLiteral(): WhenLiteralContext;
    forStatement(): ForStatementContext;
    whileStatement(): WhileStatementContext;
    doWhileStatement(): DoWhileStatementContext;
    tryStatement(): TryStatementContext;
    returnStatement(): ReturnStatementContext;
    throwStatement(): ThrowStatementContext;
    breakStatement(): BreakStatementContext;
    continueStatement(): ContinueStatementContext;
    accessLevel(): AccessLevelContext;
    insertStatement(): InsertStatementContext;
    updateStatement(): UpdateStatementContext;
    deleteStatement(): DeleteStatementContext;
    undeleteStatement(): UndeleteStatementContext;
    upsertStatement(): UpsertStatementContext;
    mergeStatement(): MergeStatementContext;
    runAsStatement(): RunAsStatementContext;
    expressionStatement(): ExpressionStatementContext;
    propertyBlock(): PropertyBlockContext;
    getter(): GetterContext;
    setter(): SetterContext;
    catchClause(): CatchClauseContext;
    finallyBlock(): FinallyBlockContext;
    forControl(): ForControlContext;
    forInit(): ForInitContext;
    enhancedForControl(): EnhancedForControlContext;
    forUpdate(): ForUpdateContext;
    parExpression(): ParExpressionContext;
    expressionList(): ExpressionListContext;
    expression(): ExpressionContext;
    expression(_p: number): ExpressionContext;
    primary(): PrimaryContext;
    methodCall(): MethodCallContext;
    dotMethodCall(): DotMethodCallContext;
    creator(): CreatorContext;
    createdName(): CreatedNameContext;
    idCreatedNamePair(): IdCreatedNamePairContext;
    noRest(): NoRestContext;
    classCreatorRest(): ClassCreatorRestContext;
    arrayCreatorRest(): ArrayCreatorRestContext;
    mapCreatorRest(): MapCreatorRestContext;
    mapCreatorRestPair(): MapCreatorRestPairContext;
    setCreatorRest(): SetCreatorRestContext;
    arguments(): ArgumentsContext;
    soqlLiteral(): SoqlLiteralContext;
    query(): QueryContext;
    subQuery(): SubQueryContext;
    selectList(): SelectListContext;
    selectEntry(): SelectEntryContext;
    fieldName(): FieldNameContext;
    fromNameList(): FromNameListContext;
    subFieldList(): SubFieldListContext;
    subFieldEntry(): SubFieldEntryContext;
    soqlFieldsParameter(): SoqlFieldsParameterContext;
    soqlFunction(): SoqlFunctionContext;
    dateFieldName(): DateFieldNameContext;
    locationValue(): LocationValueContext;
    coordinateValue(): CoordinateValueContext;
    typeOf(): TypeOfContext;
    whenClause(): WhenClauseContext;
    elseClause(): ElseClauseContext;
    fieldNameList(): FieldNameListContext;
    usingScope(): UsingScopeContext;
    whereClause(): WhereClauseContext;
    logicalExpression(): LogicalExpressionContext;
    conditionalExpression(): ConditionalExpressionContext;
    fieldExpression(): FieldExpressionContext;
    comparisonOperator(): ComparisonOperatorContext;
    value(): ValueContext;
    valueList(): ValueListContext;
    signedNumber(): SignedNumberContext;
    withClause(): WithClauseContext;
    filteringExpression(): FilteringExpressionContext;
    dataCategorySelection(): DataCategorySelectionContext;
    dataCategoryName(): DataCategoryNameContext;
    filteringSelector(): FilteringSelectorContext;
    groupByClause(): GroupByClauseContext;
    orderByClause(): OrderByClauseContext;
    fieldOrderList(): FieldOrderListContext;
    fieldOrder(): FieldOrderContext;
    limitClause(): LimitClauseContext;
    offsetClause(): OffsetClauseContext;
    allRowsClause(): AllRowsClauseContext;
    forClauses(): ForClausesContext;
    boundExpression(): BoundExpressionContext;
    dateFormula(): DateFormulaContext;
    signedInteger(): SignedIntegerContext;
    soqlId(): SoqlIdContext;
    soslLiteral(): SoslLiteralContext;
    soslLiteralAlt(): SoslLiteralAltContext;
    soslClauses(): SoslClausesContext;
    soslWithClause(): SoslWithClauseContext;
    searchGroup(): SearchGroupContext;
    fieldSpecList(): FieldSpecListContext;
    fieldSpec(): FieldSpecContext;
    fieldList(): FieldListContext;
    updateList(): UpdateListContext;
    updateType(): UpdateTypeContext;
    networkList(): NetworkListContext;
    soslId(): SoslIdContext;
    id(): IdContext;
    anyId(): AnyIdContext;
    sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean;
    private expression_sempred;
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    private static readonly _serializedATNSegment2;
    private static readonly _serializedATNSegment3;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
export declare class TriggerUnitContext extends ParserRuleContext {
    TRIGGER(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    ON(): TerminalNode;
    LPAREN(): TerminalNode;
    triggerCase(): TriggerCaseContext[];
    triggerCase(i: number): TriggerCaseContext;
    RPAREN(): TerminalNode;
    triggerBlock(): TriggerBlockContext;
    EOF(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class TriggerCaseContext extends ParserRuleContext {
    BEFORE(): TerminalNode | undefined;
    AFTER(): TerminalNode | undefined;
    INSERT(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    DELETE(): TerminalNode | undefined;
    UNDELETE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class TriggerBlockContext extends ParserRuleContext {
    LBRACE(): TerminalNode;
    RBRACE(): TerminalNode;
    triggerBlockMember(): TriggerBlockMemberContext[];
    triggerBlockMember(i: number): TriggerBlockMemberContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class TriggerBlockMemberContext extends ParserRuleContext {
    triggerMemberDeclaration(): TriggerMemberDeclarationContext | undefined;
    modifier(): ModifierContext[];
    modifier(i: number): ModifierContext;
    statement(): StatementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class CompilationUnitContext extends ParserRuleContext {
    typeDeclaration(): TypeDeclarationContext;
    EOF(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class TypeDeclarationContext extends ParserRuleContext {
    classDeclaration(): ClassDeclarationContext | undefined;
    modifier(): ModifierContext[];
    modifier(i: number): ModifierContext;
    enumDeclaration(): EnumDeclarationContext | undefined;
    interfaceDeclaration(): InterfaceDeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ClassDeclarationContext extends ParserRuleContext {
    CLASS(): TerminalNode;
    id(): IdContext;
    classBody(): ClassBodyContext;
    EXTENDS(): TerminalNode | undefined;
    typeRef(): TypeRefContext | undefined;
    IMPLEMENTS(): TerminalNode | undefined;
    typeList(): TypeListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class EnumDeclarationContext extends ParserRuleContext {
    ENUM(): TerminalNode;
    id(): IdContext;
    LBRACE(): TerminalNode;
    RBRACE(): TerminalNode;
    enumConstants(): EnumConstantsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class EnumConstantsContext extends ParserRuleContext {
    id(): IdContext[];
    id(i: number): IdContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class InterfaceDeclarationContext extends ParserRuleContext {
    INTERFACE(): TerminalNode;
    id(): IdContext;
    interfaceBody(): InterfaceBodyContext;
    EXTENDS(): TerminalNode | undefined;
    typeList(): TypeListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class TypeListContext extends ParserRuleContext {
    typeRef(): TypeRefContext[];
    typeRef(i: number): TypeRefContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ClassBodyContext extends ParserRuleContext {
    LBRACE(): TerminalNode;
    RBRACE(): TerminalNode;
    classBodyDeclaration(): ClassBodyDeclarationContext[];
    classBodyDeclaration(i: number): ClassBodyDeclarationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class InterfaceBodyContext extends ParserRuleContext {
    LBRACE(): TerminalNode;
    RBRACE(): TerminalNode;
    interfaceMethodDeclaration(): InterfaceMethodDeclarationContext[];
    interfaceMethodDeclaration(i: number): InterfaceMethodDeclarationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ClassBodyDeclarationContext extends ParserRuleContext {
    SEMI(): TerminalNode | undefined;
    block(): BlockContext | undefined;
    STATIC(): TerminalNode | undefined;
    memberDeclaration(): MemberDeclarationContext | undefined;
    modifier(): ModifierContext[];
    modifier(i: number): ModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ModifierContext extends ParserRuleContext {
    annotation(): AnnotationContext | undefined;
    GLOBAL(): TerminalNode | undefined;
    PUBLIC(): TerminalNode | undefined;
    PROTECTED(): TerminalNode | undefined;
    PRIVATE(): TerminalNode | undefined;
    TRANSIENT(): TerminalNode | undefined;
    STATIC(): TerminalNode | undefined;
    ABSTRACT(): TerminalNode | undefined;
    FINAL(): TerminalNode | undefined;
    WEBSERVICE(): TerminalNode | undefined;
    OVERRIDE(): TerminalNode | undefined;
    VIRTUAL(): TerminalNode | undefined;
    TESTMETHOD(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    SHARING(): TerminalNode | undefined;
    WITHOUT(): TerminalNode | undefined;
    INHERITED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class MemberDeclarationContext extends ParserRuleContext {
    methodDeclaration(): MethodDeclarationContext | undefined;
    fieldDeclaration(): FieldDeclarationContext | undefined;
    constructorDeclaration(): ConstructorDeclarationContext | undefined;
    interfaceDeclaration(): InterfaceDeclarationContext | undefined;
    classDeclaration(): ClassDeclarationContext | undefined;
    enumDeclaration(): EnumDeclarationContext | undefined;
    propertyDeclaration(): PropertyDeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class TriggerMemberDeclarationContext extends ParserRuleContext {
    methodDeclaration(): MethodDeclarationContext | undefined;
    fieldDeclaration(): FieldDeclarationContext | undefined;
    interfaceDeclaration(): InterfaceDeclarationContext | undefined;
    classDeclaration(): ClassDeclarationContext | undefined;
    enumDeclaration(): EnumDeclarationContext | undefined;
    propertyDeclaration(): PropertyDeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class MethodDeclarationContext extends ParserRuleContext {
    id(): IdContext;
    formalParameters(): FormalParametersContext;
    typeRef(): TypeRefContext | undefined;
    VOID(): TerminalNode | undefined;
    block(): BlockContext | undefined;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ConstructorDeclarationContext extends ParserRuleContext {
    qualifiedName(): QualifiedNameContext;
    formalParameters(): FormalParametersContext;
    block(): BlockContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class FieldDeclarationContext extends ParserRuleContext {
    typeRef(): TypeRefContext;
    variableDeclarators(): VariableDeclaratorsContext;
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class PropertyDeclarationContext extends ParserRuleContext {
    typeRef(): TypeRefContext;
    id(): IdContext;
    LBRACE(): TerminalNode;
    RBRACE(): TerminalNode;
    propertyBlock(): PropertyBlockContext[];
    propertyBlock(i: number): PropertyBlockContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class InterfaceMethodDeclarationContext extends ParserRuleContext {
    id(): IdContext;
    formalParameters(): FormalParametersContext;
    SEMI(): TerminalNode;
    typeRef(): TypeRefContext | undefined;
    VOID(): TerminalNode | undefined;
    modifier(): ModifierContext[];
    modifier(i: number): ModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class VariableDeclaratorsContext extends ParserRuleContext {
    variableDeclarator(): VariableDeclaratorContext[];
    variableDeclarator(i: number): VariableDeclaratorContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class VariableDeclaratorContext extends ParserRuleContext {
    id(): IdContext;
    ASSIGN(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ArrayInitializerContext extends ParserRuleContext {
    LBRACE(): TerminalNode;
    RBRACE(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class TypeRefContext extends ParserRuleContext {
    typeName(): TypeNameContext[];
    typeName(i: number): TypeNameContext;
    arraySubscripts(): ArraySubscriptsContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ArraySubscriptsContext extends ParserRuleContext {
    LBRACK(): TerminalNode[];
    LBRACK(i: number): TerminalNode;
    RBRACK(): TerminalNode[];
    RBRACK(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class TypeNameContext extends ParserRuleContext {
    LIST(): TerminalNode | undefined;
    typeArguments(): TypeArgumentsContext | undefined;
    SET(): TerminalNode | undefined;
    MAP(): TerminalNode | undefined;
    id(): IdContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class TypeArgumentsContext extends ParserRuleContext {
    LT(): TerminalNode;
    typeList(): TypeListContext;
    GT(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class FormalParametersContext extends ParserRuleContext {
    LPAREN(): TerminalNode;
    RPAREN(): TerminalNode;
    formalParameterList(): FormalParameterListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class FormalParameterListContext extends ParserRuleContext {
    formalParameter(): FormalParameterContext[];
    formalParameter(i: number): FormalParameterContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class FormalParameterContext extends ParserRuleContext {
    typeRef(): TypeRefContext;
    id(): IdContext;
    modifier(): ModifierContext[];
    modifier(i: number): ModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class QualifiedNameContext extends ParserRuleContext {
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class LiteralContext extends ParserRuleContext {
    IntegerLiteral(): TerminalNode | undefined;
    LongLiteral(): TerminalNode | undefined;
    NumberLiteral(): TerminalNode | undefined;
    StringLiteral(): TerminalNode | undefined;
    BooleanLiteral(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class AnnotationContext extends ParserRuleContext {
    ATSIGN(): TerminalNode;
    qualifiedName(): QualifiedNameContext;
    LPAREN(): TerminalNode | undefined;
    RPAREN(): TerminalNode | undefined;
    elementValuePairs(): ElementValuePairsContext | undefined;
    elementValue(): ElementValueContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ElementValuePairsContext extends ParserRuleContext {
    elementValuePair(): ElementValuePairContext[];
    elementValuePair(i: number): ElementValuePairContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ElementValuePairContext extends ParserRuleContext {
    id(): IdContext;
    ASSIGN(): TerminalNode;
    elementValue(): ElementValueContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ElementValueContext extends ParserRuleContext {
    expression(): ExpressionContext | undefined;
    annotation(): AnnotationContext | undefined;
    elementValueArrayInitializer(): ElementValueArrayInitializerContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ElementValueArrayInitializerContext extends ParserRuleContext {
    LBRACE(): TerminalNode;
    RBRACE(): TerminalNode;
    elementValue(): ElementValueContext[];
    elementValue(i: number): ElementValueContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class BlockContext extends ParserRuleContext {
    LBRACE(): TerminalNode;
    RBRACE(): TerminalNode;
    statement(): StatementContext[];
    statement(i: number): StatementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class LocalVariableDeclarationStatementContext extends ParserRuleContext {
    localVariableDeclaration(): LocalVariableDeclarationContext;
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class LocalVariableDeclarationContext extends ParserRuleContext {
    typeRef(): TypeRefContext;
    variableDeclarators(): VariableDeclaratorsContext;
    modifier(): ModifierContext[];
    modifier(i: number): ModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class StatementContext extends ParserRuleContext {
    block(): BlockContext | undefined;
    ifStatement(): IfStatementContext | undefined;
    switchStatement(): SwitchStatementContext | undefined;
    forStatement(): ForStatementContext | undefined;
    whileStatement(): WhileStatementContext | undefined;
    doWhileStatement(): DoWhileStatementContext | undefined;
    tryStatement(): TryStatementContext | undefined;
    returnStatement(): ReturnStatementContext | undefined;
    throwStatement(): ThrowStatementContext | undefined;
    breakStatement(): BreakStatementContext | undefined;
    continueStatement(): ContinueStatementContext | undefined;
    insertStatement(): InsertStatementContext | undefined;
    updateStatement(): UpdateStatementContext | undefined;
    deleteStatement(): DeleteStatementContext | undefined;
    undeleteStatement(): UndeleteStatementContext | undefined;
    upsertStatement(): UpsertStatementContext | undefined;
    mergeStatement(): MergeStatementContext | undefined;
    runAsStatement(): RunAsStatementContext | undefined;
    localVariableDeclarationStatement(): LocalVariableDeclarationStatementContext | undefined;
    expressionStatement(): ExpressionStatementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class IfStatementContext extends ParserRuleContext {
    IF(): TerminalNode;
    parExpression(): ParExpressionContext;
    statement(): StatementContext[];
    statement(i: number): StatementContext;
    ELSE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SwitchStatementContext extends ParserRuleContext {
    SWITCH(): TerminalNode;
    ON(): TerminalNode;
    expression(): ExpressionContext;
    LBRACE(): TerminalNode;
    RBRACE(): TerminalNode;
    whenControl(): WhenControlContext[];
    whenControl(i: number): WhenControlContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class WhenControlContext extends ParserRuleContext {
    WHEN(): TerminalNode;
    whenValue(): WhenValueContext;
    block(): BlockContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class WhenValueContext extends ParserRuleContext {
    ELSE(): TerminalNode | undefined;
    whenLiteral(): WhenLiteralContext[];
    whenLiteral(i: number): WhenLiteralContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class WhenLiteralContext extends ParserRuleContext {
    IntegerLiteral(): TerminalNode | undefined;
    SUB(): TerminalNode[];
    SUB(i: number): TerminalNode;
    ADD(): TerminalNode[];
    ADD(i: number): TerminalNode;
    LongLiteral(): TerminalNode | undefined;
    StringLiteral(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    id(): IdContext | undefined;
    LPAREN(): TerminalNode | undefined;
    whenLiteral(): WhenLiteralContext | undefined;
    RPAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ForStatementContext extends ParserRuleContext {
    FOR(): TerminalNode;
    LPAREN(): TerminalNode;
    forControl(): ForControlContext;
    RPAREN(): TerminalNode;
    statement(): StatementContext | undefined;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class WhileStatementContext extends ParserRuleContext {
    WHILE(): TerminalNode;
    parExpression(): ParExpressionContext;
    statement(): StatementContext | undefined;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class DoWhileStatementContext extends ParserRuleContext {
    DO(): TerminalNode;
    block(): BlockContext;
    WHILE(): TerminalNode;
    parExpression(): ParExpressionContext;
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class TryStatementContext extends ParserRuleContext {
    TRY(): TerminalNode;
    block(): BlockContext;
    finallyBlock(): FinallyBlockContext | undefined;
    catchClause(): CatchClauseContext[];
    catchClause(i: number): CatchClauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ReturnStatementContext extends ParserRuleContext {
    RETURN(): TerminalNode;
    SEMI(): TerminalNode;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ThrowStatementContext extends ParserRuleContext {
    THROW(): TerminalNode;
    expression(): ExpressionContext;
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class BreakStatementContext extends ParserRuleContext {
    BREAK(): TerminalNode;
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ContinueStatementContext extends ParserRuleContext {
    CONTINUE(): TerminalNode;
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class AccessLevelContext extends ParserRuleContext {
    AS(): TerminalNode;
    SYSTEM(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class InsertStatementContext extends ParserRuleContext {
    INSERT(): TerminalNode;
    expression(): ExpressionContext;
    SEMI(): TerminalNode;
    accessLevel(): AccessLevelContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class UpdateStatementContext extends ParserRuleContext {
    UPDATE(): TerminalNode;
    expression(): ExpressionContext;
    SEMI(): TerminalNode;
    accessLevel(): AccessLevelContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class DeleteStatementContext extends ParserRuleContext {
    DELETE(): TerminalNode;
    expression(): ExpressionContext;
    SEMI(): TerminalNode;
    accessLevel(): AccessLevelContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class UndeleteStatementContext extends ParserRuleContext {
    UNDELETE(): TerminalNode;
    expression(): ExpressionContext;
    SEMI(): TerminalNode;
    accessLevel(): AccessLevelContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class UpsertStatementContext extends ParserRuleContext {
    UPSERT(): TerminalNode;
    expression(): ExpressionContext;
    SEMI(): TerminalNode;
    accessLevel(): AccessLevelContext | undefined;
    qualifiedName(): QualifiedNameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class MergeStatementContext extends ParserRuleContext {
    MERGE(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    SEMI(): TerminalNode;
    accessLevel(): AccessLevelContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class RunAsStatementContext extends ParserRuleContext {
    SYSTEMRUNAS(): TerminalNode;
    LPAREN(): TerminalNode;
    RPAREN(): TerminalNode;
    block(): BlockContext;
    expressionList(): ExpressionListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ExpressionStatementContext extends ParserRuleContext {
    expression(): ExpressionContext;
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class PropertyBlockContext extends ParserRuleContext {
    getter(): GetterContext | undefined;
    setter(): SetterContext | undefined;
    modifier(): ModifierContext[];
    modifier(i: number): ModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class GetterContext extends ParserRuleContext {
    GET(): TerminalNode;
    SEMI(): TerminalNode | undefined;
    block(): BlockContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SetterContext extends ParserRuleContext {
    SET(): TerminalNode;
    SEMI(): TerminalNode | undefined;
    block(): BlockContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class CatchClauseContext extends ParserRuleContext {
    CATCH(): TerminalNode;
    LPAREN(): TerminalNode;
    qualifiedName(): QualifiedNameContext;
    id(): IdContext;
    RPAREN(): TerminalNode;
    block(): BlockContext;
    modifier(): ModifierContext[];
    modifier(i: number): ModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class FinallyBlockContext extends ParserRuleContext {
    FINALLY(): TerminalNode;
    block(): BlockContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ForControlContext extends ParserRuleContext {
    enhancedForControl(): EnhancedForControlContext | undefined;
    SEMI(): TerminalNode[];
    SEMI(i: number): TerminalNode;
    forInit(): ForInitContext | undefined;
    expression(): ExpressionContext | undefined;
    forUpdate(): ForUpdateContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ForInitContext extends ParserRuleContext {
    localVariableDeclaration(): LocalVariableDeclarationContext | undefined;
    expressionList(): ExpressionListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class EnhancedForControlContext extends ParserRuleContext {
    typeRef(): TypeRefContext;
    id(): IdContext;
    COLON(): TerminalNode;
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ForUpdateContext extends ParserRuleContext {
    expressionList(): ExpressionListContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ParExpressionContext extends ParserRuleContext {
    LPAREN(): TerminalNode;
    expression(): ExpressionContext;
    RPAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ExpressionListContext extends ParserRuleContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: ExpressionContext): void;
}
export declare class PrimaryExpressionContext extends ExpressionContext {
    primary(): PrimaryContext;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class DotExpressionContext extends ExpressionContext {
    expression(): ExpressionContext;
    DOT(): TerminalNode | undefined;
    QUESTIONDOT(): TerminalNode | undefined;
    dotMethodCall(): DotMethodCallContext | undefined;
    anyId(): AnyIdContext | undefined;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ArrayExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    LBRACK(): TerminalNode;
    RBRACK(): TerminalNode;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class MethodCallExpressionContext extends ExpressionContext {
    methodCall(): MethodCallContext;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class NewExpressionContext extends ExpressionContext {
    NEW(): TerminalNode;
    creator(): CreatorContext;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class CastExpressionContext extends ExpressionContext {
    LPAREN(): TerminalNode;
    typeRef(): TypeRefContext;
    RPAREN(): TerminalNode;
    expression(): ExpressionContext;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SubExpressionContext extends ExpressionContext {
    LPAREN(): TerminalNode;
    expression(): ExpressionContext;
    RPAREN(): TerminalNode;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class PostOpExpressionContext extends ExpressionContext {
    expression(): ExpressionContext;
    INC(): TerminalNode | undefined;
    DEC(): TerminalNode | undefined;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class PreOpExpressionContext extends ExpressionContext {
    expression(): ExpressionContext;
    ADD(): TerminalNode | undefined;
    SUB(): TerminalNode | undefined;
    INC(): TerminalNode | undefined;
    DEC(): TerminalNode | undefined;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class NegExpressionContext extends ExpressionContext {
    expression(): ExpressionContext;
    TILDE(): TerminalNode | undefined;
    BANG(): TerminalNode | undefined;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class Arth1ExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    MUL(): TerminalNode | undefined;
    DIV(): TerminalNode | undefined;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class Arth2ExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    ADD(): TerminalNode | undefined;
    SUB(): TerminalNode | undefined;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class BitExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    LT(): TerminalNode[];
    LT(i: number): TerminalNode;
    GT(): TerminalNode[];
    GT(i: number): TerminalNode;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class CmpExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    GT(): TerminalNode | undefined;
    LT(): TerminalNode | undefined;
    ASSIGN(): TerminalNode | undefined;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class InstanceOfExpressionContext extends ExpressionContext {
    expression(): ExpressionContext;
    INSTANCEOF(): TerminalNode;
    typeRef(): TypeRefContext;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class EqualityExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    TRIPLEEQUAL(): TerminalNode | undefined;
    TRIPLENOTEQUAL(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    NOTEQUAL(): TerminalNode | undefined;
    LESSANDGREATER(): TerminalNode | undefined;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class BitAndExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    BITAND(): TerminalNode;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class BitNotExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    CARET(): TerminalNode;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class BitOrExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    BITOR(): TerminalNode;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class LogAndExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    AND(): TerminalNode;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class LogOrExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    OR(): TerminalNode;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class CoalExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    COAL(): TerminalNode;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class CondExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    QUESTION(): TerminalNode;
    COLON(): TerminalNode;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class AssignExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    ASSIGN(): TerminalNode | undefined;
    ADD_ASSIGN(): TerminalNode | undefined;
    SUB_ASSIGN(): TerminalNode | undefined;
    MUL_ASSIGN(): TerminalNode | undefined;
    DIV_ASSIGN(): TerminalNode | undefined;
    AND_ASSIGN(): TerminalNode | undefined;
    OR_ASSIGN(): TerminalNode | undefined;
    XOR_ASSIGN(): TerminalNode | undefined;
    RSHIFT_ASSIGN(): TerminalNode | undefined;
    URSHIFT_ASSIGN(): TerminalNode | undefined;
    LSHIFT_ASSIGN(): TerminalNode | undefined;
    constructor(ctx: ExpressionContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class PrimaryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: PrimaryContext): void;
}
export declare class ThisPrimaryContext extends PrimaryContext {
    THIS(): TerminalNode;
    constructor(ctx: PrimaryContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SuperPrimaryContext extends PrimaryContext {
    SUPER(): TerminalNode;
    constructor(ctx: PrimaryContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class LiteralPrimaryContext extends PrimaryContext {
    literal(): LiteralContext;
    constructor(ctx: PrimaryContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class TypeRefPrimaryContext extends PrimaryContext {
    typeRef(): TypeRefContext;
    DOT(): TerminalNode;
    CLASS(): TerminalNode;
    constructor(ctx: PrimaryContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class VoidPrimaryContext extends PrimaryContext {
    VOID(): TerminalNode;
    DOT(): TerminalNode;
    CLASS(): TerminalNode;
    constructor(ctx: PrimaryContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class IdPrimaryContext extends PrimaryContext {
    id(): IdContext;
    constructor(ctx: PrimaryContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SoqlPrimaryContext extends PrimaryContext {
    soqlLiteral(): SoqlLiteralContext;
    constructor(ctx: PrimaryContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SoslPrimaryContext extends PrimaryContext {
    soslLiteral(): SoslLiteralContext;
    constructor(ctx: PrimaryContext);
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class MethodCallContext extends ParserRuleContext {
    id(): IdContext | undefined;
    LPAREN(): TerminalNode;
    RPAREN(): TerminalNode;
    expressionList(): ExpressionListContext | undefined;
    THIS(): TerminalNode | undefined;
    SUPER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class DotMethodCallContext extends ParserRuleContext {
    anyId(): AnyIdContext;
    LPAREN(): TerminalNode;
    RPAREN(): TerminalNode;
    expressionList(): ExpressionListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class CreatorContext extends ParserRuleContext {
    createdName(): CreatedNameContext;
    noRest(): NoRestContext | undefined;
    classCreatorRest(): ClassCreatorRestContext | undefined;
    arrayCreatorRest(): ArrayCreatorRestContext | undefined;
    mapCreatorRest(): MapCreatorRestContext | undefined;
    setCreatorRest(): SetCreatorRestContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class CreatedNameContext extends ParserRuleContext {
    idCreatedNamePair(): IdCreatedNamePairContext[];
    idCreatedNamePair(i: number): IdCreatedNamePairContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class IdCreatedNamePairContext extends ParserRuleContext {
    anyId(): AnyIdContext;
    LT(): TerminalNode | undefined;
    typeList(): TypeListContext | undefined;
    GT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class NoRestContext extends ParserRuleContext {
    LBRACE(): TerminalNode;
    RBRACE(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ClassCreatorRestContext extends ParserRuleContext {
    arguments(): ArgumentsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ArrayCreatorRestContext extends ParserRuleContext {
    LBRACK(): TerminalNode;
    expression(): ExpressionContext | undefined;
    RBRACK(): TerminalNode;
    arrayInitializer(): ArrayInitializerContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class MapCreatorRestContext extends ParserRuleContext {
    LBRACE(): TerminalNode;
    mapCreatorRestPair(): MapCreatorRestPairContext[];
    mapCreatorRestPair(i: number): MapCreatorRestPairContext;
    RBRACE(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class MapCreatorRestPairContext extends ParserRuleContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    MAPTO(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SetCreatorRestContext extends ParserRuleContext {
    LBRACE(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    RBRACE(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ArgumentsContext extends ParserRuleContext {
    LPAREN(): TerminalNode;
    RPAREN(): TerminalNode;
    expressionList(): ExpressionListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SoqlLiteralContext extends ParserRuleContext {
    LBRACK(): TerminalNode;
    query(): QueryContext;
    RBRACK(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class QueryContext extends ParserRuleContext {
    SELECT(): TerminalNode;
    selectList(): SelectListContext;
    FROM(): TerminalNode;
    fromNameList(): FromNameListContext;
    forClauses(): ForClausesContext;
    usingScope(): UsingScopeContext | undefined;
    whereClause(): WhereClauseContext | undefined;
    withClause(): WithClauseContext | undefined;
    groupByClause(): GroupByClauseContext | undefined;
    orderByClause(): OrderByClauseContext | undefined;
    limitClause(): LimitClauseContext | undefined;
    offsetClause(): OffsetClauseContext | undefined;
    allRowsClause(): AllRowsClauseContext | undefined;
    UPDATE(): TerminalNode | undefined;
    updateList(): UpdateListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SubQueryContext extends ParserRuleContext {
    SELECT(): TerminalNode;
    subFieldList(): SubFieldListContext;
    FROM(): TerminalNode;
    fromNameList(): FromNameListContext;
    forClauses(): ForClausesContext;
    whereClause(): WhereClauseContext | undefined;
    orderByClause(): OrderByClauseContext | undefined;
    limitClause(): LimitClauseContext | undefined;
    UPDATE(): TerminalNode | undefined;
    updateList(): UpdateListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SelectListContext extends ParserRuleContext {
    selectEntry(): SelectEntryContext[];
    selectEntry(i: number): SelectEntryContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SelectEntryContext extends ParserRuleContext {
    fieldName(): FieldNameContext | undefined;
    soqlId(): SoqlIdContext | undefined;
    soqlFunction(): SoqlFunctionContext | undefined;
    LPAREN(): TerminalNode | undefined;
    subQuery(): SubQueryContext | undefined;
    RPAREN(): TerminalNode | undefined;
    typeOf(): TypeOfContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class FieldNameContext extends ParserRuleContext {
    soqlId(): SoqlIdContext[];
    soqlId(i: number): SoqlIdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class FromNameListContext extends ParserRuleContext {
    fieldName(): FieldNameContext[];
    fieldName(i: number): FieldNameContext;
    soqlId(): SoqlIdContext[];
    soqlId(i: number): SoqlIdContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SubFieldListContext extends ParserRuleContext {
    subFieldEntry(): SubFieldEntryContext[];
    subFieldEntry(i: number): SubFieldEntryContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SubFieldEntryContext extends ParserRuleContext {
    fieldName(): FieldNameContext | undefined;
    soqlId(): SoqlIdContext | undefined;
    soqlFunction(): SoqlFunctionContext | undefined;
    LPAREN(): TerminalNode | undefined;
    subQuery(): SubQueryContext | undefined;
    RPAREN(): TerminalNode | undefined;
    typeOf(): TypeOfContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SoqlFieldsParameterContext extends ParserRuleContext {
    ALL(): TerminalNode | undefined;
    CUSTOM(): TerminalNode | undefined;
    STANDARD(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SoqlFunctionContext extends ParserRuleContext {
    AVG(): TerminalNode | undefined;
    LPAREN(): TerminalNode;
    fieldName(): FieldNameContext | undefined;
    RPAREN(): TerminalNode;
    COUNT(): TerminalNode | undefined;
    COUNT_DISTINCT(): TerminalNode | undefined;
    MIN(): TerminalNode | undefined;
    MAX(): TerminalNode | undefined;
    SUM(): TerminalNode | undefined;
    TOLABEL(): TerminalNode | undefined;
    FORMAT(): TerminalNode | undefined;
    CALENDAR_MONTH(): TerminalNode | undefined;
    dateFieldName(): DateFieldNameContext | undefined;
    CALENDAR_QUARTER(): TerminalNode | undefined;
    CALENDAR_YEAR(): TerminalNode | undefined;
    DAY_IN_MONTH(): TerminalNode | undefined;
    DAY_IN_WEEK(): TerminalNode | undefined;
    DAY_IN_YEAR(): TerminalNode | undefined;
    DAY_ONLY(): TerminalNode | undefined;
    FISCAL_MONTH(): TerminalNode | undefined;
    FISCAL_QUARTER(): TerminalNode | undefined;
    FISCAL_YEAR(): TerminalNode | undefined;
    HOUR_IN_DAY(): TerminalNode | undefined;
    WEEK_IN_MONTH(): TerminalNode | undefined;
    WEEK_IN_YEAR(): TerminalNode | undefined;
    FIELDS(): TerminalNode | undefined;
    soqlFieldsParameter(): SoqlFieldsParameterContext | undefined;
    DISTANCE(): TerminalNode | undefined;
    locationValue(): LocationValueContext[];
    locationValue(i: number): LocationValueContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    StringLiteral(): TerminalNode | undefined;
    GROUPING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class DateFieldNameContext extends ParserRuleContext {
    CONVERT_TIMEZONE(): TerminalNode | undefined;
    LPAREN(): TerminalNode | undefined;
    fieldName(): FieldNameContext;
    RPAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class LocationValueContext extends ParserRuleContext {
    fieldName(): FieldNameContext | undefined;
    boundExpression(): BoundExpressionContext | undefined;
    GEOLOCATION(): TerminalNode | undefined;
    LPAREN(): TerminalNode | undefined;
    coordinateValue(): CoordinateValueContext[];
    coordinateValue(i: number): CoordinateValueContext;
    COMMA(): TerminalNode | undefined;
    RPAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class CoordinateValueContext extends ParserRuleContext {
    signedNumber(): SignedNumberContext | undefined;
    boundExpression(): BoundExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class TypeOfContext extends ParserRuleContext {
    TYPEOF(): TerminalNode;
    fieldName(): FieldNameContext;
    END(): TerminalNode;
    whenClause(): WhenClauseContext[];
    whenClause(i: number): WhenClauseContext;
    elseClause(): ElseClauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class WhenClauseContext extends ParserRuleContext {
    WHEN(): TerminalNode;
    fieldName(): FieldNameContext;
    THEN(): TerminalNode;
    fieldNameList(): FieldNameListContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ElseClauseContext extends ParserRuleContext {
    ELSE(): TerminalNode;
    fieldNameList(): FieldNameListContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class FieldNameListContext extends ParserRuleContext {
    fieldName(): FieldNameContext[];
    fieldName(i: number): FieldNameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class UsingScopeContext extends ParserRuleContext {
    USING(): TerminalNode;
    SCOPE(): TerminalNode;
    soqlId(): SoqlIdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class WhereClauseContext extends ParserRuleContext {
    WHERE(): TerminalNode;
    logicalExpression(): LogicalExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class LogicalExpressionContext extends ParserRuleContext {
    conditionalExpression(): ConditionalExpressionContext[];
    conditionalExpression(i: number): ConditionalExpressionContext;
    SOQLAND(): TerminalNode[];
    SOQLAND(i: number): TerminalNode;
    SOQLOR(): TerminalNode[];
    SOQLOR(i: number): TerminalNode;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ConditionalExpressionContext extends ParserRuleContext {
    LPAREN(): TerminalNode | undefined;
    logicalExpression(): LogicalExpressionContext | undefined;
    RPAREN(): TerminalNode | undefined;
    fieldExpression(): FieldExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class FieldExpressionContext extends ParserRuleContext {
    fieldName(): FieldNameContext | undefined;
    comparisonOperator(): ComparisonOperatorContext;
    value(): ValueContext;
    soqlFunction(): SoqlFunctionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ComparisonOperatorContext extends ParserRuleContext {
    ASSIGN(): TerminalNode | undefined;
    NOTEQUAL(): TerminalNode | undefined;
    LT(): TerminalNode | undefined;
    GT(): TerminalNode | undefined;
    LESSANDGREATER(): TerminalNode | undefined;
    LIKE(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    INCLUDES(): TerminalNode | undefined;
    EXCLUDES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ValueContext extends ParserRuleContext {
    NULL(): TerminalNode | undefined;
    BooleanLiteral(): TerminalNode | undefined;
    signedNumber(): SignedNumberContext | undefined;
    StringLiteral(): TerminalNode | undefined;
    DateLiteral(): TerminalNode | undefined;
    DateTimeLiteral(): TerminalNode | undefined;
    dateFormula(): DateFormulaContext | undefined;
    IntegralCurrencyLiteral(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    IntegerLiteral(): TerminalNode | undefined;
    LPAREN(): TerminalNode | undefined;
    subQuery(): SubQueryContext | undefined;
    RPAREN(): TerminalNode | undefined;
    valueList(): ValueListContext | undefined;
    boundExpression(): BoundExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ValueListContext extends ParserRuleContext {
    LPAREN(): TerminalNode;
    value(): ValueContext[];
    value(i: number): ValueContext;
    RPAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SignedNumberContext extends ParserRuleContext {
    IntegerLiteral(): TerminalNode | undefined;
    NumberLiteral(): TerminalNode | undefined;
    ADD(): TerminalNode | undefined;
    SUB(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class WithClauseContext extends ParserRuleContext {
    WITH(): TerminalNode;
    DATA(): TerminalNode | undefined;
    CATEGORY(): TerminalNode | undefined;
    filteringExpression(): FilteringExpressionContext | undefined;
    SECURITY_ENFORCED(): TerminalNode | undefined;
    SYSTEM_MODE(): TerminalNode | undefined;
    USER_MODE(): TerminalNode | undefined;
    logicalExpression(): LogicalExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class FilteringExpressionContext extends ParserRuleContext {
    dataCategorySelection(): DataCategorySelectionContext[];
    dataCategorySelection(i: number): DataCategorySelectionContext;
    AND(): TerminalNode[];
    AND(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class DataCategorySelectionContext extends ParserRuleContext {
    soqlId(): SoqlIdContext;
    filteringSelector(): FilteringSelectorContext;
    dataCategoryName(): DataCategoryNameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class DataCategoryNameContext extends ParserRuleContext {
    soqlId(): SoqlIdContext[];
    soqlId(i: number): SoqlIdContext;
    LPAREN(): TerminalNode[];
    LPAREN(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class FilteringSelectorContext extends ParserRuleContext {
    AT(): TerminalNode | undefined;
    ABOVE(): TerminalNode | undefined;
    BELOW(): TerminalNode | undefined;
    ABOVE_OR_BELOW(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class GroupByClauseContext extends ParserRuleContext {
    GROUP(): TerminalNode;
    BY(): TerminalNode;
    selectList(): SelectListContext | undefined;
    HAVING(): TerminalNode | undefined;
    logicalExpression(): LogicalExpressionContext | undefined;
    ROLLUP(): TerminalNode | undefined;
    LPAREN(): TerminalNode | undefined;
    fieldName(): FieldNameContext[];
    fieldName(i: number): FieldNameContext;
    RPAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    CUBE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class OrderByClauseContext extends ParserRuleContext {
    ORDER(): TerminalNode;
    BY(): TerminalNode;
    fieldOrderList(): FieldOrderListContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class FieldOrderListContext extends ParserRuleContext {
    fieldOrder(): FieldOrderContext[];
    fieldOrder(i: number): FieldOrderContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class FieldOrderContext extends ParserRuleContext {
    fieldName(): FieldNameContext | undefined;
    NULLS(): TerminalNode | undefined;
    ASC(): TerminalNode | undefined;
    DESC(): TerminalNode | undefined;
    FIRST(): TerminalNode | undefined;
    LAST(): TerminalNode | undefined;
    soqlFunction(): SoqlFunctionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class LimitClauseContext extends ParserRuleContext {
    LIMIT(): TerminalNode;
    IntegerLiteral(): TerminalNode | undefined;
    boundExpression(): BoundExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class OffsetClauseContext extends ParserRuleContext {
    OFFSET(): TerminalNode;
    IntegerLiteral(): TerminalNode | undefined;
    boundExpression(): BoundExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class AllRowsClauseContext extends ParserRuleContext {
    ALL(): TerminalNode;
    ROWS(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class ForClausesContext extends ParserRuleContext {
    FOR(): TerminalNode[];
    FOR(i: number): TerminalNode;
    VIEW(): TerminalNode[];
    VIEW(i: number): TerminalNode;
    UPDATE(): TerminalNode[];
    UPDATE(i: number): TerminalNode;
    REFERENCE(): TerminalNode[];
    REFERENCE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class BoundExpressionContext extends ParserRuleContext {
    COLON(): TerminalNode;
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class DateFormulaContext extends ParserRuleContext {
    YESTERDAY(): TerminalNode | undefined;
    TODAY(): TerminalNode | undefined;
    TOMORROW(): TerminalNode | undefined;
    LAST_WEEK(): TerminalNode | undefined;
    THIS_WEEK(): TerminalNode | undefined;
    NEXT_WEEK(): TerminalNode | undefined;
    LAST_MONTH(): TerminalNode | undefined;
    THIS_MONTH(): TerminalNode | undefined;
    NEXT_MONTH(): TerminalNode | undefined;
    LAST_90_DAYS(): TerminalNode | undefined;
    NEXT_90_DAYS(): TerminalNode | undefined;
    LAST_N_DAYS_N(): TerminalNode | undefined;
    COLON(): TerminalNode | undefined;
    signedInteger(): SignedIntegerContext | undefined;
    NEXT_N_DAYS_N(): TerminalNode | undefined;
    N_DAYS_AGO_N(): TerminalNode | undefined;
    NEXT_N_WEEKS_N(): TerminalNode | undefined;
    LAST_N_WEEKS_N(): TerminalNode | undefined;
    N_WEEKS_AGO_N(): TerminalNode | undefined;
    NEXT_N_MONTHS_N(): TerminalNode | undefined;
    LAST_N_MONTHS_N(): TerminalNode | undefined;
    N_MONTHS_AGO_N(): TerminalNode | undefined;
    THIS_QUARTER(): TerminalNode | undefined;
    LAST_QUARTER(): TerminalNode | undefined;
    NEXT_QUARTER(): TerminalNode | undefined;
    NEXT_N_QUARTERS_N(): TerminalNode | undefined;
    LAST_N_QUARTERS_N(): TerminalNode | undefined;
    N_QUARTERS_AGO_N(): TerminalNode | undefined;
    THIS_YEAR(): TerminalNode | undefined;
    LAST_YEAR(): TerminalNode | undefined;
    NEXT_YEAR(): TerminalNode | undefined;
    NEXT_N_YEARS_N(): TerminalNode | undefined;
    LAST_N_YEARS_N(): TerminalNode | undefined;
    N_YEARS_AGO_N(): TerminalNode | undefined;
    THIS_FISCAL_QUARTER(): TerminalNode | undefined;
    LAST_FISCAL_QUARTER(): TerminalNode | undefined;
    NEXT_FISCAL_QUARTER(): TerminalNode | undefined;
    NEXT_N_FISCAL_QUARTERS_N(): TerminalNode | undefined;
    LAST_N_FISCAL_QUARTERS_N(): TerminalNode | undefined;
    N_FISCAL_QUARTERS_AGO_N(): TerminalNode | undefined;
    THIS_FISCAL_YEAR(): TerminalNode | undefined;
    LAST_FISCAL_YEAR(): TerminalNode | undefined;
    NEXT_FISCAL_YEAR(): TerminalNode | undefined;
    NEXT_N_FISCAL_YEARS_N(): TerminalNode | undefined;
    LAST_N_FISCAL_YEARS_N(): TerminalNode | undefined;
    N_FISCAL_YEARS_AGO_N(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SignedIntegerContext extends ParserRuleContext {
    IntegerLiteral(): TerminalNode;
    ADD(): TerminalNode | undefined;
    SUB(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SoqlIdContext extends ParserRuleContext {
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SoslLiteralContext extends ParserRuleContext {
    FindLiteral(): TerminalNode | undefined;
    soslClauses(): SoslClausesContext;
    RBRACK(): TerminalNode;
    LBRACK(): TerminalNode | undefined;
    FIND(): TerminalNode | undefined;
    boundExpression(): BoundExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SoslLiteralAltContext extends ParserRuleContext {
    FindLiteralAlt(): TerminalNode;
    soslClauses(): SoslClausesContext;
    RBRACK(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SoslClausesContext extends ParserRuleContext {
    IN(): TerminalNode | undefined;
    searchGroup(): SearchGroupContext | undefined;
    RETURNING(): TerminalNode | undefined;
    fieldSpecList(): FieldSpecListContext | undefined;
    soslWithClause(): SoslWithClauseContext[];
    soslWithClause(i: number): SoslWithClauseContext;
    limitClause(): LimitClauseContext | undefined;
    UPDATE(): TerminalNode | undefined;
    updateList(): UpdateListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SoslWithClauseContext extends ParserRuleContext {
    WITH(): TerminalNode;
    DIVISION(): TerminalNode | undefined;
    ASSIGN(): TerminalNode | undefined;
    StringLiteral(): TerminalNode | undefined;
    DATA(): TerminalNode | undefined;
    CATEGORY(): TerminalNode | undefined;
    filteringExpression(): FilteringExpressionContext | undefined;
    SNIPPET(): TerminalNode | undefined;
    LPAREN(): TerminalNode | undefined;
    TARGET_LENGTH(): TerminalNode | undefined;
    IntegerLiteral(): TerminalNode | undefined;
    RPAREN(): TerminalNode | undefined;
    NETWORK(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    networkList(): NetworkListContext | undefined;
    PRICEBOOKID(): TerminalNode | undefined;
    METADATA(): TerminalNode | undefined;
    USER_MODE(): TerminalNode | undefined;
    SYSTEM_MODE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SearchGroupContext extends ParserRuleContext {
    FIELDS(): TerminalNode;
    ALL(): TerminalNode | undefined;
    EMAIL(): TerminalNode | undefined;
    NAME(): TerminalNode | undefined;
    PHONE(): TerminalNode | undefined;
    SIDEBAR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class FieldSpecListContext extends ParserRuleContext {
    fieldSpec(): FieldSpecContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    fieldSpecList(): FieldSpecListContext[];
    fieldSpecList(i: number): FieldSpecListContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class FieldSpecContext extends ParserRuleContext {
    soslId(): SoslIdContext[];
    soslId(i: number): SoslIdContext;
    LPAREN(): TerminalNode | undefined;
    fieldList(): FieldListContext | undefined;
    RPAREN(): TerminalNode | undefined;
    WHERE(): TerminalNode | undefined;
    logicalExpression(): LogicalExpressionContext | undefined;
    USING(): TerminalNode | undefined;
    LISTVIEW(): TerminalNode | undefined;
    ASSIGN(): TerminalNode | undefined;
    ORDER(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    fieldOrderList(): FieldOrderListContext | undefined;
    limitClause(): LimitClauseContext | undefined;
    offsetClause(): OffsetClauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class FieldListContext extends ParserRuleContext {
    soslId(): SoslIdContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    fieldList(): FieldListContext[];
    fieldList(i: number): FieldListContext;
    TOLABEL(): TerminalNode | undefined;
    LPAREN(): TerminalNode | undefined;
    RPAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class UpdateListContext extends ParserRuleContext {
    updateType(): UpdateTypeContext;
    COMMA(): TerminalNode | undefined;
    updateList(): UpdateListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class UpdateTypeContext extends ParserRuleContext {
    TRACKING(): TerminalNode | undefined;
    VIEWSTAT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class NetworkListContext extends ParserRuleContext {
    StringLiteral(): TerminalNode;
    COMMA(): TerminalNode | undefined;
    networkList(): NetworkListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class SoslIdContext extends ParserRuleContext {
    id(): IdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    soslId(): SoslIdContext[];
    soslId(i: number): SoslIdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class IdContext extends ParserRuleContext {
    Identifier(): TerminalNode | undefined;
    AFTER(): TerminalNode | undefined;
    BEFORE(): TerminalNode | undefined;
    GET(): TerminalNode | undefined;
    INHERITED(): TerminalNode | undefined;
    INSTANCEOF(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    SHARING(): TerminalNode | undefined;
    SWITCH(): TerminalNode | undefined;
    TRANSIENT(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    WHEN(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    WITHOUT(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    SYSTEM(): TerminalNode | undefined;
    IntegralCurrencyLiteral(): TerminalNode | undefined;
    SELECT(): TerminalNode | undefined;
    COUNT(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    SCOPE(): TerminalNode | undefined;
    WHERE(): TerminalNode | undefined;
    ORDER(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    LIMIT(): TerminalNode | undefined;
    SOQLAND(): TerminalNode | undefined;
    SOQLOR(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    AVG(): TerminalNode | undefined;
    COUNT_DISTINCT(): TerminalNode | undefined;
    MIN(): TerminalNode | undefined;
    MAX(): TerminalNode | undefined;
    SUM(): TerminalNode | undefined;
    TYPEOF(): TerminalNode | undefined;
    END(): TerminalNode | undefined;
    THEN(): TerminalNode | undefined;
    LIKE(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    INCLUDES(): TerminalNode | undefined;
    EXCLUDES(): TerminalNode | undefined;
    ASC(): TerminalNode | undefined;
    DESC(): TerminalNode | undefined;
    NULLS(): TerminalNode | undefined;
    FIRST(): TerminalNode | undefined;
    LAST(): TerminalNode | undefined;
    GROUP(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    HAVING(): TerminalNode | undefined;
    ROLLUP(): TerminalNode | undefined;
    TOLABEL(): TerminalNode | undefined;
    OFFSET(): TerminalNode | undefined;
    DATA(): TerminalNode | undefined;
    CATEGORY(): TerminalNode | undefined;
    AT(): TerminalNode | undefined;
    ABOVE(): TerminalNode | undefined;
    BELOW(): TerminalNode | undefined;
    ABOVE_OR_BELOW(): TerminalNode | undefined;
    SECURITY_ENFORCED(): TerminalNode | undefined;
    USER_MODE(): TerminalNode | undefined;
    SYSTEM_MODE(): TerminalNode | undefined;
    REFERENCE(): TerminalNode | undefined;
    CUBE(): TerminalNode | undefined;
    FORMAT(): TerminalNode | undefined;
    TRACKING(): TerminalNode | undefined;
    VIEWSTAT(): TerminalNode | undefined;
    STANDARD(): TerminalNode | undefined;
    CUSTOM(): TerminalNode | undefined;
    DISTANCE(): TerminalNode | undefined;
    GEOLOCATION(): TerminalNode | undefined;
    GROUPING(): TerminalNode | undefined;
    CALENDAR_MONTH(): TerminalNode | undefined;
    CALENDAR_QUARTER(): TerminalNode | undefined;
    CALENDAR_YEAR(): TerminalNode | undefined;
    DAY_IN_MONTH(): TerminalNode | undefined;
    DAY_IN_WEEK(): TerminalNode | undefined;
    DAY_IN_YEAR(): TerminalNode | undefined;
    DAY_ONLY(): TerminalNode | undefined;
    FISCAL_MONTH(): TerminalNode | undefined;
    FISCAL_QUARTER(): TerminalNode | undefined;
    FISCAL_YEAR(): TerminalNode | undefined;
    HOUR_IN_DAY(): TerminalNode | undefined;
    WEEK_IN_MONTH(): TerminalNode | undefined;
    WEEK_IN_YEAR(): TerminalNode | undefined;
    CONVERT_TIMEZONE(): TerminalNode | undefined;
    YESTERDAY(): TerminalNode | undefined;
    TODAY(): TerminalNode | undefined;
    TOMORROW(): TerminalNode | undefined;
    LAST_WEEK(): TerminalNode | undefined;
    THIS_WEEK(): TerminalNode | undefined;
    NEXT_WEEK(): TerminalNode | undefined;
    LAST_MONTH(): TerminalNode | undefined;
    THIS_MONTH(): TerminalNode | undefined;
    NEXT_MONTH(): TerminalNode | undefined;
    LAST_90_DAYS(): TerminalNode | undefined;
    NEXT_90_DAYS(): TerminalNode | undefined;
    LAST_N_DAYS_N(): TerminalNode | undefined;
    NEXT_N_DAYS_N(): TerminalNode | undefined;
    N_DAYS_AGO_N(): TerminalNode | undefined;
    NEXT_N_WEEKS_N(): TerminalNode | undefined;
    LAST_N_WEEKS_N(): TerminalNode | undefined;
    N_WEEKS_AGO_N(): TerminalNode | undefined;
    NEXT_N_MONTHS_N(): TerminalNode | undefined;
    LAST_N_MONTHS_N(): TerminalNode | undefined;
    N_MONTHS_AGO_N(): TerminalNode | undefined;
    THIS_QUARTER(): TerminalNode | undefined;
    LAST_QUARTER(): TerminalNode | undefined;
    NEXT_QUARTER(): TerminalNode | undefined;
    NEXT_N_QUARTERS_N(): TerminalNode | undefined;
    LAST_N_QUARTERS_N(): TerminalNode | undefined;
    N_QUARTERS_AGO_N(): TerminalNode | undefined;
    THIS_YEAR(): TerminalNode | undefined;
    LAST_YEAR(): TerminalNode | undefined;
    NEXT_YEAR(): TerminalNode | undefined;
    NEXT_N_YEARS_N(): TerminalNode | undefined;
    LAST_N_YEARS_N(): TerminalNode | undefined;
    N_YEARS_AGO_N(): TerminalNode | undefined;
    THIS_FISCAL_QUARTER(): TerminalNode | undefined;
    LAST_FISCAL_QUARTER(): TerminalNode | undefined;
    NEXT_FISCAL_QUARTER(): TerminalNode | undefined;
    NEXT_N_FISCAL_QUARTERS_N(): TerminalNode | undefined;
    LAST_N_FISCAL_QUARTERS_N(): TerminalNode | undefined;
    N_FISCAL_QUARTERS_AGO_N(): TerminalNode | undefined;
    THIS_FISCAL_YEAR(): TerminalNode | undefined;
    LAST_FISCAL_YEAR(): TerminalNode | undefined;
    NEXT_FISCAL_YEAR(): TerminalNode | undefined;
    NEXT_N_FISCAL_YEARS_N(): TerminalNode | undefined;
    LAST_N_FISCAL_YEARS_N(): TerminalNode | undefined;
    N_FISCAL_YEARS_AGO_N(): TerminalNode | undefined;
    FIND(): TerminalNode | undefined;
    EMAIL(): TerminalNode | undefined;
    NAME(): TerminalNode | undefined;
    PHONE(): TerminalNode | undefined;
    SIDEBAR(): TerminalNode | undefined;
    FIELDS(): TerminalNode | undefined;
    METADATA(): TerminalNode | undefined;
    PRICEBOOKID(): TerminalNode | undefined;
    NETWORK(): TerminalNode | undefined;
    SNIPPET(): TerminalNode | undefined;
    TARGET_LENGTH(): TerminalNode | undefined;
    DIVISION(): TerminalNode | undefined;
    RETURNING(): TerminalNode | undefined;
    LISTVIEW(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
export declare class AnyIdContext extends ParserRuleContext {
    Identifier(): TerminalNode | undefined;
    ABSTRACT(): TerminalNode | undefined;
    AFTER(): TerminalNode | undefined;
    BEFORE(): TerminalNode | undefined;
    BREAK(): TerminalNode | undefined;
    CATCH(): TerminalNode | undefined;
    CLASS(): TerminalNode | undefined;
    CONTINUE(): TerminalNode | undefined;
    DELETE(): TerminalNode | undefined;
    DO(): TerminalNode | undefined;
    ELSE(): TerminalNode | undefined;
    ENUM(): TerminalNode | undefined;
    EXTENDS(): TerminalNode | undefined;
    FINAL(): TerminalNode | undefined;
    FINALLY(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    GET(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    IF(): TerminalNode | undefined;
    IMPLEMENTS(): TerminalNode | undefined;
    INHERITED(): TerminalNode | undefined;
    INSERT(): TerminalNode | undefined;
    INSTANCEOF(): TerminalNode | undefined;
    INTERFACE(): TerminalNode | undefined;
    LIST(): TerminalNode | undefined;
    MAP(): TerminalNode | undefined;
    MERGE(): TerminalNode | undefined;
    NEW(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    OVERRIDE(): TerminalNode | undefined;
    PRIVATE(): TerminalNode | undefined;
    PROTECTED(): TerminalNode | undefined;
    PUBLIC(): TerminalNode | undefined;
    RETURN(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    SHARING(): TerminalNode | undefined;
    STATIC(): TerminalNode | undefined;
    SUPER(): TerminalNode | undefined;
    SWITCH(): TerminalNode | undefined;
    TESTMETHOD(): TerminalNode | undefined;
    THIS(): TerminalNode | undefined;
    THROW(): TerminalNode | undefined;
    TRANSIENT(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    TRY(): TerminalNode | undefined;
    UNDELETE(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    UPSERT(): TerminalNode | undefined;
    VIRTUAL(): TerminalNode | undefined;
    WEBSERVICE(): TerminalNode | undefined;
    WHEN(): TerminalNode | undefined;
    WHILE(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    WITHOUT(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    SYSTEM(): TerminalNode | undefined;
    IntegralCurrencyLiteral(): TerminalNode | undefined;
    SELECT(): TerminalNode | undefined;
    COUNT(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    SCOPE(): TerminalNode | undefined;
    WHERE(): TerminalNode | undefined;
    ORDER(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    LIMIT(): TerminalNode | undefined;
    SOQLAND(): TerminalNode | undefined;
    SOQLOR(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    AVG(): TerminalNode | undefined;
    COUNT_DISTINCT(): TerminalNode | undefined;
    MIN(): TerminalNode | undefined;
    MAX(): TerminalNode | undefined;
    SUM(): TerminalNode | undefined;
    TYPEOF(): TerminalNode | undefined;
    END(): TerminalNode | undefined;
    THEN(): TerminalNode | undefined;
    LIKE(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    INCLUDES(): TerminalNode | undefined;
    EXCLUDES(): TerminalNode | undefined;
    ASC(): TerminalNode | undefined;
    DESC(): TerminalNode | undefined;
    NULLS(): TerminalNode | undefined;
    FIRST(): TerminalNode | undefined;
    LAST(): TerminalNode | undefined;
    GROUP(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    HAVING(): TerminalNode | undefined;
    ROLLUP(): TerminalNode | undefined;
    TOLABEL(): TerminalNode | undefined;
    OFFSET(): TerminalNode | undefined;
    DATA(): TerminalNode | undefined;
    CATEGORY(): TerminalNode | undefined;
    AT(): TerminalNode | undefined;
    ABOVE(): TerminalNode | undefined;
    BELOW(): TerminalNode | undefined;
    ABOVE_OR_BELOW(): TerminalNode | undefined;
    SECURITY_ENFORCED(): TerminalNode | undefined;
    SYSTEM_MODE(): TerminalNode | undefined;
    USER_MODE(): TerminalNode | undefined;
    REFERENCE(): TerminalNode | undefined;
    CUBE(): TerminalNode | undefined;
    FORMAT(): TerminalNode | undefined;
    TRACKING(): TerminalNode | undefined;
    VIEWSTAT(): TerminalNode | undefined;
    STANDARD(): TerminalNode | undefined;
    CUSTOM(): TerminalNode | undefined;
    DISTANCE(): TerminalNode | undefined;
    GEOLOCATION(): TerminalNode | undefined;
    GROUPING(): TerminalNode | undefined;
    CALENDAR_MONTH(): TerminalNode | undefined;
    CALENDAR_QUARTER(): TerminalNode | undefined;
    CALENDAR_YEAR(): TerminalNode | undefined;
    DAY_IN_MONTH(): TerminalNode | undefined;
    DAY_IN_WEEK(): TerminalNode | undefined;
    DAY_IN_YEAR(): TerminalNode | undefined;
    DAY_ONLY(): TerminalNode | undefined;
    FISCAL_MONTH(): TerminalNode | undefined;
    FISCAL_QUARTER(): TerminalNode | undefined;
    FISCAL_YEAR(): TerminalNode | undefined;
    HOUR_IN_DAY(): TerminalNode | undefined;
    WEEK_IN_MONTH(): TerminalNode | undefined;
    WEEK_IN_YEAR(): TerminalNode | undefined;
    CONVERT_TIMEZONE(): TerminalNode | undefined;
    YESTERDAY(): TerminalNode | undefined;
    TODAY(): TerminalNode | undefined;
    TOMORROW(): TerminalNode | undefined;
    LAST_WEEK(): TerminalNode | undefined;
    THIS_WEEK(): TerminalNode | undefined;
    NEXT_WEEK(): TerminalNode | undefined;
    LAST_MONTH(): TerminalNode | undefined;
    THIS_MONTH(): TerminalNode | undefined;
    NEXT_MONTH(): TerminalNode | undefined;
    LAST_90_DAYS(): TerminalNode | undefined;
    NEXT_90_DAYS(): TerminalNode | undefined;
    LAST_N_DAYS_N(): TerminalNode | undefined;
    NEXT_N_DAYS_N(): TerminalNode | undefined;
    N_DAYS_AGO_N(): TerminalNode | undefined;
    NEXT_N_WEEKS_N(): TerminalNode | undefined;
    LAST_N_WEEKS_N(): TerminalNode | undefined;
    N_WEEKS_AGO_N(): TerminalNode | undefined;
    NEXT_N_MONTHS_N(): TerminalNode | undefined;
    LAST_N_MONTHS_N(): TerminalNode | undefined;
    N_MONTHS_AGO_N(): TerminalNode | undefined;
    THIS_QUARTER(): TerminalNode | undefined;
    LAST_QUARTER(): TerminalNode | undefined;
    NEXT_QUARTER(): TerminalNode | undefined;
    NEXT_N_QUARTERS_N(): TerminalNode | undefined;
    LAST_N_QUARTERS_N(): TerminalNode | undefined;
    N_QUARTERS_AGO_N(): TerminalNode | undefined;
    THIS_YEAR(): TerminalNode | undefined;
    LAST_YEAR(): TerminalNode | undefined;
    NEXT_YEAR(): TerminalNode | undefined;
    NEXT_N_YEARS_N(): TerminalNode | undefined;
    LAST_N_YEARS_N(): TerminalNode | undefined;
    N_YEARS_AGO_N(): TerminalNode | undefined;
    THIS_FISCAL_QUARTER(): TerminalNode | undefined;
    LAST_FISCAL_QUARTER(): TerminalNode | undefined;
    NEXT_FISCAL_QUARTER(): TerminalNode | undefined;
    NEXT_N_FISCAL_QUARTERS_N(): TerminalNode | undefined;
    LAST_N_FISCAL_QUARTERS_N(): TerminalNode | undefined;
    N_FISCAL_QUARTERS_AGO_N(): TerminalNode | undefined;
    THIS_FISCAL_YEAR(): TerminalNode | undefined;
    LAST_FISCAL_YEAR(): TerminalNode | undefined;
    NEXT_FISCAL_YEAR(): TerminalNode | undefined;
    NEXT_N_FISCAL_YEARS_N(): TerminalNode | undefined;
    LAST_N_FISCAL_YEARS_N(): TerminalNode | undefined;
    N_FISCAL_YEARS_AGO_N(): TerminalNode | undefined;
    FIND(): TerminalNode | undefined;
    EMAIL(): TerminalNode | undefined;
    NAME(): TerminalNode | undefined;
    PHONE(): TerminalNode | undefined;
    SIDEBAR(): TerminalNode | undefined;
    FIELDS(): TerminalNode | undefined;
    METADATA(): TerminalNode | undefined;
    PRICEBOOKID(): TerminalNode | undefined;
    NETWORK(): TerminalNode | undefined;
    SNIPPET(): TerminalNode | undefined;
    TARGET_LENGTH(): TerminalNode | undefined;
    DIVISION(): TerminalNode | undefined;
    RETURNING(): TerminalNode | undefined;
    LISTVIEW(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: ApexParserListener): void;
    exitRule(listener: ApexParserListener): void;
    accept<Result>(visitor: ApexParserVisitor<Result>): Result;
}
