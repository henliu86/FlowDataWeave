"use strict";
/*
 [The "BSD licence"]
 Copyright (c) 2020 Kevin Jones
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkProject = exports.check = exports.ParseTreeWalker = exports.CommonTokenStream = void 0;
const path_1 = require("path");
const dir = require("node-dir");
const ApexLexer_1 = require("./ApexLexer");
const ApexParser_1 = require("./ApexParser");
const CaseInsensitiveInputStream_1 = require("./CaseInsensitiveInputStream");
const antlr4ts_1 = require("antlr4ts");
const ThrowingErrorListener_1 = require("./ThrowingErrorListener");
const fs_1 = require("fs");
__exportStar(require("./ApexLexer"), exports);
__exportStar(require("./ApexParser"), exports);
__exportStar(require("./CaseInsensitiveInputStream"), exports);
__exportStar(require("./ThrowingErrorListener"), exports);
__exportStar(require("./ApexParserListener"), exports);
__exportStar(require("./ApexParserVisitor"), exports);
var antlr4ts_2 = require("antlr4ts");
Object.defineProperty(exports, "CommonTokenStream", { enumerable: true, get: function () { return antlr4ts_2.CommonTokenStream; } });
var ParseTreeWalker_1 = require("antlr4ts/tree/ParseTreeWalker");
Object.defineProperty(exports, "ParseTreeWalker", { enumerable: true, get: function () { return ParseTreeWalker_1.ParseTreeWalker; } });
function check(pathStr) {
    return __awaiter(this, void 0, void 0, function* () {
        const path = (0, path_1.resolve)(pathStr || process.argv[1] || process.cwd());
        const result = {
            status: 0,
            errors: []
        };
        if (!(0, fs_1.existsSync)(path)) {
            console.log(`Path does not exist, aborting: ${path}`);
            result.status = 2;
        }
        else {
            try {
                yield parseFiles(path);
            }
            catch (err) {
                console.log(`Error processing: ${path}`);
                console.log(err);
                result.status = 1;
            }
        }
        process.exitCode = result.status;
        return result;
    });
}
exports.check = check;
function checkProject(pathStr) {
    return __awaiter(this, void 0, void 0, function* () {
        const path = (0, path_1.resolve)(pathStr || process.argv[1] || process.cwd());
        const name = (0, path_1.basename)(path);
        const project = findProjectFile(path, 1);
        const packages = getProjectPackages(project);
        if (packages.length == 0) {
            console.log(`[${name}]: No valid SFDX project, checking all cls & trigger files`);
            const result = yield check(path);
            return [Object.assign({ name, path: "." }, result)];
        }
        const projectDir = (0, path_1.dirname)(project);
        const projectResult = yield Promise.all(packages
            .map((pkg) => __awaiter(this, void 0, void 0, function* () {
            console.log(`[${name}]: Checking package "${pkg}"`);
            const pkgPath = (0, path_1.resolve)(projectDir, pkg);
            const result = yield check(pkgPath);
            return Object.assign({ name,
                pkg, path: (0, path_1.relative)(path, pkgPath) }, result);
        })));
        process.exitCode = Math.max(...projectResult.map(r => r.status));
        return projectResult;
    });
}
exports.checkProject = checkProject;
function parseFiles(path) {
    return __awaiter(this, void 0, void 0, function* () {
        const files = yield dir.promiseFiles(path);
        const classErrors = parseByType(path, files, ".cls", (parser) => { parser.compilationUnit(); });
        const triggerErrors = parseByType(path, files, ".trigger", (parser) => { parser.triggerUnit(); });
        return classErrors.concat(triggerErrors);
    });
}
function parseByType(rootPath, files, endsWith, operation) {
    let parsedCount = 0;
    const errors = [];
    files.filter(name => name.endsWith(endsWith)).forEach(file => {
        if ((0, fs_1.lstatSync)(file).isFile()) {
            const content = (0, fs_1.readFileSync)(file);
            const lexer = new ApexLexer_1.ApexLexer(new CaseInsensitiveInputStream_1.CaseInsensitiveInputStream(antlr4ts_1.CharStreams.fromString(content.toString())));
            const tokens = new antlr4ts_1.CommonTokenStream(lexer);
            const parser = new ApexParser_1.ApexParser(tokens);
            parser.removeErrorListeners();
            parser.addErrorListener(new ThrowingErrorListener_1.ThrowingErrorListener());
            try {
                operation(parser);
            }
            catch (err) {
                console.log(`Error parsing: ${file}`);
                console.log(err);
                errors.push({
                    path: (0, path_1.relative)(rootPath, file),
                    error: JSON.stringify(err)
                });
            }
            parsedCount += 1;
        }
    });
    console.log(`Parsed ${parsedCount} '${endsWith}' files in: ${rootPath}`);
    return errors;
}
function findProjectFile(wd, depth) {
    const proj = "sfdx-project.json";
    const files = (0, fs_1.readdirSync)(wd).filter(i => !(/(^|\/)\.[^\/\.]/g).test(i));
    if (files.includes(proj)) {
        return (0, path_1.resolve)(wd, proj);
    }
    if (depth) {
        const dirs = files.map(f => (0, path_1.resolve)(wd, f)).filter(f => (0, fs_1.lstatSync)(f).isDirectory());
        const newDepth = depth - 1;
        for (const d of dirs) {
            const p = findProjectFile(d, newDepth);
            if (p) {
                return p;
            }
        }
    }
    return undefined;
}
function getProjectPackages(projectFilePath) {
    if (!projectFilePath) {
        return [];
    }
    const config = JSON.parse((0, fs_1.readFileSync)(projectFilePath, { encoding: "utf8" }));
    const packages = config.packageDirectories || [];
    return packages.flatMap((p) => p.path ? p.path.replace(/\\/g, "/") : []);
}
//# sourceMappingURL=index.js.map