"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createParser = exports.SyntaxErrorCounter = void 0;
/*
 Copyright (c) 2021 Kevin Jones, All rights reserved.
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.
 */
const antlr4ts_1 = require("antlr4ts");
const ApexLexer_1 = require("../ApexLexer");
const ApexParser_1 = require("../ApexParser");
const CaseInsensitiveInputStream_1 = require("../CaseInsensitiveInputStream");
class SyntaxErrorCounter {
    constructor() {
        this.numErrors = 0;
    }
    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {
        this.numErrors += 1;
    }
    getNumErrors() {
        return this.numErrors;
    }
}
exports.SyntaxErrorCounter = SyntaxErrorCounter;
function createParser(input) {
    const lexer = new ApexLexer_1.ApexLexer(new CaseInsensitiveInputStream_1.CaseInsensitiveInputStream(antlr4ts_1.CharStreams.fromString(input)));
    const tokens = new antlr4ts_1.CommonTokenStream(lexer);
    const parser = new ApexParser_1.ApexParser(tokens);
    parser.removeErrorListeners();
    const errorCounter = new SyntaxErrorCounter();
    parser.addErrorListener(errorCounter);
    return [parser, errorCounter];
}
exports.createParser = createParser;
//# sourceMappingURL=SyntaxErrorCounter.js.map