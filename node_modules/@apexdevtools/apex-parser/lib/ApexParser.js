"use strict";
// Generated from ApexParser.g4 by ANTLR 4.9.0-SNAPSHOT
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForStatementContext = exports.WhenLiteralContext = exports.WhenValueContext = exports.WhenControlContext = exports.SwitchStatementContext = exports.IfStatementContext = exports.StatementContext = exports.LocalVariableDeclarationContext = exports.LocalVariableDeclarationStatementContext = exports.BlockContext = exports.ElementValueArrayInitializerContext = exports.ElementValueContext = exports.ElementValuePairContext = exports.ElementValuePairsContext = exports.AnnotationContext = exports.LiteralContext = exports.QualifiedNameContext = exports.FormalParameterContext = exports.FormalParameterListContext = exports.FormalParametersContext = exports.TypeArgumentsContext = exports.TypeNameContext = exports.ArraySubscriptsContext = exports.TypeRefContext = exports.ArrayInitializerContext = exports.VariableDeclaratorContext = exports.VariableDeclaratorsContext = exports.InterfaceMethodDeclarationContext = exports.PropertyDeclarationContext = exports.FieldDeclarationContext = exports.ConstructorDeclarationContext = exports.MethodDeclarationContext = exports.TriggerMemberDeclarationContext = exports.MemberDeclarationContext = exports.ModifierContext = exports.ClassBodyDeclarationContext = exports.InterfaceBodyContext = exports.ClassBodyContext = exports.TypeListContext = exports.InterfaceDeclarationContext = exports.EnumConstantsContext = exports.EnumDeclarationContext = exports.ClassDeclarationContext = exports.TypeDeclarationContext = exports.CompilationUnitContext = exports.TriggerBlockMemberContext = exports.TriggerBlockContext = exports.TriggerCaseContext = exports.TriggerUnitContext = exports.ApexParser = void 0;
exports.CoalExpressionContext = exports.LogOrExpressionContext = exports.LogAndExpressionContext = exports.BitOrExpressionContext = exports.BitNotExpressionContext = exports.BitAndExpressionContext = exports.EqualityExpressionContext = exports.InstanceOfExpressionContext = exports.CmpExpressionContext = exports.BitExpressionContext = exports.Arth2ExpressionContext = exports.Arth1ExpressionContext = exports.NegExpressionContext = exports.PreOpExpressionContext = exports.PostOpExpressionContext = exports.SubExpressionContext = exports.CastExpressionContext = exports.NewExpressionContext = exports.MethodCallExpressionContext = exports.ArrayExpressionContext = exports.DotExpressionContext = exports.PrimaryExpressionContext = exports.ExpressionContext = exports.ExpressionListContext = exports.ParExpressionContext = exports.ForUpdateContext = exports.EnhancedForControlContext = exports.ForInitContext = exports.ForControlContext = exports.FinallyBlockContext = exports.CatchClauseContext = exports.SetterContext = exports.GetterContext = exports.PropertyBlockContext = exports.ExpressionStatementContext = exports.RunAsStatementContext = exports.MergeStatementContext = exports.UpsertStatementContext = exports.UndeleteStatementContext = exports.DeleteStatementContext = exports.UpdateStatementContext = exports.InsertStatementContext = exports.AccessLevelContext = exports.ContinueStatementContext = exports.BreakStatementContext = exports.ThrowStatementContext = exports.ReturnStatementContext = exports.TryStatementContext = exports.DoWhileStatementContext = exports.WhileStatementContext = void 0;
exports.SignedNumberContext = exports.ValueListContext = exports.ValueContext = exports.ComparisonOperatorContext = exports.FieldExpressionContext = exports.ConditionalExpressionContext = exports.LogicalExpressionContext = exports.WhereClauseContext = exports.UsingScopeContext = exports.FieldNameListContext = exports.ElseClauseContext = exports.WhenClauseContext = exports.TypeOfContext = exports.CoordinateValueContext = exports.LocationValueContext = exports.DateFieldNameContext = exports.SoqlFunctionContext = exports.SoqlFieldsParameterContext = exports.SubFieldEntryContext = exports.SubFieldListContext = exports.FromNameListContext = exports.FieldNameContext = exports.SelectEntryContext = exports.SelectListContext = exports.SubQueryContext = exports.QueryContext = exports.SoqlLiteralContext = exports.ArgumentsContext = exports.SetCreatorRestContext = exports.MapCreatorRestPairContext = exports.MapCreatorRestContext = exports.ArrayCreatorRestContext = exports.ClassCreatorRestContext = exports.NoRestContext = exports.IdCreatedNamePairContext = exports.CreatedNameContext = exports.CreatorContext = exports.DotMethodCallContext = exports.MethodCallContext = exports.SoslPrimaryContext = exports.SoqlPrimaryContext = exports.IdPrimaryContext = exports.VoidPrimaryContext = exports.TypeRefPrimaryContext = exports.LiteralPrimaryContext = exports.SuperPrimaryContext = exports.ThisPrimaryContext = exports.PrimaryContext = exports.AssignExpressionContext = exports.CondExpressionContext = void 0;
exports.AnyIdContext = exports.IdContext = exports.SoslIdContext = exports.NetworkListContext = exports.UpdateTypeContext = exports.UpdateListContext = exports.FieldListContext = exports.FieldSpecContext = exports.FieldSpecListContext = exports.SearchGroupContext = exports.SoslWithClauseContext = exports.SoslClausesContext = exports.SoslLiteralAltContext = exports.SoslLiteralContext = exports.SoqlIdContext = exports.SignedIntegerContext = exports.DateFormulaContext = exports.BoundExpressionContext = exports.ForClausesContext = exports.AllRowsClauseContext = exports.OffsetClauseContext = exports.LimitClauseContext = exports.FieldOrderContext = exports.FieldOrderListContext = exports.OrderByClauseContext = exports.GroupByClauseContext = exports.FilteringSelectorContext = exports.DataCategoryNameContext = exports.DataCategorySelectionContext = exports.FilteringExpressionContext = exports.WithClauseContext = void 0;
const ATN_1 = require("antlr4ts/atn/ATN");
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const FailedPredicateException_1 = require("antlr4ts/FailedPredicateException");
const NoViableAltException_1 = require("antlr4ts/NoViableAltException");
const Parser_1 = require("antlr4ts/Parser");
const ParserRuleContext_1 = require("antlr4ts/ParserRuleContext");
const ParserATNSimulator_1 = require("antlr4ts/atn/ParserATNSimulator");
const RecognitionException_1 = require("antlr4ts/RecognitionException");
const Token_1 = require("antlr4ts/Token");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = require("antlr4ts/misc/Utils");
class ApexParser extends Parser_1.Parser {
    constructor(input) {
        super(input);
        this._interp = new ParserATNSimulator_1.ParserATNSimulator(ApexParser._ATN, this);
    }
    // @Override
    // @NotNull
    get vocabulary() {
        return ApexParser.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    // @Override
    get grammarFileName() { return "ApexParser.g4"; }
    // @Override
    get ruleNames() { return ApexParser.ruleNames; }
    // @Override
    get serializedATN() { return ApexParser._serializedATN; }
    createFailedPredicateException(predicate, message) {
        return new FailedPredicateException_1.FailedPredicateException(this, predicate, message);
    }
    // @RuleVersion(0)
    triggerUnit() {
        let _localctx = new TriggerUnitContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, ApexParser.RULE_triggerUnit);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 296;
                this.match(ApexParser.TRIGGER);
                this.state = 297;
                this.id();
                this.state = 298;
                this.match(ApexParser.ON);
                this.state = 299;
                this.id();
                this.state = 300;
                this.match(ApexParser.LPAREN);
                this.state = 301;
                this.triggerCase();
                this.state = 306;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.COMMA) {
                    {
                        {
                            this.state = 302;
                            this.match(ApexParser.COMMA);
                            this.state = 303;
                            this.triggerCase();
                        }
                    }
                    this.state = 308;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 309;
                this.match(ApexParser.RPAREN);
                this.state = 310;
                this.triggerBlock();
                this.state = 311;
                this.match(ApexParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    triggerCase() {
        let _localctx = new TriggerCaseContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, ApexParser.RULE_triggerCase);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 313;
                _la = this._input.LA(1);
                if (!(_la === ApexParser.AFTER || _la === ApexParser.BEFORE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 314;
                _la = this._input.LA(1);
                if (!(_la === ApexParser.DELETE || _la === ApexParser.INSERT || _la === ApexParser.UNDELETE || _la === ApexParser.UPDATE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    triggerBlock() {
        let _localctx = new TriggerBlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, ApexParser.RULE_triggerBlock);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 316;
                this.match(ApexParser.LBRACE);
                this.state = 320;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.BREAK) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ENUM) | (1 << ApexParser.FINAL) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.SYSTEMRUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SUPER - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THIS - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRIGGER - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)) | (1 << (ApexParser.LIST - 32)) | (1 << (ApexParser.MAP - 32)) | (1 << (ApexParser.SYSTEM - 32)) | (1 << (ApexParser.USER - 32)) | (1 << (ApexParser.SELECT - 32)) | (1 << (ApexParser.COUNT - 32)) | (1 << (ApexParser.FROM - 32)) | (1 << (ApexParser.AS - 32)) | (1 << (ApexParser.USING - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (ApexParser.SCOPE - 64)) | (1 << (ApexParser.WHERE - 64)) | (1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (ApexParser.OFFSET - 96)) | (1 << (ApexParser.DATA - 96)) | (1 << (ApexParser.CATEGORY - 96)) | (1 << (ApexParser.AT - 96)) | (1 << (ApexParser.ABOVE - 96)) | (1 << (ApexParser.BELOW - 96)) | (1 << (ApexParser.ABOVE_OR_BELOW - 96)) | (1 << (ApexParser.SECURITY_ENFORCED - 96)) | (1 << (ApexParser.SYSTEM_MODE - 96)) | (1 << (ApexParser.USER_MODE - 96)) | (1 << (ApexParser.REFERENCE - 96)) | (1 << (ApexParser.CUBE - 96)) | (1 << (ApexParser.FORMAT - 96)) | (1 << (ApexParser.TRACKING - 96)) | (1 << (ApexParser.VIEWSTAT - 96)) | (1 << (ApexParser.CUSTOM - 96)) | (1 << (ApexParser.STANDARD - 96)) | (1 << (ApexParser.DISTANCE - 96)) | (1 << (ApexParser.GEOLOCATION - 96)) | (1 << (ApexParser.GROUPING - 96)) | (1 << (ApexParser.CALENDAR_MONTH - 96)) | (1 << (ApexParser.CALENDAR_QUARTER - 96)) | (1 << (ApexParser.CALENDAR_YEAR - 96)) | (1 << (ApexParser.DAY_IN_MONTH - 96)) | (1 << (ApexParser.DAY_IN_WEEK - 96)) | (1 << (ApexParser.DAY_IN_YEAR - 96)) | (1 << (ApexParser.DAY_ONLY - 96)) | (1 << (ApexParser.FISCAL_MONTH - 96)) | (1 << (ApexParser.FISCAL_QUARTER - 96)) | (1 << (ApexParser.FISCAL_YEAR - 96)) | (1 << (ApexParser.HOUR_IN_DAY - 96)) | (1 << (ApexParser.WEEK_IN_MONTH - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (ApexParser.WEEK_IN_YEAR - 128)) | (1 << (ApexParser.CONVERT_TIMEZONE - 128)) | (1 << (ApexParser.YESTERDAY - 128)) | (1 << (ApexParser.TODAY - 128)) | (1 << (ApexParser.TOMORROW - 128)) | (1 << (ApexParser.LAST_WEEK - 128)) | (1 << (ApexParser.THIS_WEEK - 128)) | (1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.N_DAYS_AGO_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.N_WEEKS_AGO_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.N_MONTHS_AGO_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (ApexParser.LAST_N_YEARS_N - 160)) | (1 << (ApexParser.N_YEARS_AGO_N - 160)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 160)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 160)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 160)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 160)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 160)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 160)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 160)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 160)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 160)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 160)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 160)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 160)) | (1 << (ApexParser.IntegralCurrencyLiteral - 160)) | (1 << (ApexParser.FIND - 160)) | (1 << (ApexParser.EMAIL - 160)) | (1 << (ApexParser.NAME - 160)) | (1 << (ApexParser.PHONE - 160)) | (1 << (ApexParser.SIDEBAR - 160)) | (1 << (ApexParser.FIELDS - 160)) | (1 << (ApexParser.METADATA - 160)) | (1 << (ApexParser.PRICEBOOKID - 160)) | (1 << (ApexParser.NETWORK - 160)) | (1 << (ApexParser.SNIPPET - 160)) | (1 << (ApexParser.TARGET_LENGTH - 160)) | (1 << (ApexParser.DIVISION - 160)) | (1 << (ApexParser.RETURNING - 160)) | (1 << (ApexParser.LISTVIEW - 160)) | (1 << (ApexParser.FindLiteral - 160)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (ApexParser.IntegerLiteral - 193)) | (1 << (ApexParser.LongLiteral - 193)) | (1 << (ApexParser.NumberLiteral - 193)) | (1 << (ApexParser.BooleanLiteral - 193)) | (1 << (ApexParser.StringLiteral - 193)) | (1 << (ApexParser.LPAREN - 193)) | (1 << (ApexParser.LBRACE - 193)) | (1 << (ApexParser.LBRACK - 193)) | (1 << (ApexParser.BANG - 193)) | (1 << (ApexParser.TILDE - 193)) | (1 << (ApexParser.INC - 193)))) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & ((1 << (ApexParser.DEC - 225)) | (1 << (ApexParser.ADD - 225)) | (1 << (ApexParser.SUB - 225)) | (1 << (ApexParser.ATSIGN - 225)) | (1 << (ApexParser.Identifier - 225)))) !== 0)) {
                    {
                        {
                            this.state = 317;
                            this.triggerBlockMember();
                        }
                    }
                    this.state = 322;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 323;
                this.match(ApexParser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    triggerBlockMember() {
        let _localctx = new TriggerBlockMemberContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, ApexParser.RULE_triggerBlockMember);
        try {
            let _alt;
            this.state = 333;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 3, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 328;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 2, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 325;
                                        this.modifier();
                                    }
                                }
                            }
                            this.state = 330;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 2, this._ctx);
                        }
                        this.state = 331;
                        this.triggerMemberDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 332;
                        this.statement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    compilationUnit() {
        let _localctx = new CompilationUnitContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, ApexParser.RULE_compilationUnit);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 335;
                this.typeDeclaration();
                this.state = 336;
                this.match(ApexParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeDeclaration() {
        let _localctx = new TypeDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, ApexParser.RULE_typeDeclaration);
        let _la;
        try {
            this.state = 359;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 7, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 341;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (ApexParser.STATIC - 36)) | (1 << (ApexParser.TESTMETHOD - 36)) | (1 << (ApexParser.TRANSIENT - 36)) | (1 << (ApexParser.VIRTUAL - 36)) | (1 << (ApexParser.WEBSERVICE - 36)) | (1 << (ApexParser.WITH - 36)) | (1 << (ApexParser.WITHOUT - 36)))) !== 0) || _la === ApexParser.ATSIGN) {
                            {
                                {
                                    this.state = 338;
                                    this.modifier();
                                }
                            }
                            this.state = 343;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 344;
                        this.classDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 348;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (ApexParser.STATIC - 36)) | (1 << (ApexParser.TESTMETHOD - 36)) | (1 << (ApexParser.TRANSIENT - 36)) | (1 << (ApexParser.VIRTUAL - 36)) | (1 << (ApexParser.WEBSERVICE - 36)) | (1 << (ApexParser.WITH - 36)) | (1 << (ApexParser.WITHOUT - 36)))) !== 0) || _la === ApexParser.ATSIGN) {
                            {
                                {
                                    this.state = 345;
                                    this.modifier();
                                }
                            }
                            this.state = 350;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 351;
                        this.enumDeclaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 355;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (ApexParser.STATIC - 36)) | (1 << (ApexParser.TESTMETHOD - 36)) | (1 << (ApexParser.TRANSIENT - 36)) | (1 << (ApexParser.VIRTUAL - 36)) | (1 << (ApexParser.WEBSERVICE - 36)) | (1 << (ApexParser.WITH - 36)) | (1 << (ApexParser.WITHOUT - 36)))) !== 0) || _la === ApexParser.ATSIGN) {
                            {
                                {
                                    this.state = 352;
                                    this.modifier();
                                }
                            }
                            this.state = 357;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 358;
                        this.interfaceDeclaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    classDeclaration() {
        let _localctx = new ClassDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, ApexParser.RULE_classDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 361;
                this.match(ApexParser.CLASS);
                this.state = 362;
                this.id();
                this.state = 365;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.EXTENDS) {
                    {
                        this.state = 363;
                        this.match(ApexParser.EXTENDS);
                        this.state = 364;
                        this.typeRef();
                    }
                }
                this.state = 369;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.IMPLEMENTS) {
                    {
                        this.state = 367;
                        this.match(ApexParser.IMPLEMENTS);
                        this.state = 368;
                        this.typeList();
                    }
                }
                this.state = 371;
                this.classBody();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    enumDeclaration() {
        let _localctx = new EnumDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, ApexParser.RULE_enumDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 373;
                this.match(ApexParser.ENUM);
                this.state = 374;
                this.id();
                this.state = 375;
                this.match(ApexParser.LBRACE);
                this.state = 377;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)))) !== 0) || _la === ApexParser.Identifier) {
                    {
                        this.state = 376;
                        this.enumConstants();
                    }
                }
                this.state = 379;
                this.match(ApexParser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    enumConstants() {
        let _localctx = new EnumConstantsContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, ApexParser.RULE_enumConstants);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 381;
                this.id();
                this.state = 386;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.COMMA) {
                    {
                        {
                            this.state = 382;
                            this.match(ApexParser.COMMA);
                            this.state = 383;
                            this.id();
                        }
                    }
                    this.state = 388;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    interfaceDeclaration() {
        let _localctx = new InterfaceDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, ApexParser.RULE_interfaceDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 389;
                this.match(ApexParser.INTERFACE);
                this.state = 390;
                this.id();
                this.state = 393;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.EXTENDS) {
                    {
                        this.state = 391;
                        this.match(ApexParser.EXTENDS);
                        this.state = 392;
                        this.typeList();
                    }
                }
                this.state = 395;
                this.interfaceBody();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeList() {
        let _localctx = new TypeListContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, ApexParser.RULE_typeList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 397;
                this.typeRef();
                this.state = 402;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.COMMA) {
                    {
                        {
                            this.state = 398;
                            this.match(ApexParser.COMMA);
                            this.state = 399;
                            this.typeRef();
                        }
                    }
                    this.state = 404;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    classBody() {
        let _localctx = new ClassBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, ApexParser.RULE_classBody);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 405;
                this.match(ApexParser.LBRACE);
                this.state = 409;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.CLASS) | (1 << ApexParser.ENUM) | (1 << ApexParser.FINAL) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.STATIC - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.TESTMETHOD - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.VIRTUAL - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.WEBSERVICE - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.LIST - 34)) | (1 << (ApexParser.MAP - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)))) !== 0) || _la === ApexParser.LBRACE || _la === ApexParser.SEMI || _la === ApexParser.ATSIGN || _la === ApexParser.Identifier) {
                    {
                        {
                            this.state = 406;
                            this.classBodyDeclaration();
                        }
                    }
                    this.state = 411;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 412;
                this.match(ApexParser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    interfaceBody() {
        let _localctx = new InterfaceBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, ApexParser.RULE_interfaceBody);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 414;
                this.match(ApexParser.LBRACE);
                this.state = 418;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.FINAL) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.STATIC - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.TESTMETHOD - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.VIRTUAL - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.WEBSERVICE - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.LIST - 34)) | (1 << (ApexParser.MAP - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)))) !== 0) || _la === ApexParser.ATSIGN || _la === ApexParser.Identifier) {
                    {
                        {
                            this.state = 415;
                            this.interfaceMethodDeclaration();
                        }
                    }
                    this.state = 420;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 421;
                this.match(ApexParser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    classBodyDeclaration() {
        let _localctx = new ClassBodyDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, ApexParser.RULE_classBodyDeclaration);
        let _la;
        try {
            let _alt;
            this.state = 435;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 18, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 423;
                        this.match(ApexParser.SEMI);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 425;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === ApexParser.STATIC) {
                            {
                                this.state = 424;
                                this.match(ApexParser.STATIC);
                            }
                        }
                        this.state = 427;
                        this.block();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 431;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 17, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 428;
                                        this.modifier();
                                    }
                                }
                            }
                            this.state = 433;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 17, this._ctx);
                        }
                        this.state = 434;
                        this.memberDeclaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    modifier() {
        let _localctx = new ModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, ApexParser.RULE_modifier);
        try {
            this.state = 456;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexParser.ATSIGN:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 437;
                        this.annotation();
                    }
                    break;
                case ApexParser.GLOBAL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 438;
                        this.match(ApexParser.GLOBAL);
                    }
                    break;
                case ApexParser.PUBLIC:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 439;
                        this.match(ApexParser.PUBLIC);
                    }
                    break;
                case ApexParser.PROTECTED:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 440;
                        this.match(ApexParser.PROTECTED);
                    }
                    break;
                case ApexParser.PRIVATE:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 441;
                        this.match(ApexParser.PRIVATE);
                    }
                    break;
                case ApexParser.TRANSIENT:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 442;
                        this.match(ApexParser.TRANSIENT);
                    }
                    break;
                case ApexParser.STATIC:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 443;
                        this.match(ApexParser.STATIC);
                    }
                    break;
                case ApexParser.ABSTRACT:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 444;
                        this.match(ApexParser.ABSTRACT);
                    }
                    break;
                case ApexParser.FINAL:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 445;
                        this.match(ApexParser.FINAL);
                    }
                    break;
                case ApexParser.WEBSERVICE:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 446;
                        this.match(ApexParser.WEBSERVICE);
                    }
                    break;
                case ApexParser.OVERRIDE:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 447;
                        this.match(ApexParser.OVERRIDE);
                    }
                    break;
                case ApexParser.VIRTUAL:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 448;
                        this.match(ApexParser.VIRTUAL);
                    }
                    break;
                case ApexParser.TESTMETHOD:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 449;
                        this.match(ApexParser.TESTMETHOD);
                    }
                    break;
                case ApexParser.WITH:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 450;
                        this.match(ApexParser.WITH);
                        this.state = 451;
                        this.match(ApexParser.SHARING);
                    }
                    break;
                case ApexParser.WITHOUT:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 452;
                        this.match(ApexParser.WITHOUT);
                        this.state = 453;
                        this.match(ApexParser.SHARING);
                    }
                    break;
                case ApexParser.INHERITED:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 454;
                        this.match(ApexParser.INHERITED);
                        this.state = 455;
                        this.match(ApexParser.SHARING);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    memberDeclaration() {
        let _localctx = new MemberDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, ApexParser.RULE_memberDeclaration);
        try {
            this.state = 465;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 20, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 458;
                        this.methodDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 459;
                        this.fieldDeclaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 460;
                        this.constructorDeclaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 461;
                        this.interfaceDeclaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 462;
                        this.classDeclaration();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 463;
                        this.enumDeclaration();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 464;
                        this.propertyDeclaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    triggerMemberDeclaration() {
        let _localctx = new TriggerMemberDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, ApexParser.RULE_triggerMemberDeclaration);
        try {
            this.state = 473;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 21, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 467;
                        this.methodDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 468;
                        this.fieldDeclaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 469;
                        this.interfaceDeclaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 470;
                        this.classDeclaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 471;
                        this.enumDeclaration();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 472;
                        this.propertyDeclaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    methodDeclaration() {
        let _localctx = new MethodDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, ApexParser.RULE_methodDeclaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 477;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case ApexParser.AFTER:
                    case ApexParser.BEFORE:
                    case ApexParser.GET:
                    case ApexParser.INHERITED:
                    case ApexParser.INSTANCEOF:
                    case ApexParser.SET:
                    case ApexParser.SHARING:
                    case ApexParser.SWITCH:
                    case ApexParser.TRANSIENT:
                    case ApexParser.TRIGGER:
                    case ApexParser.WHEN:
                    case ApexParser.WITH:
                    case ApexParser.WITHOUT:
                    case ApexParser.LIST:
                    case ApexParser.MAP:
                    case ApexParser.SYSTEM:
                    case ApexParser.USER:
                    case ApexParser.SELECT:
                    case ApexParser.COUNT:
                    case ApexParser.FROM:
                    case ApexParser.AS:
                    case ApexParser.USING:
                    case ApexParser.SCOPE:
                    case ApexParser.WHERE:
                    case ApexParser.ORDER:
                    case ApexParser.BY:
                    case ApexParser.LIMIT:
                    case ApexParser.SOQLAND:
                    case ApexParser.SOQLOR:
                    case ApexParser.NOT:
                    case ApexParser.AVG:
                    case ApexParser.COUNT_DISTINCT:
                    case ApexParser.MIN:
                    case ApexParser.MAX:
                    case ApexParser.SUM:
                    case ApexParser.TYPEOF:
                    case ApexParser.END:
                    case ApexParser.THEN:
                    case ApexParser.LIKE:
                    case ApexParser.IN:
                    case ApexParser.INCLUDES:
                    case ApexParser.EXCLUDES:
                    case ApexParser.ASC:
                    case ApexParser.DESC:
                    case ApexParser.NULLS:
                    case ApexParser.FIRST:
                    case ApexParser.LAST:
                    case ApexParser.GROUP:
                    case ApexParser.ALL:
                    case ApexParser.ROWS:
                    case ApexParser.VIEW:
                    case ApexParser.HAVING:
                    case ApexParser.ROLLUP:
                    case ApexParser.TOLABEL:
                    case ApexParser.OFFSET:
                    case ApexParser.DATA:
                    case ApexParser.CATEGORY:
                    case ApexParser.AT:
                    case ApexParser.ABOVE:
                    case ApexParser.BELOW:
                    case ApexParser.ABOVE_OR_BELOW:
                    case ApexParser.SECURITY_ENFORCED:
                    case ApexParser.SYSTEM_MODE:
                    case ApexParser.USER_MODE:
                    case ApexParser.REFERENCE:
                    case ApexParser.CUBE:
                    case ApexParser.FORMAT:
                    case ApexParser.TRACKING:
                    case ApexParser.VIEWSTAT:
                    case ApexParser.CUSTOM:
                    case ApexParser.STANDARD:
                    case ApexParser.DISTANCE:
                    case ApexParser.GEOLOCATION:
                    case ApexParser.GROUPING:
                    case ApexParser.CALENDAR_MONTH:
                    case ApexParser.CALENDAR_QUARTER:
                    case ApexParser.CALENDAR_YEAR:
                    case ApexParser.DAY_IN_MONTH:
                    case ApexParser.DAY_IN_WEEK:
                    case ApexParser.DAY_IN_YEAR:
                    case ApexParser.DAY_ONLY:
                    case ApexParser.FISCAL_MONTH:
                    case ApexParser.FISCAL_QUARTER:
                    case ApexParser.FISCAL_YEAR:
                    case ApexParser.HOUR_IN_DAY:
                    case ApexParser.WEEK_IN_MONTH:
                    case ApexParser.WEEK_IN_YEAR:
                    case ApexParser.CONVERT_TIMEZONE:
                    case ApexParser.YESTERDAY:
                    case ApexParser.TODAY:
                    case ApexParser.TOMORROW:
                    case ApexParser.LAST_WEEK:
                    case ApexParser.THIS_WEEK:
                    case ApexParser.NEXT_WEEK:
                    case ApexParser.LAST_MONTH:
                    case ApexParser.THIS_MONTH:
                    case ApexParser.NEXT_MONTH:
                    case ApexParser.LAST_90_DAYS:
                    case ApexParser.NEXT_90_DAYS:
                    case ApexParser.LAST_N_DAYS_N:
                    case ApexParser.NEXT_N_DAYS_N:
                    case ApexParser.N_DAYS_AGO_N:
                    case ApexParser.NEXT_N_WEEKS_N:
                    case ApexParser.LAST_N_WEEKS_N:
                    case ApexParser.N_WEEKS_AGO_N:
                    case ApexParser.NEXT_N_MONTHS_N:
                    case ApexParser.LAST_N_MONTHS_N:
                    case ApexParser.N_MONTHS_AGO_N:
                    case ApexParser.THIS_QUARTER:
                    case ApexParser.LAST_QUARTER:
                    case ApexParser.NEXT_QUARTER:
                    case ApexParser.NEXT_N_QUARTERS_N:
                    case ApexParser.LAST_N_QUARTERS_N:
                    case ApexParser.N_QUARTERS_AGO_N:
                    case ApexParser.THIS_YEAR:
                    case ApexParser.LAST_YEAR:
                    case ApexParser.NEXT_YEAR:
                    case ApexParser.NEXT_N_YEARS_N:
                    case ApexParser.LAST_N_YEARS_N:
                    case ApexParser.N_YEARS_AGO_N:
                    case ApexParser.THIS_FISCAL_QUARTER:
                    case ApexParser.LAST_FISCAL_QUARTER:
                    case ApexParser.NEXT_FISCAL_QUARTER:
                    case ApexParser.NEXT_N_FISCAL_QUARTERS_N:
                    case ApexParser.LAST_N_FISCAL_QUARTERS_N:
                    case ApexParser.N_FISCAL_QUARTERS_AGO_N:
                    case ApexParser.THIS_FISCAL_YEAR:
                    case ApexParser.LAST_FISCAL_YEAR:
                    case ApexParser.NEXT_FISCAL_YEAR:
                    case ApexParser.NEXT_N_FISCAL_YEARS_N:
                    case ApexParser.LAST_N_FISCAL_YEARS_N:
                    case ApexParser.N_FISCAL_YEARS_AGO_N:
                    case ApexParser.IntegralCurrencyLiteral:
                    case ApexParser.FIND:
                    case ApexParser.EMAIL:
                    case ApexParser.NAME:
                    case ApexParser.PHONE:
                    case ApexParser.SIDEBAR:
                    case ApexParser.FIELDS:
                    case ApexParser.METADATA:
                    case ApexParser.PRICEBOOKID:
                    case ApexParser.NETWORK:
                    case ApexParser.SNIPPET:
                    case ApexParser.TARGET_LENGTH:
                    case ApexParser.DIVISION:
                    case ApexParser.RETURNING:
                    case ApexParser.LISTVIEW:
                    case ApexParser.Identifier:
                        {
                            this.state = 475;
                            this.typeRef();
                        }
                        break;
                    case ApexParser.VOID:
                        {
                            this.state = 476;
                            this.match(ApexParser.VOID);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 479;
                this.id();
                this.state = 480;
                this.formalParameters();
                this.state = 483;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case ApexParser.LBRACE:
                        {
                            this.state = 481;
                            this.block();
                        }
                        break;
                    case ApexParser.SEMI:
                        {
                            this.state = 482;
                            this.match(ApexParser.SEMI);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    constructorDeclaration() {
        let _localctx = new ConstructorDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, ApexParser.RULE_constructorDeclaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 485;
                this.qualifiedName();
                this.state = 486;
                this.formalParameters();
                this.state = 487;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fieldDeclaration() {
        let _localctx = new FieldDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, ApexParser.RULE_fieldDeclaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 489;
                this.typeRef();
                this.state = 490;
                this.variableDeclarators();
                this.state = 491;
                this.match(ApexParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    propertyDeclaration() {
        let _localctx = new PropertyDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, ApexParser.RULE_propertyDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 493;
                this.typeRef();
                this.state = 494;
                this.id();
                this.state = 495;
                this.match(ApexParser.LBRACE);
                this.state = 499;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.STATIC - 34)) | (1 << (ApexParser.TESTMETHOD - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.VIRTUAL - 34)) | (1 << (ApexParser.WEBSERVICE - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)))) !== 0) || _la === ApexParser.ATSIGN) {
                    {
                        {
                            this.state = 496;
                            this.propertyBlock();
                        }
                    }
                    this.state = 501;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 502;
                this.match(ApexParser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    interfaceMethodDeclaration() {
        let _localctx = new InterfaceMethodDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, ApexParser.RULE_interfaceMethodDeclaration);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 507;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 25, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 504;
                                this.modifier();
                            }
                        }
                    }
                    this.state = 509;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 25, this._ctx);
                }
                this.state = 512;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case ApexParser.AFTER:
                    case ApexParser.BEFORE:
                    case ApexParser.GET:
                    case ApexParser.INHERITED:
                    case ApexParser.INSTANCEOF:
                    case ApexParser.SET:
                    case ApexParser.SHARING:
                    case ApexParser.SWITCH:
                    case ApexParser.TRANSIENT:
                    case ApexParser.TRIGGER:
                    case ApexParser.WHEN:
                    case ApexParser.WITH:
                    case ApexParser.WITHOUT:
                    case ApexParser.LIST:
                    case ApexParser.MAP:
                    case ApexParser.SYSTEM:
                    case ApexParser.USER:
                    case ApexParser.SELECT:
                    case ApexParser.COUNT:
                    case ApexParser.FROM:
                    case ApexParser.AS:
                    case ApexParser.USING:
                    case ApexParser.SCOPE:
                    case ApexParser.WHERE:
                    case ApexParser.ORDER:
                    case ApexParser.BY:
                    case ApexParser.LIMIT:
                    case ApexParser.SOQLAND:
                    case ApexParser.SOQLOR:
                    case ApexParser.NOT:
                    case ApexParser.AVG:
                    case ApexParser.COUNT_DISTINCT:
                    case ApexParser.MIN:
                    case ApexParser.MAX:
                    case ApexParser.SUM:
                    case ApexParser.TYPEOF:
                    case ApexParser.END:
                    case ApexParser.THEN:
                    case ApexParser.LIKE:
                    case ApexParser.IN:
                    case ApexParser.INCLUDES:
                    case ApexParser.EXCLUDES:
                    case ApexParser.ASC:
                    case ApexParser.DESC:
                    case ApexParser.NULLS:
                    case ApexParser.FIRST:
                    case ApexParser.LAST:
                    case ApexParser.GROUP:
                    case ApexParser.ALL:
                    case ApexParser.ROWS:
                    case ApexParser.VIEW:
                    case ApexParser.HAVING:
                    case ApexParser.ROLLUP:
                    case ApexParser.TOLABEL:
                    case ApexParser.OFFSET:
                    case ApexParser.DATA:
                    case ApexParser.CATEGORY:
                    case ApexParser.AT:
                    case ApexParser.ABOVE:
                    case ApexParser.BELOW:
                    case ApexParser.ABOVE_OR_BELOW:
                    case ApexParser.SECURITY_ENFORCED:
                    case ApexParser.SYSTEM_MODE:
                    case ApexParser.USER_MODE:
                    case ApexParser.REFERENCE:
                    case ApexParser.CUBE:
                    case ApexParser.FORMAT:
                    case ApexParser.TRACKING:
                    case ApexParser.VIEWSTAT:
                    case ApexParser.CUSTOM:
                    case ApexParser.STANDARD:
                    case ApexParser.DISTANCE:
                    case ApexParser.GEOLOCATION:
                    case ApexParser.GROUPING:
                    case ApexParser.CALENDAR_MONTH:
                    case ApexParser.CALENDAR_QUARTER:
                    case ApexParser.CALENDAR_YEAR:
                    case ApexParser.DAY_IN_MONTH:
                    case ApexParser.DAY_IN_WEEK:
                    case ApexParser.DAY_IN_YEAR:
                    case ApexParser.DAY_ONLY:
                    case ApexParser.FISCAL_MONTH:
                    case ApexParser.FISCAL_QUARTER:
                    case ApexParser.FISCAL_YEAR:
                    case ApexParser.HOUR_IN_DAY:
                    case ApexParser.WEEK_IN_MONTH:
                    case ApexParser.WEEK_IN_YEAR:
                    case ApexParser.CONVERT_TIMEZONE:
                    case ApexParser.YESTERDAY:
                    case ApexParser.TODAY:
                    case ApexParser.TOMORROW:
                    case ApexParser.LAST_WEEK:
                    case ApexParser.THIS_WEEK:
                    case ApexParser.NEXT_WEEK:
                    case ApexParser.LAST_MONTH:
                    case ApexParser.THIS_MONTH:
                    case ApexParser.NEXT_MONTH:
                    case ApexParser.LAST_90_DAYS:
                    case ApexParser.NEXT_90_DAYS:
                    case ApexParser.LAST_N_DAYS_N:
                    case ApexParser.NEXT_N_DAYS_N:
                    case ApexParser.N_DAYS_AGO_N:
                    case ApexParser.NEXT_N_WEEKS_N:
                    case ApexParser.LAST_N_WEEKS_N:
                    case ApexParser.N_WEEKS_AGO_N:
                    case ApexParser.NEXT_N_MONTHS_N:
                    case ApexParser.LAST_N_MONTHS_N:
                    case ApexParser.N_MONTHS_AGO_N:
                    case ApexParser.THIS_QUARTER:
                    case ApexParser.LAST_QUARTER:
                    case ApexParser.NEXT_QUARTER:
                    case ApexParser.NEXT_N_QUARTERS_N:
                    case ApexParser.LAST_N_QUARTERS_N:
                    case ApexParser.N_QUARTERS_AGO_N:
                    case ApexParser.THIS_YEAR:
                    case ApexParser.LAST_YEAR:
                    case ApexParser.NEXT_YEAR:
                    case ApexParser.NEXT_N_YEARS_N:
                    case ApexParser.LAST_N_YEARS_N:
                    case ApexParser.N_YEARS_AGO_N:
                    case ApexParser.THIS_FISCAL_QUARTER:
                    case ApexParser.LAST_FISCAL_QUARTER:
                    case ApexParser.NEXT_FISCAL_QUARTER:
                    case ApexParser.NEXT_N_FISCAL_QUARTERS_N:
                    case ApexParser.LAST_N_FISCAL_QUARTERS_N:
                    case ApexParser.N_FISCAL_QUARTERS_AGO_N:
                    case ApexParser.THIS_FISCAL_YEAR:
                    case ApexParser.LAST_FISCAL_YEAR:
                    case ApexParser.NEXT_FISCAL_YEAR:
                    case ApexParser.NEXT_N_FISCAL_YEARS_N:
                    case ApexParser.LAST_N_FISCAL_YEARS_N:
                    case ApexParser.N_FISCAL_YEARS_AGO_N:
                    case ApexParser.IntegralCurrencyLiteral:
                    case ApexParser.FIND:
                    case ApexParser.EMAIL:
                    case ApexParser.NAME:
                    case ApexParser.PHONE:
                    case ApexParser.SIDEBAR:
                    case ApexParser.FIELDS:
                    case ApexParser.METADATA:
                    case ApexParser.PRICEBOOKID:
                    case ApexParser.NETWORK:
                    case ApexParser.SNIPPET:
                    case ApexParser.TARGET_LENGTH:
                    case ApexParser.DIVISION:
                    case ApexParser.RETURNING:
                    case ApexParser.LISTVIEW:
                    case ApexParser.Identifier:
                        {
                            this.state = 510;
                            this.typeRef();
                        }
                        break;
                    case ApexParser.VOID:
                        {
                            this.state = 511;
                            this.match(ApexParser.VOID);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 514;
                this.id();
                this.state = 515;
                this.formalParameters();
                this.state = 516;
                this.match(ApexParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    variableDeclarators() {
        let _localctx = new VariableDeclaratorsContext(this._ctx, this.state);
        this.enterRule(_localctx, 44, ApexParser.RULE_variableDeclarators);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 518;
                this.variableDeclarator();
                this.state = 523;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.COMMA) {
                    {
                        {
                            this.state = 519;
                            this.match(ApexParser.COMMA);
                            this.state = 520;
                            this.variableDeclarator();
                        }
                    }
                    this.state = 525;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    variableDeclarator() {
        let _localctx = new VariableDeclaratorContext(this._ctx, this.state);
        this.enterRule(_localctx, 46, ApexParser.RULE_variableDeclarator);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 526;
                this.id();
                this.state = 529;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.ASSIGN) {
                    {
                        this.state = 527;
                        this.match(ApexParser.ASSIGN);
                        this.state = 528;
                        this.expression(0);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    arrayInitializer() {
        let _localctx = new ArrayInitializerContext(this._ctx, this.state);
        this.enterRule(_localctx, 48, ApexParser.RULE_arrayInitializer);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 531;
                this.match(ApexParser.LBRACE);
                this.state = 543;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.SUPER - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.THIS - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.LIST - 34)) | (1 << (ApexParser.MAP - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)) | (1 << (ApexParser.FindLiteral - 162)) | (1 << (ApexParser.IntegerLiteral - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (ApexParser.LongLiteral - 194)) | (1 << (ApexParser.NumberLiteral - 194)) | (1 << (ApexParser.BooleanLiteral - 194)) | (1 << (ApexParser.StringLiteral - 194)) | (1 << (ApexParser.LPAREN - 194)) | (1 << (ApexParser.LBRACK - 194)) | (1 << (ApexParser.BANG - 194)) | (1 << (ApexParser.TILDE - 194)) | (1 << (ApexParser.INC - 194)) | (1 << (ApexParser.DEC - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (ApexParser.ADD - 226)) | (1 << (ApexParser.SUB - 226)) | (1 << (ApexParser.Identifier - 226)))) !== 0)) {
                    {
                        this.state = 532;
                        this.expression(0);
                        this.state = 537;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 29, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 533;
                                        this.match(ApexParser.COMMA);
                                        this.state = 534;
                                        this.expression(0);
                                    }
                                }
                            }
                            this.state = 539;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 29, this._ctx);
                        }
                        this.state = 541;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === ApexParser.COMMA) {
                            {
                                this.state = 540;
                                this.match(ApexParser.COMMA);
                            }
                        }
                    }
                }
                this.state = 545;
                this.match(ApexParser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeRef() {
        let _localctx = new TypeRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 50, ApexParser.RULE_typeRef);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 547;
                this.typeName();
                this.state = 552;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 32, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 548;
                                this.match(ApexParser.DOT);
                                this.state = 549;
                                this.typeName();
                            }
                        }
                    }
                    this.state = 554;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 32, this._ctx);
                }
                this.state = 555;
                this.arraySubscripts();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    arraySubscripts() {
        let _localctx = new ArraySubscriptsContext(this._ctx, this.state);
        this.enterRule(_localctx, 52, ApexParser.RULE_arraySubscripts);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 561;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 557;
                                this.match(ApexParser.LBRACK);
                                this.state = 558;
                                this.match(ApexParser.RBRACK);
                            }
                        }
                    }
                    this.state = 563;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeName() {
        let _localctx = new TypeNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 54, ApexParser.RULE_typeName);
        try {
            this.state = 580;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 38, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 564;
                        this.match(ApexParser.LIST);
                        this.state = 566;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 34, this._ctx)) {
                            case 1:
                                {
                                    this.state = 565;
                                    this.typeArguments();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 568;
                        this.match(ApexParser.SET);
                        this.state = 570;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 35, this._ctx)) {
                            case 1:
                                {
                                    this.state = 569;
                                    this.typeArguments();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 572;
                        this.match(ApexParser.MAP);
                        this.state = 574;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 36, this._ctx)) {
                            case 1:
                                {
                                    this.state = 573;
                                    this.typeArguments();
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 576;
                        this.id();
                        this.state = 578;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 37, this._ctx)) {
                            case 1:
                                {
                                    this.state = 577;
                                    this.typeArguments();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeArguments() {
        let _localctx = new TypeArgumentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 56, ApexParser.RULE_typeArguments);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 582;
                this.match(ApexParser.LT);
                this.state = 583;
                this.typeList();
                this.state = 584;
                this.match(ApexParser.GT);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    formalParameters() {
        let _localctx = new FormalParametersContext(this._ctx, this.state);
        this.enterRule(_localctx, 58, ApexParser.RULE_formalParameters);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 586;
                this.match(ApexParser.LPAREN);
                this.state = 588;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.FINAL) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.STATIC - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.TESTMETHOD - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.VIRTUAL - 34)) | (1 << (ApexParser.WEBSERVICE - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.LIST - 34)) | (1 << (ApexParser.MAP - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)))) !== 0) || _la === ApexParser.ATSIGN || _la === ApexParser.Identifier) {
                    {
                        this.state = 587;
                        this.formalParameterList();
                    }
                }
                this.state = 590;
                this.match(ApexParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    formalParameterList() {
        let _localctx = new FormalParameterListContext(this._ctx, this.state);
        this.enterRule(_localctx, 60, ApexParser.RULE_formalParameterList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 592;
                this.formalParameter();
                this.state = 597;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.COMMA) {
                    {
                        {
                            this.state = 593;
                            this.match(ApexParser.COMMA);
                            this.state = 594;
                            this.formalParameter();
                        }
                    }
                    this.state = 599;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    formalParameter() {
        let _localctx = new FormalParameterContext(this._ctx, this.state);
        this.enterRule(_localctx, 62, ApexParser.RULE_formalParameter);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 603;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 600;
                                this.modifier();
                            }
                        }
                    }
                    this.state = 605;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
                }
                this.state = 606;
                this.typeRef();
                this.state = 607;
                this.id();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    qualifiedName() {
        let _localctx = new QualifiedNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 64, ApexParser.RULE_qualifiedName);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 609;
                this.id();
                this.state = 614;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.DOT) {
                    {
                        {
                            this.state = 610;
                            this.match(ApexParser.DOT);
                            this.state = 611;
                            this.id();
                        }
                    }
                    this.state = 616;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    literal() {
        let _localctx = new LiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 66, ApexParser.RULE_literal);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 617;
                _la = this._input.LA(1);
                if (!(_la === ApexParser.NULL || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (ApexParser.IntegerLiteral - 193)) | (1 << (ApexParser.LongLiteral - 193)) | (1 << (ApexParser.NumberLiteral - 193)) | (1 << (ApexParser.BooleanLiteral - 193)) | (1 << (ApexParser.StringLiteral - 193)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    annotation() {
        let _localctx = new AnnotationContext(this._ctx, this.state);
        this.enterRule(_localctx, 68, ApexParser.RULE_annotation);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 619;
                this.match(ApexParser.ATSIGN);
                this.state = 620;
                this.qualifiedName();
                this.state = 627;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.LPAREN) {
                    {
                        this.state = 621;
                        this.match(ApexParser.LPAREN);
                        this.state = 624;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 43, this._ctx)) {
                            case 1:
                                {
                                    this.state = 622;
                                    this.elementValuePairs();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 623;
                                    this.elementValue();
                                }
                                break;
                        }
                        this.state = 626;
                        this.match(ApexParser.RPAREN);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    elementValuePairs() {
        let _localctx = new ElementValuePairsContext(this._ctx, this.state);
        this.enterRule(_localctx, 70, ApexParser.RULE_elementValuePairs);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 629;
                this.elementValuePair();
                this.state = 636;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)))) !== 0) || _la === ApexParser.COMMA || _la === ApexParser.Identifier) {
                    {
                        {
                            this.state = 631;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === ApexParser.COMMA) {
                                {
                                    this.state = 630;
                                    this.match(ApexParser.COMMA);
                                }
                            }
                            this.state = 633;
                            this.elementValuePair();
                        }
                    }
                    this.state = 638;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    elementValuePair() {
        let _localctx = new ElementValuePairContext(this._ctx, this.state);
        this.enterRule(_localctx, 72, ApexParser.RULE_elementValuePair);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 639;
                this.id();
                this.state = 640;
                this.match(ApexParser.ASSIGN);
                this.state = 641;
                this.elementValue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    elementValue() {
        let _localctx = new ElementValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 74, ApexParser.RULE_elementValue);
        try {
            this.state = 646;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexParser.AFTER:
                case ApexParser.BEFORE:
                case ApexParser.GET:
                case ApexParser.INHERITED:
                case ApexParser.INSTANCEOF:
                case ApexParser.NEW:
                case ApexParser.NULL:
                case ApexParser.SET:
                case ApexParser.SHARING:
                case ApexParser.SUPER:
                case ApexParser.SWITCH:
                case ApexParser.THIS:
                case ApexParser.TRANSIENT:
                case ApexParser.TRIGGER:
                case ApexParser.VOID:
                case ApexParser.WHEN:
                case ApexParser.WITH:
                case ApexParser.WITHOUT:
                case ApexParser.LIST:
                case ApexParser.MAP:
                case ApexParser.SYSTEM:
                case ApexParser.USER:
                case ApexParser.SELECT:
                case ApexParser.COUNT:
                case ApexParser.FROM:
                case ApexParser.AS:
                case ApexParser.USING:
                case ApexParser.SCOPE:
                case ApexParser.WHERE:
                case ApexParser.ORDER:
                case ApexParser.BY:
                case ApexParser.LIMIT:
                case ApexParser.SOQLAND:
                case ApexParser.SOQLOR:
                case ApexParser.NOT:
                case ApexParser.AVG:
                case ApexParser.COUNT_DISTINCT:
                case ApexParser.MIN:
                case ApexParser.MAX:
                case ApexParser.SUM:
                case ApexParser.TYPEOF:
                case ApexParser.END:
                case ApexParser.THEN:
                case ApexParser.LIKE:
                case ApexParser.IN:
                case ApexParser.INCLUDES:
                case ApexParser.EXCLUDES:
                case ApexParser.ASC:
                case ApexParser.DESC:
                case ApexParser.NULLS:
                case ApexParser.FIRST:
                case ApexParser.LAST:
                case ApexParser.GROUP:
                case ApexParser.ALL:
                case ApexParser.ROWS:
                case ApexParser.VIEW:
                case ApexParser.HAVING:
                case ApexParser.ROLLUP:
                case ApexParser.TOLABEL:
                case ApexParser.OFFSET:
                case ApexParser.DATA:
                case ApexParser.CATEGORY:
                case ApexParser.AT:
                case ApexParser.ABOVE:
                case ApexParser.BELOW:
                case ApexParser.ABOVE_OR_BELOW:
                case ApexParser.SECURITY_ENFORCED:
                case ApexParser.SYSTEM_MODE:
                case ApexParser.USER_MODE:
                case ApexParser.REFERENCE:
                case ApexParser.CUBE:
                case ApexParser.FORMAT:
                case ApexParser.TRACKING:
                case ApexParser.VIEWSTAT:
                case ApexParser.CUSTOM:
                case ApexParser.STANDARD:
                case ApexParser.DISTANCE:
                case ApexParser.GEOLOCATION:
                case ApexParser.GROUPING:
                case ApexParser.CALENDAR_MONTH:
                case ApexParser.CALENDAR_QUARTER:
                case ApexParser.CALENDAR_YEAR:
                case ApexParser.DAY_IN_MONTH:
                case ApexParser.DAY_IN_WEEK:
                case ApexParser.DAY_IN_YEAR:
                case ApexParser.DAY_ONLY:
                case ApexParser.FISCAL_MONTH:
                case ApexParser.FISCAL_QUARTER:
                case ApexParser.FISCAL_YEAR:
                case ApexParser.HOUR_IN_DAY:
                case ApexParser.WEEK_IN_MONTH:
                case ApexParser.WEEK_IN_YEAR:
                case ApexParser.CONVERT_TIMEZONE:
                case ApexParser.YESTERDAY:
                case ApexParser.TODAY:
                case ApexParser.TOMORROW:
                case ApexParser.LAST_WEEK:
                case ApexParser.THIS_WEEK:
                case ApexParser.NEXT_WEEK:
                case ApexParser.LAST_MONTH:
                case ApexParser.THIS_MONTH:
                case ApexParser.NEXT_MONTH:
                case ApexParser.LAST_90_DAYS:
                case ApexParser.NEXT_90_DAYS:
                case ApexParser.LAST_N_DAYS_N:
                case ApexParser.NEXT_N_DAYS_N:
                case ApexParser.N_DAYS_AGO_N:
                case ApexParser.NEXT_N_WEEKS_N:
                case ApexParser.LAST_N_WEEKS_N:
                case ApexParser.N_WEEKS_AGO_N:
                case ApexParser.NEXT_N_MONTHS_N:
                case ApexParser.LAST_N_MONTHS_N:
                case ApexParser.N_MONTHS_AGO_N:
                case ApexParser.THIS_QUARTER:
                case ApexParser.LAST_QUARTER:
                case ApexParser.NEXT_QUARTER:
                case ApexParser.NEXT_N_QUARTERS_N:
                case ApexParser.LAST_N_QUARTERS_N:
                case ApexParser.N_QUARTERS_AGO_N:
                case ApexParser.THIS_YEAR:
                case ApexParser.LAST_YEAR:
                case ApexParser.NEXT_YEAR:
                case ApexParser.NEXT_N_YEARS_N:
                case ApexParser.LAST_N_YEARS_N:
                case ApexParser.N_YEARS_AGO_N:
                case ApexParser.THIS_FISCAL_QUARTER:
                case ApexParser.LAST_FISCAL_QUARTER:
                case ApexParser.NEXT_FISCAL_QUARTER:
                case ApexParser.NEXT_N_FISCAL_QUARTERS_N:
                case ApexParser.LAST_N_FISCAL_QUARTERS_N:
                case ApexParser.N_FISCAL_QUARTERS_AGO_N:
                case ApexParser.THIS_FISCAL_YEAR:
                case ApexParser.LAST_FISCAL_YEAR:
                case ApexParser.NEXT_FISCAL_YEAR:
                case ApexParser.NEXT_N_FISCAL_YEARS_N:
                case ApexParser.LAST_N_FISCAL_YEARS_N:
                case ApexParser.N_FISCAL_YEARS_AGO_N:
                case ApexParser.IntegralCurrencyLiteral:
                case ApexParser.FIND:
                case ApexParser.EMAIL:
                case ApexParser.NAME:
                case ApexParser.PHONE:
                case ApexParser.SIDEBAR:
                case ApexParser.FIELDS:
                case ApexParser.METADATA:
                case ApexParser.PRICEBOOKID:
                case ApexParser.NETWORK:
                case ApexParser.SNIPPET:
                case ApexParser.TARGET_LENGTH:
                case ApexParser.DIVISION:
                case ApexParser.RETURNING:
                case ApexParser.LISTVIEW:
                case ApexParser.FindLiteral:
                case ApexParser.IntegerLiteral:
                case ApexParser.LongLiteral:
                case ApexParser.NumberLiteral:
                case ApexParser.BooleanLiteral:
                case ApexParser.StringLiteral:
                case ApexParser.LPAREN:
                case ApexParser.LBRACK:
                case ApexParser.BANG:
                case ApexParser.TILDE:
                case ApexParser.INC:
                case ApexParser.DEC:
                case ApexParser.ADD:
                case ApexParser.SUB:
                case ApexParser.Identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 643;
                        this.expression(0);
                    }
                    break;
                case ApexParser.ATSIGN:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 644;
                        this.annotation();
                    }
                    break;
                case ApexParser.LBRACE:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 645;
                        this.elementValueArrayInitializer();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    elementValueArrayInitializer() {
        let _localctx = new ElementValueArrayInitializerContext(this._ctx, this.state);
        this.enterRule(_localctx, 76, ApexParser.RULE_elementValueArrayInitializer);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 648;
                this.match(ApexParser.LBRACE);
                this.state = 657;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.SUPER - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.THIS - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.LIST - 34)) | (1 << (ApexParser.MAP - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)) | (1 << (ApexParser.FindLiteral - 162)) | (1 << (ApexParser.IntegerLiteral - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (ApexParser.LongLiteral - 194)) | (1 << (ApexParser.NumberLiteral - 194)) | (1 << (ApexParser.BooleanLiteral - 194)) | (1 << (ApexParser.StringLiteral - 194)) | (1 << (ApexParser.LPAREN - 194)) | (1 << (ApexParser.LBRACE - 194)) | (1 << (ApexParser.LBRACK - 194)) | (1 << (ApexParser.BANG - 194)) | (1 << (ApexParser.TILDE - 194)) | (1 << (ApexParser.INC - 194)) | (1 << (ApexParser.DEC - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (ApexParser.ADD - 226)) | (1 << (ApexParser.SUB - 226)) | (1 << (ApexParser.ATSIGN - 226)) | (1 << (ApexParser.Identifier - 226)))) !== 0)) {
                    {
                        this.state = 649;
                        this.elementValue();
                        this.state = 654;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 48, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 650;
                                        this.match(ApexParser.COMMA);
                                        this.state = 651;
                                        this.elementValue();
                                    }
                                }
                            }
                            this.state = 656;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 48, this._ctx);
                        }
                    }
                }
                this.state = 660;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.COMMA) {
                    {
                        this.state = 659;
                        this.match(ApexParser.COMMA);
                    }
                }
                this.state = 662;
                this.match(ApexParser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    block() {
        let _localctx = new BlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 78, ApexParser.RULE_block);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 664;
                this.match(ApexParser.LBRACE);
                this.state = 668;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.BREAK) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.FINAL) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.SYSTEMRUNAS - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SUPER - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THIS - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRIGGER - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.VOID - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)) | (1 << (ApexParser.LIST - 32)) | (1 << (ApexParser.MAP - 32)) | (1 << (ApexParser.SYSTEM - 32)) | (1 << (ApexParser.USER - 32)) | (1 << (ApexParser.SELECT - 32)) | (1 << (ApexParser.COUNT - 32)) | (1 << (ApexParser.FROM - 32)) | (1 << (ApexParser.AS - 32)) | (1 << (ApexParser.USING - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (ApexParser.SCOPE - 64)) | (1 << (ApexParser.WHERE - 64)) | (1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (ApexParser.OFFSET - 96)) | (1 << (ApexParser.DATA - 96)) | (1 << (ApexParser.CATEGORY - 96)) | (1 << (ApexParser.AT - 96)) | (1 << (ApexParser.ABOVE - 96)) | (1 << (ApexParser.BELOW - 96)) | (1 << (ApexParser.ABOVE_OR_BELOW - 96)) | (1 << (ApexParser.SECURITY_ENFORCED - 96)) | (1 << (ApexParser.SYSTEM_MODE - 96)) | (1 << (ApexParser.USER_MODE - 96)) | (1 << (ApexParser.REFERENCE - 96)) | (1 << (ApexParser.CUBE - 96)) | (1 << (ApexParser.FORMAT - 96)) | (1 << (ApexParser.TRACKING - 96)) | (1 << (ApexParser.VIEWSTAT - 96)) | (1 << (ApexParser.CUSTOM - 96)) | (1 << (ApexParser.STANDARD - 96)) | (1 << (ApexParser.DISTANCE - 96)) | (1 << (ApexParser.GEOLOCATION - 96)) | (1 << (ApexParser.GROUPING - 96)) | (1 << (ApexParser.CALENDAR_MONTH - 96)) | (1 << (ApexParser.CALENDAR_QUARTER - 96)) | (1 << (ApexParser.CALENDAR_YEAR - 96)) | (1 << (ApexParser.DAY_IN_MONTH - 96)) | (1 << (ApexParser.DAY_IN_WEEK - 96)) | (1 << (ApexParser.DAY_IN_YEAR - 96)) | (1 << (ApexParser.DAY_ONLY - 96)) | (1 << (ApexParser.FISCAL_MONTH - 96)) | (1 << (ApexParser.FISCAL_QUARTER - 96)) | (1 << (ApexParser.FISCAL_YEAR - 96)) | (1 << (ApexParser.HOUR_IN_DAY - 96)) | (1 << (ApexParser.WEEK_IN_MONTH - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (ApexParser.WEEK_IN_YEAR - 128)) | (1 << (ApexParser.CONVERT_TIMEZONE - 128)) | (1 << (ApexParser.YESTERDAY - 128)) | (1 << (ApexParser.TODAY - 128)) | (1 << (ApexParser.TOMORROW - 128)) | (1 << (ApexParser.LAST_WEEK - 128)) | (1 << (ApexParser.THIS_WEEK - 128)) | (1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.N_DAYS_AGO_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.N_WEEKS_AGO_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.N_MONTHS_AGO_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (ApexParser.LAST_N_YEARS_N - 160)) | (1 << (ApexParser.N_YEARS_AGO_N - 160)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 160)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 160)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 160)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 160)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 160)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 160)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 160)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 160)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 160)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 160)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 160)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 160)) | (1 << (ApexParser.IntegralCurrencyLiteral - 160)) | (1 << (ApexParser.FIND - 160)) | (1 << (ApexParser.EMAIL - 160)) | (1 << (ApexParser.NAME - 160)) | (1 << (ApexParser.PHONE - 160)) | (1 << (ApexParser.SIDEBAR - 160)) | (1 << (ApexParser.FIELDS - 160)) | (1 << (ApexParser.METADATA - 160)) | (1 << (ApexParser.PRICEBOOKID - 160)) | (1 << (ApexParser.NETWORK - 160)) | (1 << (ApexParser.SNIPPET - 160)) | (1 << (ApexParser.TARGET_LENGTH - 160)) | (1 << (ApexParser.DIVISION - 160)) | (1 << (ApexParser.RETURNING - 160)) | (1 << (ApexParser.LISTVIEW - 160)) | (1 << (ApexParser.FindLiteral - 160)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (ApexParser.IntegerLiteral - 193)) | (1 << (ApexParser.LongLiteral - 193)) | (1 << (ApexParser.NumberLiteral - 193)) | (1 << (ApexParser.BooleanLiteral - 193)) | (1 << (ApexParser.StringLiteral - 193)) | (1 << (ApexParser.LPAREN - 193)) | (1 << (ApexParser.LBRACE - 193)) | (1 << (ApexParser.LBRACK - 193)) | (1 << (ApexParser.BANG - 193)) | (1 << (ApexParser.TILDE - 193)) | (1 << (ApexParser.INC - 193)))) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & ((1 << (ApexParser.DEC - 225)) | (1 << (ApexParser.ADD - 225)) | (1 << (ApexParser.SUB - 225)) | (1 << (ApexParser.ATSIGN - 225)) | (1 << (ApexParser.Identifier - 225)))) !== 0)) {
                    {
                        {
                            this.state = 665;
                            this.statement();
                        }
                    }
                    this.state = 670;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 671;
                this.match(ApexParser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    localVariableDeclarationStatement() {
        let _localctx = new LocalVariableDeclarationStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 80, ApexParser.RULE_localVariableDeclarationStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 673;
                this.localVariableDeclaration();
                this.state = 674;
                this.match(ApexParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    localVariableDeclaration() {
        let _localctx = new LocalVariableDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 82, ApexParser.RULE_localVariableDeclaration);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 679;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 52, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 676;
                                this.modifier();
                            }
                        }
                    }
                    this.state = 681;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 52, this._ctx);
                }
                this.state = 682;
                this.typeRef();
                this.state = 683;
                this.variableDeclarators();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    statement() {
        let _localctx = new StatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 84, ApexParser.RULE_statement);
        try {
            this.state = 705;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 53, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 685;
                        this.block();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 686;
                        this.ifStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 687;
                        this.switchStatement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 688;
                        this.forStatement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 689;
                        this.whileStatement();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 690;
                        this.doWhileStatement();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 691;
                        this.tryStatement();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 692;
                        this.returnStatement();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 693;
                        this.throwStatement();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 694;
                        this.breakStatement();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 695;
                        this.continueStatement();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 696;
                        this.insertStatement();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 697;
                        this.updateStatement();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 698;
                        this.deleteStatement();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 699;
                        this.undeleteStatement();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 700;
                        this.upsertStatement();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 701;
                        this.mergeStatement();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 702;
                        this.runAsStatement();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 703;
                        this.localVariableDeclarationStatement();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 704;
                        this.expressionStatement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ifStatement() {
        let _localctx = new IfStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 86, ApexParser.RULE_ifStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 707;
                this.match(ApexParser.IF);
                this.state = 708;
                this.parExpression();
                this.state = 709;
                this.statement();
                this.state = 712;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 54, this._ctx)) {
                    case 1:
                        {
                            this.state = 710;
                            this.match(ApexParser.ELSE);
                            this.state = 711;
                            this.statement();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    switchStatement() {
        let _localctx = new SwitchStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 88, ApexParser.RULE_switchStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 714;
                this.match(ApexParser.SWITCH);
                this.state = 715;
                this.match(ApexParser.ON);
                this.state = 716;
                this.expression(0);
                this.state = 717;
                this.match(ApexParser.LBRACE);
                this.state = 719;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 718;
                            this.whenControl();
                        }
                    }
                    this.state = 721;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === ApexParser.WHEN);
                this.state = 723;
                this.match(ApexParser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    whenControl() {
        let _localctx = new WhenControlContext(this._ctx, this.state);
        this.enterRule(_localctx, 90, ApexParser.RULE_whenControl);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 725;
                this.match(ApexParser.WHEN);
                this.state = 726;
                this.whenValue();
                this.state = 727;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    whenValue() {
        let _localctx = new WhenValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 92, ApexParser.RULE_whenValue);
        let _la;
        try {
            this.state = 741;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 57, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 729;
                        this.match(ApexParser.ELSE);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 730;
                        this.whenLiteral();
                        this.state = 735;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === ApexParser.COMMA) {
                            {
                                {
                                    this.state = 731;
                                    this.match(ApexParser.COMMA);
                                    this.state = 732;
                                    this.whenLiteral();
                                }
                            }
                            this.state = 737;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 738;
                        this.id();
                        this.state = 739;
                        this.id();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    whenLiteral() {
        let _localctx = new WhenLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 94, ApexParser.RULE_whenLiteral);
        let _la;
        try {
            this.state = 764;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 60, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 746;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === ApexParser.ADD || _la === ApexParser.SUB) {
                            {
                                {
                                    this.state = 743;
                                    _la = this._input.LA(1);
                                    if (!(_la === ApexParser.ADD || _la === ApexParser.SUB)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                }
                            }
                            this.state = 748;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 749;
                        this.match(ApexParser.IntegerLiteral);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 753;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === ApexParser.ADD || _la === ApexParser.SUB) {
                            {
                                {
                                    this.state = 750;
                                    _la = this._input.LA(1);
                                    if (!(_la === ApexParser.ADD || _la === ApexParser.SUB)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                }
                            }
                            this.state = 755;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 756;
                        this.match(ApexParser.LongLiteral);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 757;
                        this.match(ApexParser.StringLiteral);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 758;
                        this.match(ApexParser.NULL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 759;
                        this.id();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 760;
                        this.match(ApexParser.LPAREN);
                        this.state = 761;
                        this.whenLiteral();
                        this.state = 762;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    forStatement() {
        let _localctx = new ForStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 96, ApexParser.RULE_forStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 766;
                this.match(ApexParser.FOR);
                this.state = 767;
                this.match(ApexParser.LPAREN);
                this.state = 768;
                this.forControl();
                this.state = 769;
                this.match(ApexParser.RPAREN);
                this.state = 772;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case ApexParser.ABSTRACT:
                    case ApexParser.AFTER:
                    case ApexParser.BEFORE:
                    case ApexParser.BREAK:
                    case ApexParser.CONTINUE:
                    case ApexParser.DELETE:
                    case ApexParser.DO:
                    case ApexParser.FINAL:
                    case ApexParser.FOR:
                    case ApexParser.GET:
                    case ApexParser.GLOBAL:
                    case ApexParser.IF:
                    case ApexParser.INHERITED:
                    case ApexParser.INSERT:
                    case ApexParser.INSTANCEOF:
                    case ApexParser.MERGE:
                    case ApexParser.NEW:
                    case ApexParser.NULL:
                    case ApexParser.OVERRIDE:
                    case ApexParser.PRIVATE:
                    case ApexParser.PROTECTED:
                    case ApexParser.PUBLIC:
                    case ApexParser.RETURN:
                    case ApexParser.SYSTEMRUNAS:
                    case ApexParser.SET:
                    case ApexParser.SHARING:
                    case ApexParser.STATIC:
                    case ApexParser.SUPER:
                    case ApexParser.SWITCH:
                    case ApexParser.TESTMETHOD:
                    case ApexParser.THIS:
                    case ApexParser.THROW:
                    case ApexParser.TRANSIENT:
                    case ApexParser.TRIGGER:
                    case ApexParser.TRY:
                    case ApexParser.UNDELETE:
                    case ApexParser.UPDATE:
                    case ApexParser.UPSERT:
                    case ApexParser.VIRTUAL:
                    case ApexParser.VOID:
                    case ApexParser.WEBSERVICE:
                    case ApexParser.WHEN:
                    case ApexParser.WHILE:
                    case ApexParser.WITH:
                    case ApexParser.WITHOUT:
                    case ApexParser.LIST:
                    case ApexParser.MAP:
                    case ApexParser.SYSTEM:
                    case ApexParser.USER:
                    case ApexParser.SELECT:
                    case ApexParser.COUNT:
                    case ApexParser.FROM:
                    case ApexParser.AS:
                    case ApexParser.USING:
                    case ApexParser.SCOPE:
                    case ApexParser.WHERE:
                    case ApexParser.ORDER:
                    case ApexParser.BY:
                    case ApexParser.LIMIT:
                    case ApexParser.SOQLAND:
                    case ApexParser.SOQLOR:
                    case ApexParser.NOT:
                    case ApexParser.AVG:
                    case ApexParser.COUNT_DISTINCT:
                    case ApexParser.MIN:
                    case ApexParser.MAX:
                    case ApexParser.SUM:
                    case ApexParser.TYPEOF:
                    case ApexParser.END:
                    case ApexParser.THEN:
                    case ApexParser.LIKE:
                    case ApexParser.IN:
                    case ApexParser.INCLUDES:
                    case ApexParser.EXCLUDES:
                    case ApexParser.ASC:
                    case ApexParser.DESC:
                    case ApexParser.NULLS:
                    case ApexParser.FIRST:
                    case ApexParser.LAST:
                    case ApexParser.GROUP:
                    case ApexParser.ALL:
                    case ApexParser.ROWS:
                    case ApexParser.VIEW:
                    case ApexParser.HAVING:
                    case ApexParser.ROLLUP:
                    case ApexParser.TOLABEL:
                    case ApexParser.OFFSET:
                    case ApexParser.DATA:
                    case ApexParser.CATEGORY:
                    case ApexParser.AT:
                    case ApexParser.ABOVE:
                    case ApexParser.BELOW:
                    case ApexParser.ABOVE_OR_BELOW:
                    case ApexParser.SECURITY_ENFORCED:
                    case ApexParser.SYSTEM_MODE:
                    case ApexParser.USER_MODE:
                    case ApexParser.REFERENCE:
                    case ApexParser.CUBE:
                    case ApexParser.FORMAT:
                    case ApexParser.TRACKING:
                    case ApexParser.VIEWSTAT:
                    case ApexParser.CUSTOM:
                    case ApexParser.STANDARD:
                    case ApexParser.DISTANCE:
                    case ApexParser.GEOLOCATION:
                    case ApexParser.GROUPING:
                    case ApexParser.CALENDAR_MONTH:
                    case ApexParser.CALENDAR_QUARTER:
                    case ApexParser.CALENDAR_YEAR:
                    case ApexParser.DAY_IN_MONTH:
                    case ApexParser.DAY_IN_WEEK:
                    case ApexParser.DAY_IN_YEAR:
                    case ApexParser.DAY_ONLY:
                    case ApexParser.FISCAL_MONTH:
                    case ApexParser.FISCAL_QUARTER:
                    case ApexParser.FISCAL_YEAR:
                    case ApexParser.HOUR_IN_DAY:
                    case ApexParser.WEEK_IN_MONTH:
                    case ApexParser.WEEK_IN_YEAR:
                    case ApexParser.CONVERT_TIMEZONE:
                    case ApexParser.YESTERDAY:
                    case ApexParser.TODAY:
                    case ApexParser.TOMORROW:
                    case ApexParser.LAST_WEEK:
                    case ApexParser.THIS_WEEK:
                    case ApexParser.NEXT_WEEK:
                    case ApexParser.LAST_MONTH:
                    case ApexParser.THIS_MONTH:
                    case ApexParser.NEXT_MONTH:
                    case ApexParser.LAST_90_DAYS:
                    case ApexParser.NEXT_90_DAYS:
                    case ApexParser.LAST_N_DAYS_N:
                    case ApexParser.NEXT_N_DAYS_N:
                    case ApexParser.N_DAYS_AGO_N:
                    case ApexParser.NEXT_N_WEEKS_N:
                    case ApexParser.LAST_N_WEEKS_N:
                    case ApexParser.N_WEEKS_AGO_N:
                    case ApexParser.NEXT_N_MONTHS_N:
                    case ApexParser.LAST_N_MONTHS_N:
                    case ApexParser.N_MONTHS_AGO_N:
                    case ApexParser.THIS_QUARTER:
                    case ApexParser.LAST_QUARTER:
                    case ApexParser.NEXT_QUARTER:
                    case ApexParser.NEXT_N_QUARTERS_N:
                    case ApexParser.LAST_N_QUARTERS_N:
                    case ApexParser.N_QUARTERS_AGO_N:
                    case ApexParser.THIS_YEAR:
                    case ApexParser.LAST_YEAR:
                    case ApexParser.NEXT_YEAR:
                    case ApexParser.NEXT_N_YEARS_N:
                    case ApexParser.LAST_N_YEARS_N:
                    case ApexParser.N_YEARS_AGO_N:
                    case ApexParser.THIS_FISCAL_QUARTER:
                    case ApexParser.LAST_FISCAL_QUARTER:
                    case ApexParser.NEXT_FISCAL_QUARTER:
                    case ApexParser.NEXT_N_FISCAL_QUARTERS_N:
                    case ApexParser.LAST_N_FISCAL_QUARTERS_N:
                    case ApexParser.N_FISCAL_QUARTERS_AGO_N:
                    case ApexParser.THIS_FISCAL_YEAR:
                    case ApexParser.LAST_FISCAL_YEAR:
                    case ApexParser.NEXT_FISCAL_YEAR:
                    case ApexParser.NEXT_N_FISCAL_YEARS_N:
                    case ApexParser.LAST_N_FISCAL_YEARS_N:
                    case ApexParser.N_FISCAL_YEARS_AGO_N:
                    case ApexParser.IntegralCurrencyLiteral:
                    case ApexParser.FIND:
                    case ApexParser.EMAIL:
                    case ApexParser.NAME:
                    case ApexParser.PHONE:
                    case ApexParser.SIDEBAR:
                    case ApexParser.FIELDS:
                    case ApexParser.METADATA:
                    case ApexParser.PRICEBOOKID:
                    case ApexParser.NETWORK:
                    case ApexParser.SNIPPET:
                    case ApexParser.TARGET_LENGTH:
                    case ApexParser.DIVISION:
                    case ApexParser.RETURNING:
                    case ApexParser.LISTVIEW:
                    case ApexParser.FindLiteral:
                    case ApexParser.IntegerLiteral:
                    case ApexParser.LongLiteral:
                    case ApexParser.NumberLiteral:
                    case ApexParser.BooleanLiteral:
                    case ApexParser.StringLiteral:
                    case ApexParser.LPAREN:
                    case ApexParser.LBRACE:
                    case ApexParser.LBRACK:
                    case ApexParser.BANG:
                    case ApexParser.TILDE:
                    case ApexParser.INC:
                    case ApexParser.DEC:
                    case ApexParser.ADD:
                    case ApexParser.SUB:
                    case ApexParser.ATSIGN:
                    case ApexParser.Identifier:
                        {
                            this.state = 770;
                            this.statement();
                        }
                        break;
                    case ApexParser.SEMI:
                        {
                            this.state = 771;
                            this.match(ApexParser.SEMI);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    whileStatement() {
        let _localctx = new WhileStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 98, ApexParser.RULE_whileStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 774;
                this.match(ApexParser.WHILE);
                this.state = 775;
                this.parExpression();
                this.state = 778;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case ApexParser.ABSTRACT:
                    case ApexParser.AFTER:
                    case ApexParser.BEFORE:
                    case ApexParser.BREAK:
                    case ApexParser.CONTINUE:
                    case ApexParser.DELETE:
                    case ApexParser.DO:
                    case ApexParser.FINAL:
                    case ApexParser.FOR:
                    case ApexParser.GET:
                    case ApexParser.GLOBAL:
                    case ApexParser.IF:
                    case ApexParser.INHERITED:
                    case ApexParser.INSERT:
                    case ApexParser.INSTANCEOF:
                    case ApexParser.MERGE:
                    case ApexParser.NEW:
                    case ApexParser.NULL:
                    case ApexParser.OVERRIDE:
                    case ApexParser.PRIVATE:
                    case ApexParser.PROTECTED:
                    case ApexParser.PUBLIC:
                    case ApexParser.RETURN:
                    case ApexParser.SYSTEMRUNAS:
                    case ApexParser.SET:
                    case ApexParser.SHARING:
                    case ApexParser.STATIC:
                    case ApexParser.SUPER:
                    case ApexParser.SWITCH:
                    case ApexParser.TESTMETHOD:
                    case ApexParser.THIS:
                    case ApexParser.THROW:
                    case ApexParser.TRANSIENT:
                    case ApexParser.TRIGGER:
                    case ApexParser.TRY:
                    case ApexParser.UNDELETE:
                    case ApexParser.UPDATE:
                    case ApexParser.UPSERT:
                    case ApexParser.VIRTUAL:
                    case ApexParser.VOID:
                    case ApexParser.WEBSERVICE:
                    case ApexParser.WHEN:
                    case ApexParser.WHILE:
                    case ApexParser.WITH:
                    case ApexParser.WITHOUT:
                    case ApexParser.LIST:
                    case ApexParser.MAP:
                    case ApexParser.SYSTEM:
                    case ApexParser.USER:
                    case ApexParser.SELECT:
                    case ApexParser.COUNT:
                    case ApexParser.FROM:
                    case ApexParser.AS:
                    case ApexParser.USING:
                    case ApexParser.SCOPE:
                    case ApexParser.WHERE:
                    case ApexParser.ORDER:
                    case ApexParser.BY:
                    case ApexParser.LIMIT:
                    case ApexParser.SOQLAND:
                    case ApexParser.SOQLOR:
                    case ApexParser.NOT:
                    case ApexParser.AVG:
                    case ApexParser.COUNT_DISTINCT:
                    case ApexParser.MIN:
                    case ApexParser.MAX:
                    case ApexParser.SUM:
                    case ApexParser.TYPEOF:
                    case ApexParser.END:
                    case ApexParser.THEN:
                    case ApexParser.LIKE:
                    case ApexParser.IN:
                    case ApexParser.INCLUDES:
                    case ApexParser.EXCLUDES:
                    case ApexParser.ASC:
                    case ApexParser.DESC:
                    case ApexParser.NULLS:
                    case ApexParser.FIRST:
                    case ApexParser.LAST:
                    case ApexParser.GROUP:
                    case ApexParser.ALL:
                    case ApexParser.ROWS:
                    case ApexParser.VIEW:
                    case ApexParser.HAVING:
                    case ApexParser.ROLLUP:
                    case ApexParser.TOLABEL:
                    case ApexParser.OFFSET:
                    case ApexParser.DATA:
                    case ApexParser.CATEGORY:
                    case ApexParser.AT:
                    case ApexParser.ABOVE:
                    case ApexParser.BELOW:
                    case ApexParser.ABOVE_OR_BELOW:
                    case ApexParser.SECURITY_ENFORCED:
                    case ApexParser.SYSTEM_MODE:
                    case ApexParser.USER_MODE:
                    case ApexParser.REFERENCE:
                    case ApexParser.CUBE:
                    case ApexParser.FORMAT:
                    case ApexParser.TRACKING:
                    case ApexParser.VIEWSTAT:
                    case ApexParser.CUSTOM:
                    case ApexParser.STANDARD:
                    case ApexParser.DISTANCE:
                    case ApexParser.GEOLOCATION:
                    case ApexParser.GROUPING:
                    case ApexParser.CALENDAR_MONTH:
                    case ApexParser.CALENDAR_QUARTER:
                    case ApexParser.CALENDAR_YEAR:
                    case ApexParser.DAY_IN_MONTH:
                    case ApexParser.DAY_IN_WEEK:
                    case ApexParser.DAY_IN_YEAR:
                    case ApexParser.DAY_ONLY:
                    case ApexParser.FISCAL_MONTH:
                    case ApexParser.FISCAL_QUARTER:
                    case ApexParser.FISCAL_YEAR:
                    case ApexParser.HOUR_IN_DAY:
                    case ApexParser.WEEK_IN_MONTH:
                    case ApexParser.WEEK_IN_YEAR:
                    case ApexParser.CONVERT_TIMEZONE:
                    case ApexParser.YESTERDAY:
                    case ApexParser.TODAY:
                    case ApexParser.TOMORROW:
                    case ApexParser.LAST_WEEK:
                    case ApexParser.THIS_WEEK:
                    case ApexParser.NEXT_WEEK:
                    case ApexParser.LAST_MONTH:
                    case ApexParser.THIS_MONTH:
                    case ApexParser.NEXT_MONTH:
                    case ApexParser.LAST_90_DAYS:
                    case ApexParser.NEXT_90_DAYS:
                    case ApexParser.LAST_N_DAYS_N:
                    case ApexParser.NEXT_N_DAYS_N:
                    case ApexParser.N_DAYS_AGO_N:
                    case ApexParser.NEXT_N_WEEKS_N:
                    case ApexParser.LAST_N_WEEKS_N:
                    case ApexParser.N_WEEKS_AGO_N:
                    case ApexParser.NEXT_N_MONTHS_N:
                    case ApexParser.LAST_N_MONTHS_N:
                    case ApexParser.N_MONTHS_AGO_N:
                    case ApexParser.THIS_QUARTER:
                    case ApexParser.LAST_QUARTER:
                    case ApexParser.NEXT_QUARTER:
                    case ApexParser.NEXT_N_QUARTERS_N:
                    case ApexParser.LAST_N_QUARTERS_N:
                    case ApexParser.N_QUARTERS_AGO_N:
                    case ApexParser.THIS_YEAR:
                    case ApexParser.LAST_YEAR:
                    case ApexParser.NEXT_YEAR:
                    case ApexParser.NEXT_N_YEARS_N:
                    case ApexParser.LAST_N_YEARS_N:
                    case ApexParser.N_YEARS_AGO_N:
                    case ApexParser.THIS_FISCAL_QUARTER:
                    case ApexParser.LAST_FISCAL_QUARTER:
                    case ApexParser.NEXT_FISCAL_QUARTER:
                    case ApexParser.NEXT_N_FISCAL_QUARTERS_N:
                    case ApexParser.LAST_N_FISCAL_QUARTERS_N:
                    case ApexParser.N_FISCAL_QUARTERS_AGO_N:
                    case ApexParser.THIS_FISCAL_YEAR:
                    case ApexParser.LAST_FISCAL_YEAR:
                    case ApexParser.NEXT_FISCAL_YEAR:
                    case ApexParser.NEXT_N_FISCAL_YEARS_N:
                    case ApexParser.LAST_N_FISCAL_YEARS_N:
                    case ApexParser.N_FISCAL_YEARS_AGO_N:
                    case ApexParser.IntegralCurrencyLiteral:
                    case ApexParser.FIND:
                    case ApexParser.EMAIL:
                    case ApexParser.NAME:
                    case ApexParser.PHONE:
                    case ApexParser.SIDEBAR:
                    case ApexParser.FIELDS:
                    case ApexParser.METADATA:
                    case ApexParser.PRICEBOOKID:
                    case ApexParser.NETWORK:
                    case ApexParser.SNIPPET:
                    case ApexParser.TARGET_LENGTH:
                    case ApexParser.DIVISION:
                    case ApexParser.RETURNING:
                    case ApexParser.LISTVIEW:
                    case ApexParser.FindLiteral:
                    case ApexParser.IntegerLiteral:
                    case ApexParser.LongLiteral:
                    case ApexParser.NumberLiteral:
                    case ApexParser.BooleanLiteral:
                    case ApexParser.StringLiteral:
                    case ApexParser.LPAREN:
                    case ApexParser.LBRACE:
                    case ApexParser.LBRACK:
                    case ApexParser.BANG:
                    case ApexParser.TILDE:
                    case ApexParser.INC:
                    case ApexParser.DEC:
                    case ApexParser.ADD:
                    case ApexParser.SUB:
                    case ApexParser.ATSIGN:
                    case ApexParser.Identifier:
                        {
                            this.state = 776;
                            this.statement();
                        }
                        break;
                    case ApexParser.SEMI:
                        {
                            this.state = 777;
                            this.match(ApexParser.SEMI);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    doWhileStatement() {
        let _localctx = new DoWhileStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 100, ApexParser.RULE_doWhileStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 780;
                this.match(ApexParser.DO);
                this.state = 781;
                this.block();
                this.state = 782;
                this.match(ApexParser.WHILE);
                this.state = 783;
                this.parExpression();
                this.state = 784;
                this.match(ApexParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tryStatement() {
        let _localctx = new TryStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 102, ApexParser.RULE_tryStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 786;
                this.match(ApexParser.TRY);
                this.state = 787;
                this.block();
                this.state = 797;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case ApexParser.CATCH:
                        {
                            this.state = 789;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            do {
                                {
                                    {
                                        this.state = 788;
                                        this.catchClause();
                                    }
                                }
                                this.state = 791;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while (_la === ApexParser.CATCH);
                            this.state = 794;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === ApexParser.FINALLY) {
                                {
                                    this.state = 793;
                                    this.finallyBlock();
                                }
                            }
                        }
                        break;
                    case ApexParser.FINALLY:
                        {
                            this.state = 796;
                            this.finallyBlock();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    returnStatement() {
        let _localctx = new ReturnStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 104, ApexParser.RULE_returnStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 799;
                this.match(ApexParser.RETURN);
                this.state = 801;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.SUPER - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.THIS - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.LIST - 34)) | (1 << (ApexParser.MAP - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)) | (1 << (ApexParser.FindLiteral - 162)) | (1 << (ApexParser.IntegerLiteral - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (ApexParser.LongLiteral - 194)) | (1 << (ApexParser.NumberLiteral - 194)) | (1 << (ApexParser.BooleanLiteral - 194)) | (1 << (ApexParser.StringLiteral - 194)) | (1 << (ApexParser.LPAREN - 194)) | (1 << (ApexParser.LBRACK - 194)) | (1 << (ApexParser.BANG - 194)) | (1 << (ApexParser.TILDE - 194)) | (1 << (ApexParser.INC - 194)) | (1 << (ApexParser.DEC - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (ApexParser.ADD - 226)) | (1 << (ApexParser.SUB - 226)) | (1 << (ApexParser.Identifier - 226)))) !== 0)) {
                    {
                        this.state = 800;
                        this.expression(0);
                    }
                }
                this.state = 803;
                this.match(ApexParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    throwStatement() {
        let _localctx = new ThrowStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 106, ApexParser.RULE_throwStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 805;
                this.match(ApexParser.THROW);
                this.state = 806;
                this.expression(0);
                this.state = 807;
                this.match(ApexParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    breakStatement() {
        let _localctx = new BreakStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 108, ApexParser.RULE_breakStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 809;
                this.match(ApexParser.BREAK);
                this.state = 810;
                this.match(ApexParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    continueStatement() {
        let _localctx = new ContinueStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 110, ApexParser.RULE_continueStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 812;
                this.match(ApexParser.CONTINUE);
                this.state = 813;
                this.match(ApexParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    accessLevel() {
        let _localctx = new AccessLevelContext(this._ctx, this.state);
        this.enterRule(_localctx, 112, ApexParser.RULE_accessLevel);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 815;
                this.match(ApexParser.AS);
                this.state = 816;
                _la = this._input.LA(1);
                if (!(_la === ApexParser.SYSTEM || _la === ApexParser.USER)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    insertStatement() {
        let _localctx = new InsertStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 114, ApexParser.RULE_insertStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 818;
                this.match(ApexParser.INSERT);
                this.state = 820;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 67, this._ctx)) {
                    case 1:
                        {
                            this.state = 819;
                            this.accessLevel();
                        }
                        break;
                }
                this.state = 822;
                this.expression(0);
                this.state = 823;
                this.match(ApexParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    updateStatement() {
        let _localctx = new UpdateStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 116, ApexParser.RULE_updateStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 825;
                this.match(ApexParser.UPDATE);
                this.state = 827;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 68, this._ctx)) {
                    case 1:
                        {
                            this.state = 826;
                            this.accessLevel();
                        }
                        break;
                }
                this.state = 829;
                this.expression(0);
                this.state = 830;
                this.match(ApexParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    deleteStatement() {
        let _localctx = new DeleteStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 118, ApexParser.RULE_deleteStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 832;
                this.match(ApexParser.DELETE);
                this.state = 834;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 69, this._ctx)) {
                    case 1:
                        {
                            this.state = 833;
                            this.accessLevel();
                        }
                        break;
                }
                this.state = 836;
                this.expression(0);
                this.state = 837;
                this.match(ApexParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    undeleteStatement() {
        let _localctx = new UndeleteStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 120, ApexParser.RULE_undeleteStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 839;
                this.match(ApexParser.UNDELETE);
                this.state = 841;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 70, this._ctx)) {
                    case 1:
                        {
                            this.state = 840;
                            this.accessLevel();
                        }
                        break;
                }
                this.state = 843;
                this.expression(0);
                this.state = 844;
                this.match(ApexParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    upsertStatement() {
        let _localctx = new UpsertStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 122, ApexParser.RULE_upsertStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 846;
                this.match(ApexParser.UPSERT);
                this.state = 848;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 71, this._ctx)) {
                    case 1:
                        {
                            this.state = 847;
                            this.accessLevel();
                        }
                        break;
                }
                this.state = 850;
                this.expression(0);
                this.state = 852;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)))) !== 0) || _la === ApexParser.Identifier) {
                    {
                        this.state = 851;
                        this.qualifiedName();
                    }
                }
                this.state = 854;
                this.match(ApexParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    mergeStatement() {
        let _localctx = new MergeStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 124, ApexParser.RULE_mergeStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 856;
                this.match(ApexParser.MERGE);
                this.state = 858;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 73, this._ctx)) {
                    case 1:
                        {
                            this.state = 857;
                            this.accessLevel();
                        }
                        break;
                }
                this.state = 860;
                this.expression(0);
                this.state = 861;
                this.expression(0);
                this.state = 862;
                this.match(ApexParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    runAsStatement() {
        let _localctx = new RunAsStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 126, ApexParser.RULE_runAsStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 864;
                this.match(ApexParser.SYSTEMRUNAS);
                this.state = 865;
                this.match(ApexParser.LPAREN);
                this.state = 867;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.SUPER - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.THIS - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.LIST - 34)) | (1 << (ApexParser.MAP - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)) | (1 << (ApexParser.FindLiteral - 162)) | (1 << (ApexParser.IntegerLiteral - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (ApexParser.LongLiteral - 194)) | (1 << (ApexParser.NumberLiteral - 194)) | (1 << (ApexParser.BooleanLiteral - 194)) | (1 << (ApexParser.StringLiteral - 194)) | (1 << (ApexParser.LPAREN - 194)) | (1 << (ApexParser.LBRACK - 194)) | (1 << (ApexParser.BANG - 194)) | (1 << (ApexParser.TILDE - 194)) | (1 << (ApexParser.INC - 194)) | (1 << (ApexParser.DEC - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (ApexParser.ADD - 226)) | (1 << (ApexParser.SUB - 226)) | (1 << (ApexParser.Identifier - 226)))) !== 0)) {
                    {
                        this.state = 866;
                        this.expressionList();
                    }
                }
                this.state = 869;
                this.match(ApexParser.RPAREN);
                this.state = 870;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    expressionStatement() {
        let _localctx = new ExpressionStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 128, ApexParser.RULE_expressionStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 872;
                this.expression(0);
                this.state = 873;
                this.match(ApexParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    propertyBlock() {
        let _localctx = new PropertyBlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 130, ApexParser.RULE_propertyBlock);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 878;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (ApexParser.STATIC - 36)) | (1 << (ApexParser.TESTMETHOD - 36)) | (1 << (ApexParser.TRANSIENT - 36)) | (1 << (ApexParser.VIRTUAL - 36)) | (1 << (ApexParser.WEBSERVICE - 36)) | (1 << (ApexParser.WITH - 36)) | (1 << (ApexParser.WITHOUT - 36)))) !== 0) || _la === ApexParser.ATSIGN) {
                    {
                        {
                            this.state = 875;
                            this.modifier();
                        }
                    }
                    this.state = 880;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 883;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case ApexParser.GET:
                        {
                            this.state = 881;
                            this.getter();
                        }
                        break;
                    case ApexParser.SET:
                        {
                            this.state = 882;
                            this.setter();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    getter() {
        let _localctx = new GetterContext(this._ctx, this.state);
        this.enterRule(_localctx, 132, ApexParser.RULE_getter);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 885;
                this.match(ApexParser.GET);
                this.state = 888;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case ApexParser.SEMI:
                        {
                            this.state = 886;
                            this.match(ApexParser.SEMI);
                        }
                        break;
                    case ApexParser.LBRACE:
                        {
                            this.state = 887;
                            this.block();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    setter() {
        let _localctx = new SetterContext(this._ctx, this.state);
        this.enterRule(_localctx, 134, ApexParser.RULE_setter);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 890;
                this.match(ApexParser.SET);
                this.state = 893;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case ApexParser.SEMI:
                        {
                            this.state = 891;
                            this.match(ApexParser.SEMI);
                        }
                        break;
                    case ApexParser.LBRACE:
                        {
                            this.state = 892;
                            this.block();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    catchClause() {
        let _localctx = new CatchClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 136, ApexParser.RULE_catchClause);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 895;
                this.match(ApexParser.CATCH);
                this.state = 896;
                this.match(ApexParser.LPAREN);
                this.state = 900;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 79, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 897;
                                this.modifier();
                            }
                        }
                    }
                    this.state = 902;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 79, this._ctx);
                }
                this.state = 903;
                this.qualifiedName();
                this.state = 904;
                this.id();
                this.state = 905;
                this.match(ApexParser.RPAREN);
                this.state = 906;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    finallyBlock() {
        let _localctx = new FinallyBlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 138, ApexParser.RULE_finallyBlock);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 908;
                this.match(ApexParser.FINALLY);
                this.state = 909;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    forControl() {
        let _localctx = new ForControlContext(this._ctx, this.state);
        this.enterRule(_localctx, 140, ApexParser.RULE_forControl);
        let _la;
        try {
            this.state = 923;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 83, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 911;
                        this.enhancedForControl();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 913;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.FINAL) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.STATIC - 34)) | (1 << (ApexParser.SUPER - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.TESTMETHOD - 34)) | (1 << (ApexParser.THIS - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.VIRTUAL - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.WEBSERVICE - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.LIST - 34)) | (1 << (ApexParser.MAP - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)) | (1 << (ApexParser.FindLiteral - 162)) | (1 << (ApexParser.IntegerLiteral - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (ApexParser.LongLiteral - 194)) | (1 << (ApexParser.NumberLiteral - 194)) | (1 << (ApexParser.BooleanLiteral - 194)) | (1 << (ApexParser.StringLiteral - 194)) | (1 << (ApexParser.LPAREN - 194)) | (1 << (ApexParser.LBRACK - 194)) | (1 << (ApexParser.BANG - 194)) | (1 << (ApexParser.TILDE - 194)) | (1 << (ApexParser.INC - 194)) | (1 << (ApexParser.DEC - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (ApexParser.ADD - 226)) | (1 << (ApexParser.SUB - 226)) | (1 << (ApexParser.ATSIGN - 226)) | (1 << (ApexParser.Identifier - 226)))) !== 0)) {
                            {
                                this.state = 912;
                                this.forInit();
                            }
                        }
                        this.state = 915;
                        this.match(ApexParser.SEMI);
                        this.state = 917;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.SUPER - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.THIS - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.LIST - 34)) | (1 << (ApexParser.MAP - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)) | (1 << (ApexParser.FindLiteral - 162)) | (1 << (ApexParser.IntegerLiteral - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (ApexParser.LongLiteral - 194)) | (1 << (ApexParser.NumberLiteral - 194)) | (1 << (ApexParser.BooleanLiteral - 194)) | (1 << (ApexParser.StringLiteral - 194)) | (1 << (ApexParser.LPAREN - 194)) | (1 << (ApexParser.LBRACK - 194)) | (1 << (ApexParser.BANG - 194)) | (1 << (ApexParser.TILDE - 194)) | (1 << (ApexParser.INC - 194)) | (1 << (ApexParser.DEC - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (ApexParser.ADD - 226)) | (1 << (ApexParser.SUB - 226)) | (1 << (ApexParser.Identifier - 226)))) !== 0)) {
                            {
                                this.state = 916;
                                this.expression(0);
                            }
                        }
                        this.state = 919;
                        this.match(ApexParser.SEMI);
                        this.state = 921;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.SUPER - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.THIS - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.LIST - 34)) | (1 << (ApexParser.MAP - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)) | (1 << (ApexParser.FindLiteral - 162)) | (1 << (ApexParser.IntegerLiteral - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (ApexParser.LongLiteral - 194)) | (1 << (ApexParser.NumberLiteral - 194)) | (1 << (ApexParser.BooleanLiteral - 194)) | (1 << (ApexParser.StringLiteral - 194)) | (1 << (ApexParser.LPAREN - 194)) | (1 << (ApexParser.LBRACK - 194)) | (1 << (ApexParser.BANG - 194)) | (1 << (ApexParser.TILDE - 194)) | (1 << (ApexParser.INC - 194)) | (1 << (ApexParser.DEC - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (ApexParser.ADD - 226)) | (1 << (ApexParser.SUB - 226)) | (1 << (ApexParser.Identifier - 226)))) !== 0)) {
                            {
                                this.state = 920;
                                this.forUpdate();
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    forInit() {
        let _localctx = new ForInitContext(this._ctx, this.state);
        this.enterRule(_localctx, 142, ApexParser.RULE_forInit);
        try {
            this.state = 927;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 84, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 925;
                        this.localVariableDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 926;
                        this.expressionList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    enhancedForControl() {
        let _localctx = new EnhancedForControlContext(this._ctx, this.state);
        this.enterRule(_localctx, 144, ApexParser.RULE_enhancedForControl);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 929;
                this.typeRef();
                this.state = 930;
                this.id();
                this.state = 931;
                this.match(ApexParser.COLON);
                this.state = 932;
                this.expression(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    forUpdate() {
        let _localctx = new ForUpdateContext(this._ctx, this.state);
        this.enterRule(_localctx, 146, ApexParser.RULE_forUpdate);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 934;
                this.expressionList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    parExpression() {
        let _localctx = new ParExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 148, ApexParser.RULE_parExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 936;
                this.match(ApexParser.LPAREN);
                this.state = 937;
                this.expression(0);
                this.state = 938;
                this.match(ApexParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    expressionList() {
        let _localctx = new ExpressionListContext(this._ctx, this.state);
        this.enterRule(_localctx, 150, ApexParser.RULE_expressionList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 940;
                this.expression(0);
                this.state = 945;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.COMMA) {
                    {
                        {
                            this.state = 941;
                            this.match(ApexParser.COMMA);
                            this.state = 942;
                            this.expression(0);
                        }
                    }
                    this.state = 947;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    expression(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let _localctx = new ExpressionContext(this._ctx, _parentState);
        let _prevctx = _localctx;
        let _startState = 152;
        this.enterRecursionRule(_localctx, 152, ApexParser.RULE_expression, _p);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 966;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 86, this._ctx)) {
                    case 1:
                        {
                            _localctx = new PrimaryExpressionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 949;
                            this.primary();
                        }
                        break;
                    case 2:
                        {
                            _localctx = new MethodCallExpressionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 950;
                            this.methodCall();
                        }
                        break;
                    case 3:
                        {
                            _localctx = new NewExpressionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 951;
                            this.match(ApexParser.NEW);
                            this.state = 952;
                            this.creator();
                        }
                        break;
                    case 4:
                        {
                            _localctx = new CastExpressionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 953;
                            this.match(ApexParser.LPAREN);
                            this.state = 954;
                            this.typeRef();
                            this.state = 955;
                            this.match(ApexParser.RPAREN);
                            this.state = 956;
                            this.expression(19);
                        }
                        break;
                    case 5:
                        {
                            _localctx = new SubExpressionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 958;
                            this.match(ApexParser.LPAREN);
                            this.state = 959;
                            this.expression(0);
                            this.state = 960;
                            this.match(ApexParser.RPAREN);
                        }
                        break;
                    case 6:
                        {
                            _localctx = new PreOpExpressionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 962;
                            _la = this._input.LA(1);
                            if (!(((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (ApexParser.INC - 224)) | (1 << (ApexParser.DEC - 224)) | (1 << (ApexParser.ADD - 224)) | (1 << (ApexParser.SUB - 224)))) !== 0))) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 963;
                            this.expression(16);
                        }
                        break;
                    case 7:
                        {
                            _localctx = new NegExpressionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 964;
                            _la = this._input.LA(1);
                            if (!(_la === ApexParser.BANG || _la === ApexParser.TILDE)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 965;
                            this.expression(15);
                        }
                        break;
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 1039;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 91, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            this.state = 1037;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 90, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new Arth1ExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexParser.RULE_expression);
                                        this.state = 968;
                                        if (!(this.precpred(this._ctx, 14))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 14)");
                                        }
                                        this.state = 969;
                                        _la = this._input.LA(1);
                                        if (!(_la === ApexParser.MUL || _la === ApexParser.DIV)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 970;
                                        this.expression(15);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new Arth2ExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexParser.RULE_expression);
                                        this.state = 971;
                                        if (!(this.precpred(this._ctx, 13))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 13)");
                                        }
                                        this.state = 972;
                                        _la = this._input.LA(1);
                                        if (!(_la === ApexParser.ADD || _la === ApexParser.SUB)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 973;
                                        this.expression(14);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new BitExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexParser.RULE_expression);
                                        this.state = 974;
                                        if (!(this.precpred(this._ctx, 12))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 12)");
                                        }
                                        this.state = 982;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 87, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 975;
                                                    this.match(ApexParser.LT);
                                                    this.state = 976;
                                                    this.match(ApexParser.LT);
                                                }
                                                break;
                                            case 2:
                                                {
                                                    this.state = 977;
                                                    this.match(ApexParser.GT);
                                                    this.state = 978;
                                                    this.match(ApexParser.GT);
                                                    this.state = 979;
                                                    this.match(ApexParser.GT);
                                                }
                                                break;
                                            case 3:
                                                {
                                                    this.state = 980;
                                                    this.match(ApexParser.GT);
                                                    this.state = 981;
                                                    this.match(ApexParser.GT);
                                                }
                                                break;
                                        }
                                        this.state = 984;
                                        this.expression(13);
                                    }
                                    break;
                                case 4:
                                    {
                                        _localctx = new CmpExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexParser.RULE_expression);
                                        this.state = 985;
                                        if (!(this.precpred(this._ctx, 11))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 11)");
                                        }
                                        this.state = 986;
                                        _la = this._input.LA(1);
                                        if (!(_la === ApexParser.GT || _la === ApexParser.LT)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 988;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === ApexParser.ASSIGN) {
                                            {
                                                this.state = 987;
                                                this.match(ApexParser.ASSIGN);
                                            }
                                        }
                                        this.state = 990;
                                        this.expression(12);
                                    }
                                    break;
                                case 5:
                                    {
                                        _localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexParser.RULE_expression);
                                        this.state = 991;
                                        if (!(this.precpred(this._ctx, 9))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 9)");
                                        }
                                        this.state = 992;
                                        _la = this._input.LA(1);
                                        if (!(((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (ApexParser.EQUAL - 216)) | (1 << (ApexParser.TRIPLEEQUAL - 216)) | (1 << (ApexParser.NOTEQUAL - 216)) | (1 << (ApexParser.LESSANDGREATER - 216)) | (1 << (ApexParser.TRIPLENOTEQUAL - 216)))) !== 0))) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 993;
                                        this.expression(10);
                                    }
                                    break;
                                case 6:
                                    {
                                        _localctx = new BitAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexParser.RULE_expression);
                                        this.state = 994;
                                        if (!(this.precpred(this._ctx, 8))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 8)");
                                        }
                                        this.state = 995;
                                        this.match(ApexParser.BITAND);
                                        this.state = 996;
                                        this.expression(9);
                                    }
                                    break;
                                case 7:
                                    {
                                        _localctx = new BitNotExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexParser.RULE_expression);
                                        this.state = 997;
                                        if (!(this.precpred(this._ctx, 7))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
                                        }
                                        this.state = 998;
                                        this.match(ApexParser.CARET);
                                        this.state = 999;
                                        this.expression(8);
                                    }
                                    break;
                                case 8:
                                    {
                                        _localctx = new BitOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexParser.RULE_expression);
                                        this.state = 1000;
                                        if (!(this.precpred(this._ctx, 6))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
                                        }
                                        this.state = 1001;
                                        this.match(ApexParser.BITOR);
                                        this.state = 1002;
                                        this.expression(7);
                                    }
                                    break;
                                case 9:
                                    {
                                        _localctx = new LogAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexParser.RULE_expression);
                                        this.state = 1003;
                                        if (!(this.precpred(this._ctx, 5))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
                                        }
                                        this.state = 1004;
                                        this.match(ApexParser.AND);
                                        this.state = 1005;
                                        this.expression(6);
                                    }
                                    break;
                                case 10:
                                    {
                                        _localctx = new LogOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexParser.RULE_expression);
                                        this.state = 1006;
                                        if (!(this.precpred(this._ctx, 4))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
                                        }
                                        this.state = 1007;
                                        this.match(ApexParser.OR);
                                        this.state = 1008;
                                        this.expression(5);
                                    }
                                    break;
                                case 11:
                                    {
                                        _localctx = new CoalExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexParser.RULE_expression);
                                        this.state = 1009;
                                        if (!(this.precpred(this._ctx, 3))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
                                        }
                                        this.state = 1010;
                                        this.match(ApexParser.COAL);
                                        this.state = 1011;
                                        this.expression(4);
                                    }
                                    break;
                                case 12:
                                    {
                                        _localctx = new CondExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexParser.RULE_expression);
                                        this.state = 1012;
                                        if (!(this.precpred(this._ctx, 2))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
                                        }
                                        this.state = 1013;
                                        this.match(ApexParser.QUESTION);
                                        this.state = 1014;
                                        this.expression(0);
                                        this.state = 1015;
                                        this.match(ApexParser.COLON);
                                        this.state = 1016;
                                        this.expression(2);
                                    }
                                    break;
                                case 13:
                                    {
                                        _localctx = new AssignExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexParser.RULE_expression);
                                        this.state = 1018;
                                        if (!(this.precpred(this._ctx, 1))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
                                        }
                                        this.state = 1019;
                                        _la = this._input.LA(1);
                                        if (!(((((_la - 208)) & ~0x1F) === 0 && ((1 << (_la - 208)) & ((1 << (ApexParser.ASSIGN - 208)) | (1 << (ApexParser.ADD_ASSIGN - 208)) | (1 << (ApexParser.SUB_ASSIGN - 208)) | (1 << (ApexParser.MUL_ASSIGN - 208)) | (1 << (ApexParser.DIV_ASSIGN - 208)) | (1 << (ApexParser.AND_ASSIGN - 208)) | (1 << (ApexParser.OR_ASSIGN - 208)))) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & ((1 << (ApexParser.XOR_ASSIGN - 240)) | (1 << (ApexParser.LSHIFT_ASSIGN - 240)) | (1 << (ApexParser.RSHIFT_ASSIGN - 240)) | (1 << (ApexParser.URSHIFT_ASSIGN - 240)))) !== 0))) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 1020;
                                        this.expression(1);
                                    }
                                    break;
                                case 14:
                                    {
                                        _localctx = new DotExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexParser.RULE_expression);
                                        this.state = 1021;
                                        if (!(this.precpred(this._ctx, 23))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 23)");
                                        }
                                        this.state = 1022;
                                        _la = this._input.LA(1);
                                        if (!(_la === ApexParser.DOT || _la === ApexParser.QUESTIONDOT)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 1025;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 89, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 1023;
                                                    this.dotMethodCall();
                                                }
                                                break;
                                            case 2:
                                                {
                                                    this.state = 1024;
                                                    this.anyId();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                case 15:
                                    {
                                        _localctx = new ArrayExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexParser.RULE_expression);
                                        this.state = 1027;
                                        if (!(this.precpred(this._ctx, 22))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 22)");
                                        }
                                        this.state = 1028;
                                        this.match(ApexParser.LBRACK);
                                        this.state = 1029;
                                        this.expression(0);
                                        this.state = 1030;
                                        this.match(ApexParser.RBRACK);
                                    }
                                    break;
                                case 16:
                                    {
                                        _localctx = new PostOpExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexParser.RULE_expression);
                                        this.state = 1032;
                                        if (!(this.precpred(this._ctx, 17))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 17)");
                                        }
                                        this.state = 1033;
                                        _la = this._input.LA(1);
                                        if (!(_la === ApexParser.INC || _la === ApexParser.DEC)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                    }
                                    break;
                                case 17:
                                    {
                                        _localctx = new InstanceOfExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexParser.RULE_expression);
                                        this.state = 1034;
                                        if (!(this.precpred(this._ctx, 10))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 10)");
                                        }
                                        this.state = 1035;
                                        this.match(ApexParser.INSTANCEOF);
                                        this.state = 1036;
                                        this.typeRef();
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 1041;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 91, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }
    // @RuleVersion(0)
    primary() {
        let _localctx = new PrimaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 154, ApexParser.RULE_primary);
        try {
            this.state = 1055;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 92, this._ctx)) {
                case 1:
                    _localctx = new ThisPrimaryContext(_localctx);
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1042;
                        this.match(ApexParser.THIS);
                    }
                    break;
                case 2:
                    _localctx = new SuperPrimaryContext(_localctx);
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1043;
                        this.match(ApexParser.SUPER);
                    }
                    break;
                case 3:
                    _localctx = new LiteralPrimaryContext(_localctx);
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1044;
                        this.literal();
                    }
                    break;
                case 4:
                    _localctx = new TypeRefPrimaryContext(_localctx);
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1045;
                        this.typeRef();
                        this.state = 1046;
                        this.match(ApexParser.DOT);
                        this.state = 1047;
                        this.match(ApexParser.CLASS);
                    }
                    break;
                case 5:
                    _localctx = new VoidPrimaryContext(_localctx);
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1049;
                        this.match(ApexParser.VOID);
                        this.state = 1050;
                        this.match(ApexParser.DOT);
                        this.state = 1051;
                        this.match(ApexParser.CLASS);
                    }
                    break;
                case 6:
                    _localctx = new IdPrimaryContext(_localctx);
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1052;
                        this.id();
                    }
                    break;
                case 7:
                    _localctx = new SoqlPrimaryContext(_localctx);
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1053;
                        this.soqlLiteral();
                    }
                    break;
                case 8:
                    _localctx = new SoslPrimaryContext(_localctx);
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1054;
                        this.soslLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    methodCall() {
        let _localctx = new MethodCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 156, ApexParser.RULE_methodCall);
        let _la;
        try {
            this.state = 1076;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexParser.AFTER:
                case ApexParser.BEFORE:
                case ApexParser.GET:
                case ApexParser.INHERITED:
                case ApexParser.INSTANCEOF:
                case ApexParser.SET:
                case ApexParser.SHARING:
                case ApexParser.SWITCH:
                case ApexParser.TRANSIENT:
                case ApexParser.TRIGGER:
                case ApexParser.WHEN:
                case ApexParser.WITH:
                case ApexParser.WITHOUT:
                case ApexParser.SYSTEM:
                case ApexParser.USER:
                case ApexParser.SELECT:
                case ApexParser.COUNT:
                case ApexParser.FROM:
                case ApexParser.AS:
                case ApexParser.USING:
                case ApexParser.SCOPE:
                case ApexParser.WHERE:
                case ApexParser.ORDER:
                case ApexParser.BY:
                case ApexParser.LIMIT:
                case ApexParser.SOQLAND:
                case ApexParser.SOQLOR:
                case ApexParser.NOT:
                case ApexParser.AVG:
                case ApexParser.COUNT_DISTINCT:
                case ApexParser.MIN:
                case ApexParser.MAX:
                case ApexParser.SUM:
                case ApexParser.TYPEOF:
                case ApexParser.END:
                case ApexParser.THEN:
                case ApexParser.LIKE:
                case ApexParser.IN:
                case ApexParser.INCLUDES:
                case ApexParser.EXCLUDES:
                case ApexParser.ASC:
                case ApexParser.DESC:
                case ApexParser.NULLS:
                case ApexParser.FIRST:
                case ApexParser.LAST:
                case ApexParser.GROUP:
                case ApexParser.ALL:
                case ApexParser.ROWS:
                case ApexParser.VIEW:
                case ApexParser.HAVING:
                case ApexParser.ROLLUP:
                case ApexParser.TOLABEL:
                case ApexParser.OFFSET:
                case ApexParser.DATA:
                case ApexParser.CATEGORY:
                case ApexParser.AT:
                case ApexParser.ABOVE:
                case ApexParser.BELOW:
                case ApexParser.ABOVE_OR_BELOW:
                case ApexParser.SECURITY_ENFORCED:
                case ApexParser.SYSTEM_MODE:
                case ApexParser.USER_MODE:
                case ApexParser.REFERENCE:
                case ApexParser.CUBE:
                case ApexParser.FORMAT:
                case ApexParser.TRACKING:
                case ApexParser.VIEWSTAT:
                case ApexParser.CUSTOM:
                case ApexParser.STANDARD:
                case ApexParser.DISTANCE:
                case ApexParser.GEOLOCATION:
                case ApexParser.GROUPING:
                case ApexParser.CALENDAR_MONTH:
                case ApexParser.CALENDAR_QUARTER:
                case ApexParser.CALENDAR_YEAR:
                case ApexParser.DAY_IN_MONTH:
                case ApexParser.DAY_IN_WEEK:
                case ApexParser.DAY_IN_YEAR:
                case ApexParser.DAY_ONLY:
                case ApexParser.FISCAL_MONTH:
                case ApexParser.FISCAL_QUARTER:
                case ApexParser.FISCAL_YEAR:
                case ApexParser.HOUR_IN_DAY:
                case ApexParser.WEEK_IN_MONTH:
                case ApexParser.WEEK_IN_YEAR:
                case ApexParser.CONVERT_TIMEZONE:
                case ApexParser.YESTERDAY:
                case ApexParser.TODAY:
                case ApexParser.TOMORROW:
                case ApexParser.LAST_WEEK:
                case ApexParser.THIS_WEEK:
                case ApexParser.NEXT_WEEK:
                case ApexParser.LAST_MONTH:
                case ApexParser.THIS_MONTH:
                case ApexParser.NEXT_MONTH:
                case ApexParser.LAST_90_DAYS:
                case ApexParser.NEXT_90_DAYS:
                case ApexParser.LAST_N_DAYS_N:
                case ApexParser.NEXT_N_DAYS_N:
                case ApexParser.N_DAYS_AGO_N:
                case ApexParser.NEXT_N_WEEKS_N:
                case ApexParser.LAST_N_WEEKS_N:
                case ApexParser.N_WEEKS_AGO_N:
                case ApexParser.NEXT_N_MONTHS_N:
                case ApexParser.LAST_N_MONTHS_N:
                case ApexParser.N_MONTHS_AGO_N:
                case ApexParser.THIS_QUARTER:
                case ApexParser.LAST_QUARTER:
                case ApexParser.NEXT_QUARTER:
                case ApexParser.NEXT_N_QUARTERS_N:
                case ApexParser.LAST_N_QUARTERS_N:
                case ApexParser.N_QUARTERS_AGO_N:
                case ApexParser.THIS_YEAR:
                case ApexParser.LAST_YEAR:
                case ApexParser.NEXT_YEAR:
                case ApexParser.NEXT_N_YEARS_N:
                case ApexParser.LAST_N_YEARS_N:
                case ApexParser.N_YEARS_AGO_N:
                case ApexParser.THIS_FISCAL_QUARTER:
                case ApexParser.LAST_FISCAL_QUARTER:
                case ApexParser.NEXT_FISCAL_QUARTER:
                case ApexParser.NEXT_N_FISCAL_QUARTERS_N:
                case ApexParser.LAST_N_FISCAL_QUARTERS_N:
                case ApexParser.N_FISCAL_QUARTERS_AGO_N:
                case ApexParser.THIS_FISCAL_YEAR:
                case ApexParser.LAST_FISCAL_YEAR:
                case ApexParser.NEXT_FISCAL_YEAR:
                case ApexParser.NEXT_N_FISCAL_YEARS_N:
                case ApexParser.LAST_N_FISCAL_YEARS_N:
                case ApexParser.N_FISCAL_YEARS_AGO_N:
                case ApexParser.IntegralCurrencyLiteral:
                case ApexParser.FIND:
                case ApexParser.EMAIL:
                case ApexParser.NAME:
                case ApexParser.PHONE:
                case ApexParser.SIDEBAR:
                case ApexParser.FIELDS:
                case ApexParser.METADATA:
                case ApexParser.PRICEBOOKID:
                case ApexParser.NETWORK:
                case ApexParser.SNIPPET:
                case ApexParser.TARGET_LENGTH:
                case ApexParser.DIVISION:
                case ApexParser.RETURNING:
                case ApexParser.LISTVIEW:
                case ApexParser.Identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1057;
                        this.id();
                        this.state = 1058;
                        this.match(ApexParser.LPAREN);
                        this.state = 1060;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.SUPER - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.THIS - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.LIST - 34)) | (1 << (ApexParser.MAP - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)) | (1 << (ApexParser.FindLiteral - 162)) | (1 << (ApexParser.IntegerLiteral - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (ApexParser.LongLiteral - 194)) | (1 << (ApexParser.NumberLiteral - 194)) | (1 << (ApexParser.BooleanLiteral - 194)) | (1 << (ApexParser.StringLiteral - 194)) | (1 << (ApexParser.LPAREN - 194)) | (1 << (ApexParser.LBRACK - 194)) | (1 << (ApexParser.BANG - 194)) | (1 << (ApexParser.TILDE - 194)) | (1 << (ApexParser.INC - 194)) | (1 << (ApexParser.DEC - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (ApexParser.ADD - 226)) | (1 << (ApexParser.SUB - 226)) | (1 << (ApexParser.Identifier - 226)))) !== 0)) {
                            {
                                this.state = 1059;
                                this.expressionList();
                            }
                        }
                        this.state = 1062;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case ApexParser.THIS:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1064;
                        this.match(ApexParser.THIS);
                        this.state = 1065;
                        this.match(ApexParser.LPAREN);
                        this.state = 1067;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.SUPER - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.THIS - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.LIST - 34)) | (1 << (ApexParser.MAP - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)) | (1 << (ApexParser.FindLiteral - 162)) | (1 << (ApexParser.IntegerLiteral - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (ApexParser.LongLiteral - 194)) | (1 << (ApexParser.NumberLiteral - 194)) | (1 << (ApexParser.BooleanLiteral - 194)) | (1 << (ApexParser.StringLiteral - 194)) | (1 << (ApexParser.LPAREN - 194)) | (1 << (ApexParser.LBRACK - 194)) | (1 << (ApexParser.BANG - 194)) | (1 << (ApexParser.TILDE - 194)) | (1 << (ApexParser.INC - 194)) | (1 << (ApexParser.DEC - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (ApexParser.ADD - 226)) | (1 << (ApexParser.SUB - 226)) | (1 << (ApexParser.Identifier - 226)))) !== 0)) {
                            {
                                this.state = 1066;
                                this.expressionList();
                            }
                        }
                        this.state = 1069;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case ApexParser.SUPER:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1070;
                        this.match(ApexParser.SUPER);
                        this.state = 1071;
                        this.match(ApexParser.LPAREN);
                        this.state = 1073;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.SUPER - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.THIS - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.LIST - 34)) | (1 << (ApexParser.MAP - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)) | (1 << (ApexParser.FindLiteral - 162)) | (1 << (ApexParser.IntegerLiteral - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (ApexParser.LongLiteral - 194)) | (1 << (ApexParser.NumberLiteral - 194)) | (1 << (ApexParser.BooleanLiteral - 194)) | (1 << (ApexParser.StringLiteral - 194)) | (1 << (ApexParser.LPAREN - 194)) | (1 << (ApexParser.LBRACK - 194)) | (1 << (ApexParser.BANG - 194)) | (1 << (ApexParser.TILDE - 194)) | (1 << (ApexParser.INC - 194)) | (1 << (ApexParser.DEC - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (ApexParser.ADD - 226)) | (1 << (ApexParser.SUB - 226)) | (1 << (ApexParser.Identifier - 226)))) !== 0)) {
                            {
                                this.state = 1072;
                                this.expressionList();
                            }
                        }
                        this.state = 1075;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dotMethodCall() {
        let _localctx = new DotMethodCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 158, ApexParser.RULE_dotMethodCall);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1078;
                this.anyId();
                this.state = 1079;
                this.match(ApexParser.LPAREN);
                this.state = 1081;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.SUPER - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.THIS - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.LIST - 34)) | (1 << (ApexParser.MAP - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)) | (1 << (ApexParser.FindLiteral - 162)) | (1 << (ApexParser.IntegerLiteral - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (ApexParser.LongLiteral - 194)) | (1 << (ApexParser.NumberLiteral - 194)) | (1 << (ApexParser.BooleanLiteral - 194)) | (1 << (ApexParser.StringLiteral - 194)) | (1 << (ApexParser.LPAREN - 194)) | (1 << (ApexParser.LBRACK - 194)) | (1 << (ApexParser.BANG - 194)) | (1 << (ApexParser.TILDE - 194)) | (1 << (ApexParser.INC - 194)) | (1 << (ApexParser.DEC - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (ApexParser.ADD - 226)) | (1 << (ApexParser.SUB - 226)) | (1 << (ApexParser.Identifier - 226)))) !== 0)) {
                    {
                        this.state = 1080;
                        this.expressionList();
                    }
                }
                this.state = 1083;
                this.match(ApexParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    creator() {
        let _localctx = new CreatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 160, ApexParser.RULE_creator);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1085;
                this.createdName();
                this.state = 1091;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 98, this._ctx)) {
                    case 1:
                        {
                            this.state = 1086;
                            this.noRest();
                        }
                        break;
                    case 2:
                        {
                            this.state = 1087;
                            this.classCreatorRest();
                        }
                        break;
                    case 3:
                        {
                            this.state = 1088;
                            this.arrayCreatorRest();
                        }
                        break;
                    case 4:
                        {
                            this.state = 1089;
                            this.mapCreatorRest();
                        }
                        break;
                    case 5:
                        {
                            this.state = 1090;
                            this.setCreatorRest();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createdName() {
        let _localctx = new CreatedNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 162, ApexParser.RULE_createdName);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1093;
                this.idCreatedNamePair();
                this.state = 1098;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.DOT) {
                    {
                        {
                            this.state = 1094;
                            this.match(ApexParser.DOT);
                            this.state = 1095;
                            this.idCreatedNamePair();
                        }
                    }
                    this.state = 1100;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    idCreatedNamePair() {
        let _localctx = new IdCreatedNamePairContext(this._ctx, this.state);
        this.enterRule(_localctx, 164, ApexParser.RULE_idCreatedNamePair);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1101;
                this.anyId();
                this.state = 1106;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.LT) {
                    {
                        this.state = 1102;
                        this.match(ApexParser.LT);
                        this.state = 1103;
                        this.typeList();
                        this.state = 1104;
                        this.match(ApexParser.GT);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    noRest() {
        let _localctx = new NoRestContext(this._ctx, this.state);
        this.enterRule(_localctx, 166, ApexParser.RULE_noRest);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1108;
                this.match(ApexParser.LBRACE);
                this.state = 1109;
                this.match(ApexParser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    classCreatorRest() {
        let _localctx = new ClassCreatorRestContext(this._ctx, this.state);
        this.enterRule(_localctx, 168, ApexParser.RULE_classCreatorRest);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1111;
                this.arguments();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    arrayCreatorRest() {
        let _localctx = new ArrayCreatorRestContext(this._ctx, this.state);
        this.enterRule(_localctx, 170, ApexParser.RULE_arrayCreatorRest);
        try {
            this.state = 1122;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 102, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1113;
                        this.match(ApexParser.LBRACK);
                        this.state = 1114;
                        this.expression(0);
                        this.state = 1115;
                        this.match(ApexParser.RBRACK);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1117;
                        this.match(ApexParser.LBRACK);
                        this.state = 1118;
                        this.match(ApexParser.RBRACK);
                        this.state = 1120;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 101, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1119;
                                    this.arrayInitializer();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    mapCreatorRest() {
        let _localctx = new MapCreatorRestContext(this._ctx, this.state);
        this.enterRule(_localctx, 172, ApexParser.RULE_mapCreatorRest);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1124;
                this.match(ApexParser.LBRACE);
                this.state = 1125;
                this.mapCreatorRestPair();
                this.state = 1130;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.COMMA) {
                    {
                        {
                            this.state = 1126;
                            this.match(ApexParser.COMMA);
                            this.state = 1127;
                            this.mapCreatorRestPair();
                        }
                    }
                    this.state = 1132;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1133;
                this.match(ApexParser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    mapCreatorRestPair() {
        let _localctx = new MapCreatorRestPairContext(this._ctx, this.state);
        this.enterRule(_localctx, 174, ApexParser.RULE_mapCreatorRestPair);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1135;
                this.expression(0);
                this.state = 1136;
                this.match(ApexParser.MAPTO);
                this.state = 1137;
                this.expression(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    setCreatorRest() {
        let _localctx = new SetCreatorRestContext(this._ctx, this.state);
        this.enterRule(_localctx, 176, ApexParser.RULE_setCreatorRest);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1139;
                this.match(ApexParser.LBRACE);
                this.state = 1140;
                this.expression(0);
                this.state = 1145;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.COMMA) {
                    {
                        {
                            this.state = 1141;
                            this.match(ApexParser.COMMA);
                            {
                                this.state = 1142;
                                this.expression(0);
                            }
                        }
                    }
                    this.state = 1147;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1148;
                this.match(ApexParser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    arguments() {
        let _localctx = new ArgumentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 178, ApexParser.RULE_arguments);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1150;
                this.match(ApexParser.LPAREN);
                this.state = 1152;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.SUPER - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.THIS - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.LIST - 34)) | (1 << (ApexParser.MAP - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)) | (1 << (ApexParser.FindLiteral - 162)) | (1 << (ApexParser.IntegerLiteral - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (ApexParser.LongLiteral - 194)) | (1 << (ApexParser.NumberLiteral - 194)) | (1 << (ApexParser.BooleanLiteral - 194)) | (1 << (ApexParser.StringLiteral - 194)) | (1 << (ApexParser.LPAREN - 194)) | (1 << (ApexParser.LBRACK - 194)) | (1 << (ApexParser.BANG - 194)) | (1 << (ApexParser.TILDE - 194)) | (1 << (ApexParser.INC - 194)) | (1 << (ApexParser.DEC - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (ApexParser.ADD - 226)) | (1 << (ApexParser.SUB - 226)) | (1 << (ApexParser.Identifier - 226)))) !== 0)) {
                    {
                        this.state = 1151;
                        this.expressionList();
                    }
                }
                this.state = 1154;
                this.match(ApexParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    soqlLiteral() {
        let _localctx = new SoqlLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 180, ApexParser.RULE_soqlLiteral);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1156;
                this.match(ApexParser.LBRACK);
                this.state = 1157;
                this.query();
                this.state = 1158;
                this.match(ApexParser.RBRACK);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    query() {
        let _localctx = new QueryContext(this._ctx, this.state);
        this.enterRule(_localctx, 182, ApexParser.RULE_query);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1160;
                this.match(ApexParser.SELECT);
                this.state = 1161;
                this.selectList();
                this.state = 1162;
                this.match(ApexParser.FROM);
                this.state = 1163;
                this.fromNameList();
                this.state = 1165;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.USING) {
                    {
                        this.state = 1164;
                        this.usingScope();
                    }
                }
                this.state = 1168;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.WHERE) {
                    {
                        this.state = 1167;
                        this.whereClause();
                    }
                }
                this.state = 1171;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.WITH) {
                    {
                        this.state = 1170;
                        this.withClause();
                    }
                }
                this.state = 1174;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.GROUP) {
                    {
                        this.state = 1173;
                        this.groupByClause();
                    }
                }
                this.state = 1177;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.ORDER) {
                    {
                        this.state = 1176;
                        this.orderByClause();
                    }
                }
                this.state = 1180;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.LIMIT) {
                    {
                        this.state = 1179;
                        this.limitClause();
                    }
                }
                this.state = 1183;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.OFFSET) {
                    {
                        this.state = 1182;
                        this.offsetClause();
                    }
                }
                this.state = 1186;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.ALL) {
                    {
                        this.state = 1185;
                        this.allRowsClause();
                    }
                }
                this.state = 1188;
                this.forClauses();
                this.state = 1191;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.UPDATE) {
                    {
                        this.state = 1189;
                        this.match(ApexParser.UPDATE);
                        this.state = 1190;
                        this.updateList();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    subQuery() {
        let _localctx = new SubQueryContext(this._ctx, this.state);
        this.enterRule(_localctx, 184, ApexParser.RULE_subQuery);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1193;
                this.match(ApexParser.SELECT);
                this.state = 1194;
                this.subFieldList();
                this.state = 1195;
                this.match(ApexParser.FROM);
                this.state = 1196;
                this.fromNameList();
                this.state = 1198;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.WHERE) {
                    {
                        this.state = 1197;
                        this.whereClause();
                    }
                }
                this.state = 1201;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.ORDER) {
                    {
                        this.state = 1200;
                        this.orderByClause();
                    }
                }
                this.state = 1204;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.LIMIT) {
                    {
                        this.state = 1203;
                        this.limitClause();
                    }
                }
                this.state = 1206;
                this.forClauses();
                this.state = 1209;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.UPDATE) {
                    {
                        this.state = 1207;
                        this.match(ApexParser.UPDATE);
                        this.state = 1208;
                        this.updateList();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    selectList() {
        let _localctx = new SelectListContext(this._ctx, this.state);
        this.enterRule(_localctx, 186, ApexParser.RULE_selectList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1211;
                this.selectEntry();
                this.state = 1216;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.COMMA) {
                    {
                        {
                            this.state = 1212;
                            this.match(ApexParser.COMMA);
                            this.state = 1213;
                            this.selectEntry();
                        }
                    }
                    this.state = 1218;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    selectEntry() {
        let _localctx = new SelectEntryContext(this._ctx, this.state);
        this.enterRule(_localctx, 188, ApexParser.RULE_selectEntry);
        try {
            this.state = 1234;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 123, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1219;
                        this.fieldName();
                        this.state = 1221;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 120, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1220;
                                    this.soqlId();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1223;
                        this.soqlFunction();
                        this.state = 1225;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 121, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1224;
                                    this.soqlId();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1227;
                        this.match(ApexParser.LPAREN);
                        this.state = 1228;
                        this.subQuery();
                        this.state = 1229;
                        this.match(ApexParser.RPAREN);
                        this.state = 1231;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 122, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1230;
                                    this.soqlId();
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1233;
                        this.typeOf();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fieldName() {
        let _localctx = new FieldNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 190, ApexParser.RULE_fieldName);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1236;
                this.soqlId();
                this.state = 1241;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.DOT) {
                    {
                        {
                            this.state = 1237;
                            this.match(ApexParser.DOT);
                            this.state = 1238;
                            this.soqlId();
                        }
                    }
                    this.state = 1243;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fromNameList() {
        let _localctx = new FromNameListContext(this._ctx, this.state);
        this.enterRule(_localctx, 192, ApexParser.RULE_fromNameList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1244;
                this.fieldName();
                this.state = 1246;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 125, this._ctx)) {
                    case 1:
                        {
                            this.state = 1245;
                            this.soqlId();
                        }
                        break;
                }
                this.state = 1255;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.COMMA) {
                    {
                        {
                            this.state = 1248;
                            this.match(ApexParser.COMMA);
                            this.state = 1249;
                            this.fieldName();
                            this.state = 1251;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 126, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1250;
                                        this.soqlId();
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 1257;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    subFieldList() {
        let _localctx = new SubFieldListContext(this._ctx, this.state);
        this.enterRule(_localctx, 194, ApexParser.RULE_subFieldList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1258;
                this.subFieldEntry();
                this.state = 1263;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.COMMA) {
                    {
                        {
                            this.state = 1259;
                            this.match(ApexParser.COMMA);
                            this.state = 1260;
                            this.subFieldEntry();
                        }
                    }
                    this.state = 1265;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    subFieldEntry() {
        let _localctx = new SubFieldEntryContext(this._ctx, this.state);
        this.enterRule(_localctx, 196, ApexParser.RULE_subFieldEntry);
        try {
            this.state = 1281;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 132, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1266;
                        this.fieldName();
                        this.state = 1268;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 129, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1267;
                                    this.soqlId();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1270;
                        this.soqlFunction();
                        this.state = 1272;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 130, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1271;
                                    this.soqlId();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1274;
                        this.match(ApexParser.LPAREN);
                        this.state = 1275;
                        this.subQuery();
                        this.state = 1276;
                        this.match(ApexParser.RPAREN);
                        this.state = 1278;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 131, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1277;
                                    this.soqlId();
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1280;
                        this.typeOf();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    soqlFieldsParameter() {
        let _localctx = new SoqlFieldsParameterContext(this._ctx, this.state);
        this.enterRule(_localctx, 198, ApexParser.RULE_soqlFieldsParameter);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1283;
                _la = this._input.LA(1);
                if (!(((((_la - 90)) & ~0x1F) === 0 && ((1 << (_la - 90)) & ((1 << (ApexParser.ALL - 90)) | (1 << (ApexParser.CUSTOM - 90)) | (1 << (ApexParser.STANDARD - 90)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    soqlFunction() {
        let _localctx = new SoqlFunctionContext(this._ctx, this.state);
        this.enterRule(_localctx, 200, ApexParser.RULE_soqlFunction);
        try {
            this.state = 1412;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 133, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1285;
                        this.match(ApexParser.AVG);
                        this.state = 1286;
                        this.match(ApexParser.LPAREN);
                        this.state = 1287;
                        this.fieldName();
                        this.state = 1288;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1290;
                        this.match(ApexParser.COUNT);
                        this.state = 1291;
                        this.match(ApexParser.LPAREN);
                        this.state = 1292;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1293;
                        this.match(ApexParser.COUNT);
                        this.state = 1294;
                        this.match(ApexParser.LPAREN);
                        this.state = 1295;
                        this.fieldName();
                        this.state = 1296;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1298;
                        this.match(ApexParser.COUNT_DISTINCT);
                        this.state = 1299;
                        this.match(ApexParser.LPAREN);
                        this.state = 1300;
                        this.fieldName();
                        this.state = 1301;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1303;
                        this.match(ApexParser.MIN);
                        this.state = 1304;
                        this.match(ApexParser.LPAREN);
                        this.state = 1305;
                        this.fieldName();
                        this.state = 1306;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1308;
                        this.match(ApexParser.MAX);
                        this.state = 1309;
                        this.match(ApexParser.LPAREN);
                        this.state = 1310;
                        this.fieldName();
                        this.state = 1311;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1313;
                        this.match(ApexParser.SUM);
                        this.state = 1314;
                        this.match(ApexParser.LPAREN);
                        this.state = 1315;
                        this.fieldName();
                        this.state = 1316;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1318;
                        this.match(ApexParser.TOLABEL);
                        this.state = 1319;
                        this.match(ApexParser.LPAREN);
                        this.state = 1320;
                        this.fieldName();
                        this.state = 1321;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1323;
                        this.match(ApexParser.FORMAT);
                        this.state = 1324;
                        this.match(ApexParser.LPAREN);
                        this.state = 1325;
                        this.fieldName();
                        this.state = 1326;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1328;
                        this.match(ApexParser.CALENDAR_MONTH);
                        this.state = 1329;
                        this.match(ApexParser.LPAREN);
                        this.state = 1330;
                        this.dateFieldName();
                        this.state = 1331;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1333;
                        this.match(ApexParser.CALENDAR_QUARTER);
                        this.state = 1334;
                        this.match(ApexParser.LPAREN);
                        this.state = 1335;
                        this.dateFieldName();
                        this.state = 1336;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 1338;
                        this.match(ApexParser.CALENDAR_YEAR);
                        this.state = 1339;
                        this.match(ApexParser.LPAREN);
                        this.state = 1340;
                        this.dateFieldName();
                        this.state = 1341;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 1343;
                        this.match(ApexParser.DAY_IN_MONTH);
                        this.state = 1344;
                        this.match(ApexParser.LPAREN);
                        this.state = 1345;
                        this.dateFieldName();
                        this.state = 1346;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 1348;
                        this.match(ApexParser.DAY_IN_WEEK);
                        this.state = 1349;
                        this.match(ApexParser.LPAREN);
                        this.state = 1350;
                        this.dateFieldName();
                        this.state = 1351;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 1353;
                        this.match(ApexParser.DAY_IN_YEAR);
                        this.state = 1354;
                        this.match(ApexParser.LPAREN);
                        this.state = 1355;
                        this.dateFieldName();
                        this.state = 1356;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 16:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 1358;
                        this.match(ApexParser.DAY_ONLY);
                        this.state = 1359;
                        this.match(ApexParser.LPAREN);
                        this.state = 1360;
                        this.dateFieldName();
                        this.state = 1361;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 17:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 1363;
                        this.match(ApexParser.FISCAL_MONTH);
                        this.state = 1364;
                        this.match(ApexParser.LPAREN);
                        this.state = 1365;
                        this.dateFieldName();
                        this.state = 1366;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 18:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 1368;
                        this.match(ApexParser.FISCAL_QUARTER);
                        this.state = 1369;
                        this.match(ApexParser.LPAREN);
                        this.state = 1370;
                        this.dateFieldName();
                        this.state = 1371;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 19:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 1373;
                        this.match(ApexParser.FISCAL_YEAR);
                        this.state = 1374;
                        this.match(ApexParser.LPAREN);
                        this.state = 1375;
                        this.dateFieldName();
                        this.state = 1376;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 20:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 1378;
                        this.match(ApexParser.HOUR_IN_DAY);
                        this.state = 1379;
                        this.match(ApexParser.LPAREN);
                        this.state = 1380;
                        this.dateFieldName();
                        this.state = 1381;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 21:
                    this.enterOuterAlt(_localctx, 21);
                    {
                        this.state = 1383;
                        this.match(ApexParser.WEEK_IN_MONTH);
                        this.state = 1384;
                        this.match(ApexParser.LPAREN);
                        this.state = 1385;
                        this.dateFieldName();
                        this.state = 1386;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 22:
                    this.enterOuterAlt(_localctx, 22);
                    {
                        this.state = 1388;
                        this.match(ApexParser.WEEK_IN_YEAR);
                        this.state = 1389;
                        this.match(ApexParser.LPAREN);
                        this.state = 1390;
                        this.dateFieldName();
                        this.state = 1391;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 23:
                    this.enterOuterAlt(_localctx, 23);
                    {
                        this.state = 1393;
                        this.match(ApexParser.FIELDS);
                        this.state = 1394;
                        this.match(ApexParser.LPAREN);
                        this.state = 1395;
                        this.soqlFieldsParameter();
                        this.state = 1396;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 24:
                    this.enterOuterAlt(_localctx, 24);
                    {
                        this.state = 1398;
                        this.match(ApexParser.DISTANCE);
                        this.state = 1399;
                        this.match(ApexParser.LPAREN);
                        this.state = 1400;
                        this.locationValue();
                        this.state = 1401;
                        this.match(ApexParser.COMMA);
                        this.state = 1402;
                        this.locationValue();
                        this.state = 1403;
                        this.match(ApexParser.COMMA);
                        this.state = 1404;
                        this.match(ApexParser.StringLiteral);
                        this.state = 1405;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 25:
                    this.enterOuterAlt(_localctx, 25);
                    {
                        this.state = 1407;
                        this.match(ApexParser.GROUPING);
                        this.state = 1408;
                        this.match(ApexParser.LPAREN);
                        this.state = 1409;
                        this.fieldName();
                        this.state = 1410;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dateFieldName() {
        let _localctx = new DateFieldNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 202, ApexParser.RULE_dateFieldName);
        try {
            this.state = 1420;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 134, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1414;
                        this.match(ApexParser.CONVERT_TIMEZONE);
                        this.state = 1415;
                        this.match(ApexParser.LPAREN);
                        this.state = 1416;
                        this.fieldName();
                        this.state = 1417;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1419;
                        this.fieldName();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    locationValue() {
        let _localctx = new LocationValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 204, ApexParser.RULE_locationValue);
        try {
            this.state = 1431;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 135, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1422;
                        this.fieldName();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1423;
                        this.boundExpression();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1424;
                        this.match(ApexParser.GEOLOCATION);
                        this.state = 1425;
                        this.match(ApexParser.LPAREN);
                        this.state = 1426;
                        this.coordinateValue();
                        this.state = 1427;
                        this.match(ApexParser.COMMA);
                        this.state = 1428;
                        this.coordinateValue();
                        this.state = 1429;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    coordinateValue() {
        let _localctx = new CoordinateValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 206, ApexParser.RULE_coordinateValue);
        try {
            this.state = 1435;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexParser.IntegerLiteral:
                case ApexParser.NumberLiteral:
                case ApexParser.ADD:
                case ApexParser.SUB:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1433;
                        this.signedNumber();
                    }
                    break;
                case ApexParser.COLON:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1434;
                        this.boundExpression();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeOf() {
        let _localctx = new TypeOfContext(this._ctx, this.state);
        this.enterRule(_localctx, 208, ApexParser.RULE_typeOf);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1437;
                this.match(ApexParser.TYPEOF);
                this.state = 1438;
                this.fieldName();
                this.state = 1440;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1439;
                            this.whenClause();
                        }
                    }
                    this.state = 1442;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === ApexParser.WHEN);
                this.state = 1445;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.ELSE) {
                    {
                        this.state = 1444;
                        this.elseClause();
                    }
                }
                this.state = 1447;
                this.match(ApexParser.END);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    whenClause() {
        let _localctx = new WhenClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 210, ApexParser.RULE_whenClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1449;
                this.match(ApexParser.WHEN);
                this.state = 1450;
                this.fieldName();
                this.state = 1451;
                this.match(ApexParser.THEN);
                this.state = 1452;
                this.fieldNameList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    elseClause() {
        let _localctx = new ElseClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 212, ApexParser.RULE_elseClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1454;
                this.match(ApexParser.ELSE);
                this.state = 1455;
                this.fieldNameList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fieldNameList() {
        let _localctx = new FieldNameListContext(this._ctx, this.state);
        this.enterRule(_localctx, 214, ApexParser.RULE_fieldNameList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1457;
                this.fieldName();
                this.state = 1462;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.COMMA) {
                    {
                        {
                            this.state = 1458;
                            this.match(ApexParser.COMMA);
                            this.state = 1459;
                            this.fieldName();
                        }
                    }
                    this.state = 1464;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    usingScope() {
        let _localctx = new UsingScopeContext(this._ctx, this.state);
        this.enterRule(_localctx, 216, ApexParser.RULE_usingScope);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1465;
                this.match(ApexParser.USING);
                this.state = 1466;
                this.match(ApexParser.SCOPE);
                this.state = 1467;
                this.soqlId();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    whereClause() {
        let _localctx = new WhereClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 218, ApexParser.RULE_whereClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1469;
                this.match(ApexParser.WHERE);
                this.state = 1470;
                this.logicalExpression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    logicalExpression() {
        let _localctx = new LogicalExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 220, ApexParser.RULE_logicalExpression);
        let _la;
        try {
            this.state = 1490;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 142, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1472;
                        this.conditionalExpression();
                        this.state = 1477;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === ApexParser.SOQLAND) {
                            {
                                {
                                    this.state = 1473;
                                    this.match(ApexParser.SOQLAND);
                                    this.state = 1474;
                                    this.conditionalExpression();
                                }
                            }
                            this.state = 1479;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1480;
                        this.conditionalExpression();
                        this.state = 1485;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === ApexParser.SOQLOR) {
                            {
                                {
                                    this.state = 1481;
                                    this.match(ApexParser.SOQLOR);
                                    this.state = 1482;
                                    this.conditionalExpression();
                                }
                            }
                            this.state = 1487;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1488;
                        this.match(ApexParser.NOT);
                        this.state = 1489;
                        this.conditionalExpression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    conditionalExpression() {
        let _localctx = new ConditionalExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 222, ApexParser.RULE_conditionalExpression);
        try {
            this.state = 1497;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexParser.LPAREN:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1492;
                        this.match(ApexParser.LPAREN);
                        this.state = 1493;
                        this.logicalExpression();
                        this.state = 1494;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case ApexParser.AFTER:
                case ApexParser.BEFORE:
                case ApexParser.GET:
                case ApexParser.INHERITED:
                case ApexParser.INSTANCEOF:
                case ApexParser.SET:
                case ApexParser.SHARING:
                case ApexParser.SWITCH:
                case ApexParser.TRANSIENT:
                case ApexParser.TRIGGER:
                case ApexParser.WHEN:
                case ApexParser.WITH:
                case ApexParser.WITHOUT:
                case ApexParser.SYSTEM:
                case ApexParser.USER:
                case ApexParser.SELECT:
                case ApexParser.COUNT:
                case ApexParser.FROM:
                case ApexParser.AS:
                case ApexParser.USING:
                case ApexParser.SCOPE:
                case ApexParser.WHERE:
                case ApexParser.ORDER:
                case ApexParser.BY:
                case ApexParser.LIMIT:
                case ApexParser.SOQLAND:
                case ApexParser.SOQLOR:
                case ApexParser.NOT:
                case ApexParser.AVG:
                case ApexParser.COUNT_DISTINCT:
                case ApexParser.MIN:
                case ApexParser.MAX:
                case ApexParser.SUM:
                case ApexParser.TYPEOF:
                case ApexParser.END:
                case ApexParser.THEN:
                case ApexParser.LIKE:
                case ApexParser.IN:
                case ApexParser.INCLUDES:
                case ApexParser.EXCLUDES:
                case ApexParser.ASC:
                case ApexParser.DESC:
                case ApexParser.NULLS:
                case ApexParser.FIRST:
                case ApexParser.LAST:
                case ApexParser.GROUP:
                case ApexParser.ALL:
                case ApexParser.ROWS:
                case ApexParser.VIEW:
                case ApexParser.HAVING:
                case ApexParser.ROLLUP:
                case ApexParser.TOLABEL:
                case ApexParser.OFFSET:
                case ApexParser.DATA:
                case ApexParser.CATEGORY:
                case ApexParser.AT:
                case ApexParser.ABOVE:
                case ApexParser.BELOW:
                case ApexParser.ABOVE_OR_BELOW:
                case ApexParser.SECURITY_ENFORCED:
                case ApexParser.SYSTEM_MODE:
                case ApexParser.USER_MODE:
                case ApexParser.REFERENCE:
                case ApexParser.CUBE:
                case ApexParser.FORMAT:
                case ApexParser.TRACKING:
                case ApexParser.VIEWSTAT:
                case ApexParser.CUSTOM:
                case ApexParser.STANDARD:
                case ApexParser.DISTANCE:
                case ApexParser.GEOLOCATION:
                case ApexParser.GROUPING:
                case ApexParser.CALENDAR_MONTH:
                case ApexParser.CALENDAR_QUARTER:
                case ApexParser.CALENDAR_YEAR:
                case ApexParser.DAY_IN_MONTH:
                case ApexParser.DAY_IN_WEEK:
                case ApexParser.DAY_IN_YEAR:
                case ApexParser.DAY_ONLY:
                case ApexParser.FISCAL_MONTH:
                case ApexParser.FISCAL_QUARTER:
                case ApexParser.FISCAL_YEAR:
                case ApexParser.HOUR_IN_DAY:
                case ApexParser.WEEK_IN_MONTH:
                case ApexParser.WEEK_IN_YEAR:
                case ApexParser.CONVERT_TIMEZONE:
                case ApexParser.YESTERDAY:
                case ApexParser.TODAY:
                case ApexParser.TOMORROW:
                case ApexParser.LAST_WEEK:
                case ApexParser.THIS_WEEK:
                case ApexParser.NEXT_WEEK:
                case ApexParser.LAST_MONTH:
                case ApexParser.THIS_MONTH:
                case ApexParser.NEXT_MONTH:
                case ApexParser.LAST_90_DAYS:
                case ApexParser.NEXT_90_DAYS:
                case ApexParser.LAST_N_DAYS_N:
                case ApexParser.NEXT_N_DAYS_N:
                case ApexParser.N_DAYS_AGO_N:
                case ApexParser.NEXT_N_WEEKS_N:
                case ApexParser.LAST_N_WEEKS_N:
                case ApexParser.N_WEEKS_AGO_N:
                case ApexParser.NEXT_N_MONTHS_N:
                case ApexParser.LAST_N_MONTHS_N:
                case ApexParser.N_MONTHS_AGO_N:
                case ApexParser.THIS_QUARTER:
                case ApexParser.LAST_QUARTER:
                case ApexParser.NEXT_QUARTER:
                case ApexParser.NEXT_N_QUARTERS_N:
                case ApexParser.LAST_N_QUARTERS_N:
                case ApexParser.N_QUARTERS_AGO_N:
                case ApexParser.THIS_YEAR:
                case ApexParser.LAST_YEAR:
                case ApexParser.NEXT_YEAR:
                case ApexParser.NEXT_N_YEARS_N:
                case ApexParser.LAST_N_YEARS_N:
                case ApexParser.N_YEARS_AGO_N:
                case ApexParser.THIS_FISCAL_QUARTER:
                case ApexParser.LAST_FISCAL_QUARTER:
                case ApexParser.NEXT_FISCAL_QUARTER:
                case ApexParser.NEXT_N_FISCAL_QUARTERS_N:
                case ApexParser.LAST_N_FISCAL_QUARTERS_N:
                case ApexParser.N_FISCAL_QUARTERS_AGO_N:
                case ApexParser.THIS_FISCAL_YEAR:
                case ApexParser.LAST_FISCAL_YEAR:
                case ApexParser.NEXT_FISCAL_YEAR:
                case ApexParser.NEXT_N_FISCAL_YEARS_N:
                case ApexParser.LAST_N_FISCAL_YEARS_N:
                case ApexParser.N_FISCAL_YEARS_AGO_N:
                case ApexParser.IntegralCurrencyLiteral:
                case ApexParser.FIND:
                case ApexParser.EMAIL:
                case ApexParser.NAME:
                case ApexParser.PHONE:
                case ApexParser.SIDEBAR:
                case ApexParser.FIELDS:
                case ApexParser.METADATA:
                case ApexParser.PRICEBOOKID:
                case ApexParser.NETWORK:
                case ApexParser.SNIPPET:
                case ApexParser.TARGET_LENGTH:
                case ApexParser.DIVISION:
                case ApexParser.RETURNING:
                case ApexParser.LISTVIEW:
                case ApexParser.Identifier:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1496;
                        this.fieldExpression();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fieldExpression() {
        let _localctx = new FieldExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 224, ApexParser.RULE_fieldExpression);
        try {
            this.state = 1507;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 144, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1499;
                        this.fieldName();
                        this.state = 1500;
                        this.comparisonOperator();
                        this.state = 1501;
                        this.value();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1503;
                        this.soqlFunction();
                        this.state = 1504;
                        this.comparisonOperator();
                        this.state = 1505;
                        this.value();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    comparisonOperator() {
        let _localctx = new ComparisonOperatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 226, ApexParser.RULE_comparisonOperator);
        try {
            this.state = 1524;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 145, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1509;
                        this.match(ApexParser.ASSIGN);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1510;
                        this.match(ApexParser.NOTEQUAL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1511;
                        this.match(ApexParser.LT);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1512;
                        this.match(ApexParser.GT);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1513;
                        this.match(ApexParser.LT);
                        this.state = 1514;
                        this.match(ApexParser.ASSIGN);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1515;
                        this.match(ApexParser.GT);
                        this.state = 1516;
                        this.match(ApexParser.ASSIGN);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1517;
                        this.match(ApexParser.LESSANDGREATER);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1518;
                        this.match(ApexParser.LIKE);
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1519;
                        this.match(ApexParser.IN);
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1520;
                        this.match(ApexParser.NOT);
                        this.state = 1521;
                        this.match(ApexParser.IN);
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1522;
                        this.match(ApexParser.INCLUDES);
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 1523;
                        this.match(ApexParser.EXCLUDES);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    value() {
        let _localctx = new ValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 228, ApexParser.RULE_value);
        let _la;
        try {
            this.state = 1546;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 148, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1526;
                        this.match(ApexParser.NULL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1527;
                        this.match(ApexParser.BooleanLiteral);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1528;
                        this.signedNumber();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1529;
                        this.match(ApexParser.StringLiteral);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1530;
                        this.match(ApexParser.DateLiteral);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1531;
                        this.match(ApexParser.DateTimeLiteral);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1532;
                        this.dateFormula();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1533;
                        this.match(ApexParser.IntegralCurrencyLiteral);
                        this.state = 1538;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === ApexParser.DOT) {
                            {
                                this.state = 1534;
                                this.match(ApexParser.DOT);
                                this.state = 1536;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === ApexParser.IntegerLiteral) {
                                    {
                                        this.state = 1535;
                                        this.match(ApexParser.IntegerLiteral);
                                    }
                                }
                            }
                        }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1540;
                        this.match(ApexParser.LPAREN);
                        this.state = 1541;
                        this.subQuery();
                        this.state = 1542;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1544;
                        this.valueList();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1545;
                        this.boundExpression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    valueList() {
        let _localctx = new ValueListContext(this._ctx, this.state);
        this.enterRule(_localctx, 230, ApexParser.RULE_valueList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1548;
                this.match(ApexParser.LPAREN);
                this.state = 1549;
                this.value();
                this.state = 1554;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.COMMA) {
                    {
                        {
                            this.state = 1550;
                            this.match(ApexParser.COMMA);
                            this.state = 1551;
                            this.value();
                        }
                    }
                    this.state = 1556;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1557;
                this.match(ApexParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    signedNumber() {
        let _localctx = new SignedNumberContext(this._ctx, this.state);
        this.enterRule(_localctx, 232, ApexParser.RULE_signedNumber);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1560;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.ADD || _la === ApexParser.SUB) {
                    {
                        this.state = 1559;
                        _la = this._input.LA(1);
                        if (!(_la === ApexParser.ADD || _la === ApexParser.SUB)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1562;
                _la = this._input.LA(1);
                if (!(_la === ApexParser.IntegerLiteral || _la === ApexParser.NumberLiteral)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    withClause() {
        let _localctx = new WithClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 234, ApexParser.RULE_withClause);
        try {
            this.state = 1576;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 151, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1564;
                        this.match(ApexParser.WITH);
                        this.state = 1565;
                        this.match(ApexParser.DATA);
                        this.state = 1566;
                        this.match(ApexParser.CATEGORY);
                        this.state = 1567;
                        this.filteringExpression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1568;
                        this.match(ApexParser.WITH);
                        this.state = 1569;
                        this.match(ApexParser.SECURITY_ENFORCED);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1570;
                        this.match(ApexParser.WITH);
                        this.state = 1571;
                        this.match(ApexParser.SYSTEM_MODE);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1572;
                        this.match(ApexParser.WITH);
                        this.state = 1573;
                        this.match(ApexParser.USER_MODE);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1574;
                        this.match(ApexParser.WITH);
                        this.state = 1575;
                        this.logicalExpression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    filteringExpression() {
        let _localctx = new FilteringExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 236, ApexParser.RULE_filteringExpression);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1578;
                this.dataCategorySelection();
                this.state = 1583;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.AND) {
                    {
                        {
                            this.state = 1579;
                            this.match(ApexParser.AND);
                            this.state = 1580;
                            this.dataCategorySelection();
                        }
                    }
                    this.state = 1585;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dataCategorySelection() {
        let _localctx = new DataCategorySelectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 238, ApexParser.RULE_dataCategorySelection);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1586;
                this.soqlId();
                this.state = 1587;
                this.filteringSelector();
                this.state = 1588;
                this.dataCategoryName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dataCategoryName() {
        let _localctx = new DataCategoryNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 240, ApexParser.RULE_dataCategoryName);
        let _la;
        try {
            this.state = 1602;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexParser.AFTER:
                case ApexParser.BEFORE:
                case ApexParser.GET:
                case ApexParser.INHERITED:
                case ApexParser.INSTANCEOF:
                case ApexParser.SET:
                case ApexParser.SHARING:
                case ApexParser.SWITCH:
                case ApexParser.TRANSIENT:
                case ApexParser.TRIGGER:
                case ApexParser.WHEN:
                case ApexParser.WITH:
                case ApexParser.WITHOUT:
                case ApexParser.SYSTEM:
                case ApexParser.USER:
                case ApexParser.SELECT:
                case ApexParser.COUNT:
                case ApexParser.FROM:
                case ApexParser.AS:
                case ApexParser.USING:
                case ApexParser.SCOPE:
                case ApexParser.WHERE:
                case ApexParser.ORDER:
                case ApexParser.BY:
                case ApexParser.LIMIT:
                case ApexParser.SOQLAND:
                case ApexParser.SOQLOR:
                case ApexParser.NOT:
                case ApexParser.AVG:
                case ApexParser.COUNT_DISTINCT:
                case ApexParser.MIN:
                case ApexParser.MAX:
                case ApexParser.SUM:
                case ApexParser.TYPEOF:
                case ApexParser.END:
                case ApexParser.THEN:
                case ApexParser.LIKE:
                case ApexParser.IN:
                case ApexParser.INCLUDES:
                case ApexParser.EXCLUDES:
                case ApexParser.ASC:
                case ApexParser.DESC:
                case ApexParser.NULLS:
                case ApexParser.FIRST:
                case ApexParser.LAST:
                case ApexParser.GROUP:
                case ApexParser.ALL:
                case ApexParser.ROWS:
                case ApexParser.VIEW:
                case ApexParser.HAVING:
                case ApexParser.ROLLUP:
                case ApexParser.TOLABEL:
                case ApexParser.OFFSET:
                case ApexParser.DATA:
                case ApexParser.CATEGORY:
                case ApexParser.AT:
                case ApexParser.ABOVE:
                case ApexParser.BELOW:
                case ApexParser.ABOVE_OR_BELOW:
                case ApexParser.SECURITY_ENFORCED:
                case ApexParser.SYSTEM_MODE:
                case ApexParser.USER_MODE:
                case ApexParser.REFERENCE:
                case ApexParser.CUBE:
                case ApexParser.FORMAT:
                case ApexParser.TRACKING:
                case ApexParser.VIEWSTAT:
                case ApexParser.CUSTOM:
                case ApexParser.STANDARD:
                case ApexParser.DISTANCE:
                case ApexParser.GEOLOCATION:
                case ApexParser.GROUPING:
                case ApexParser.CALENDAR_MONTH:
                case ApexParser.CALENDAR_QUARTER:
                case ApexParser.CALENDAR_YEAR:
                case ApexParser.DAY_IN_MONTH:
                case ApexParser.DAY_IN_WEEK:
                case ApexParser.DAY_IN_YEAR:
                case ApexParser.DAY_ONLY:
                case ApexParser.FISCAL_MONTH:
                case ApexParser.FISCAL_QUARTER:
                case ApexParser.FISCAL_YEAR:
                case ApexParser.HOUR_IN_DAY:
                case ApexParser.WEEK_IN_MONTH:
                case ApexParser.WEEK_IN_YEAR:
                case ApexParser.CONVERT_TIMEZONE:
                case ApexParser.YESTERDAY:
                case ApexParser.TODAY:
                case ApexParser.TOMORROW:
                case ApexParser.LAST_WEEK:
                case ApexParser.THIS_WEEK:
                case ApexParser.NEXT_WEEK:
                case ApexParser.LAST_MONTH:
                case ApexParser.THIS_MONTH:
                case ApexParser.NEXT_MONTH:
                case ApexParser.LAST_90_DAYS:
                case ApexParser.NEXT_90_DAYS:
                case ApexParser.LAST_N_DAYS_N:
                case ApexParser.NEXT_N_DAYS_N:
                case ApexParser.N_DAYS_AGO_N:
                case ApexParser.NEXT_N_WEEKS_N:
                case ApexParser.LAST_N_WEEKS_N:
                case ApexParser.N_WEEKS_AGO_N:
                case ApexParser.NEXT_N_MONTHS_N:
                case ApexParser.LAST_N_MONTHS_N:
                case ApexParser.N_MONTHS_AGO_N:
                case ApexParser.THIS_QUARTER:
                case ApexParser.LAST_QUARTER:
                case ApexParser.NEXT_QUARTER:
                case ApexParser.NEXT_N_QUARTERS_N:
                case ApexParser.LAST_N_QUARTERS_N:
                case ApexParser.N_QUARTERS_AGO_N:
                case ApexParser.THIS_YEAR:
                case ApexParser.LAST_YEAR:
                case ApexParser.NEXT_YEAR:
                case ApexParser.NEXT_N_YEARS_N:
                case ApexParser.LAST_N_YEARS_N:
                case ApexParser.N_YEARS_AGO_N:
                case ApexParser.THIS_FISCAL_QUARTER:
                case ApexParser.LAST_FISCAL_QUARTER:
                case ApexParser.NEXT_FISCAL_QUARTER:
                case ApexParser.NEXT_N_FISCAL_QUARTERS_N:
                case ApexParser.LAST_N_FISCAL_QUARTERS_N:
                case ApexParser.N_FISCAL_QUARTERS_AGO_N:
                case ApexParser.THIS_FISCAL_YEAR:
                case ApexParser.LAST_FISCAL_YEAR:
                case ApexParser.NEXT_FISCAL_YEAR:
                case ApexParser.NEXT_N_FISCAL_YEARS_N:
                case ApexParser.LAST_N_FISCAL_YEARS_N:
                case ApexParser.N_FISCAL_YEARS_AGO_N:
                case ApexParser.IntegralCurrencyLiteral:
                case ApexParser.FIND:
                case ApexParser.EMAIL:
                case ApexParser.NAME:
                case ApexParser.PHONE:
                case ApexParser.SIDEBAR:
                case ApexParser.FIELDS:
                case ApexParser.METADATA:
                case ApexParser.PRICEBOOKID:
                case ApexParser.NETWORK:
                case ApexParser.SNIPPET:
                case ApexParser.TARGET_LENGTH:
                case ApexParser.DIVISION:
                case ApexParser.RETURNING:
                case ApexParser.LISTVIEW:
                case ApexParser.Identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1590;
                        this.soqlId();
                    }
                    break;
                case ApexParser.LPAREN:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1591;
                        this.match(ApexParser.LPAREN);
                        this.state = 1592;
                        this.soqlId();
                        this.state = 1597;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === ApexParser.COMMA) {
                            {
                                {
                                    this.state = 1593;
                                    this.match(ApexParser.COMMA);
                                    this.state = 1594;
                                    this.soqlId();
                                }
                            }
                            this.state = 1599;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1600;
                        this.match(ApexParser.LPAREN);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    filteringSelector() {
        let _localctx = new FilteringSelectorContext(this._ctx, this.state);
        this.enterRule(_localctx, 242, ApexParser.RULE_filteringSelector);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1604;
                _la = this._input.LA(1);
                if (!(((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & ((1 << (ApexParser.AT - 99)) | (1 << (ApexParser.ABOVE - 99)) | (1 << (ApexParser.BELOW - 99)) | (1 << (ApexParser.ABOVE_OR_BELOW - 99)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    groupByClause() {
        let _localctx = new GroupByClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 244, ApexParser.RULE_groupByClause);
        let _la;
        try {
            this.state = 1641;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 158, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1606;
                        this.match(ApexParser.GROUP);
                        this.state = 1607;
                        this.match(ApexParser.BY);
                        this.state = 1608;
                        this.selectList();
                        this.state = 1611;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === ApexParser.HAVING) {
                            {
                                this.state = 1609;
                                this.match(ApexParser.HAVING);
                                this.state = 1610;
                                this.logicalExpression();
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1613;
                        this.match(ApexParser.GROUP);
                        this.state = 1614;
                        this.match(ApexParser.BY);
                        this.state = 1615;
                        this.match(ApexParser.ROLLUP);
                        this.state = 1616;
                        this.match(ApexParser.LPAREN);
                        this.state = 1617;
                        this.fieldName();
                        this.state = 1622;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === ApexParser.COMMA) {
                            {
                                {
                                    this.state = 1618;
                                    this.match(ApexParser.COMMA);
                                    this.state = 1619;
                                    this.fieldName();
                                }
                            }
                            this.state = 1624;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1625;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1627;
                        this.match(ApexParser.GROUP);
                        this.state = 1628;
                        this.match(ApexParser.BY);
                        this.state = 1629;
                        this.match(ApexParser.CUBE);
                        this.state = 1630;
                        this.match(ApexParser.LPAREN);
                        this.state = 1631;
                        this.fieldName();
                        this.state = 1636;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === ApexParser.COMMA) {
                            {
                                {
                                    this.state = 1632;
                                    this.match(ApexParser.COMMA);
                                    this.state = 1633;
                                    this.fieldName();
                                }
                            }
                            this.state = 1638;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1639;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    orderByClause() {
        let _localctx = new OrderByClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 246, ApexParser.RULE_orderByClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1643;
                this.match(ApexParser.ORDER);
                this.state = 1644;
                this.match(ApexParser.BY);
                this.state = 1645;
                this.fieldOrderList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fieldOrderList() {
        let _localctx = new FieldOrderListContext(this._ctx, this.state);
        this.enterRule(_localctx, 248, ApexParser.RULE_fieldOrderList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1647;
                this.fieldOrder();
                this.state = 1652;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.COMMA) {
                    {
                        {
                            this.state = 1648;
                            this.match(ApexParser.COMMA);
                            this.state = 1649;
                            this.fieldOrder();
                        }
                    }
                    this.state = 1654;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fieldOrder() {
        let _localctx = new FieldOrderContext(this._ctx, this.state);
        this.enterRule(_localctx, 250, ApexParser.RULE_fieldOrder);
        let _la;
        try {
            this.state = 1671;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 164, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1655;
                        this.fieldName();
                        this.state = 1657;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === ApexParser.ASC || _la === ApexParser.DESC) {
                            {
                                this.state = 1656;
                                _la = this._input.LA(1);
                                if (!(_la === ApexParser.ASC || _la === ApexParser.DESC)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                            }
                        }
                        this.state = 1661;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === ApexParser.NULLS) {
                            {
                                this.state = 1659;
                                this.match(ApexParser.NULLS);
                                this.state = 1660;
                                _la = this._input.LA(1);
                                if (!(_la === ApexParser.FIRST || _la === ApexParser.LAST)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1663;
                        this.soqlFunction();
                        this.state = 1665;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === ApexParser.ASC || _la === ApexParser.DESC) {
                            {
                                this.state = 1664;
                                _la = this._input.LA(1);
                                if (!(_la === ApexParser.ASC || _la === ApexParser.DESC)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                            }
                        }
                        this.state = 1669;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === ApexParser.NULLS) {
                            {
                                this.state = 1667;
                                this.match(ApexParser.NULLS);
                                this.state = 1668;
                                _la = this._input.LA(1);
                                if (!(_la === ApexParser.FIRST || _la === ApexParser.LAST)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    limitClause() {
        let _localctx = new LimitClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 252, ApexParser.RULE_limitClause);
        try {
            this.state = 1677;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 165, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1673;
                        this.match(ApexParser.LIMIT);
                        this.state = 1674;
                        this.match(ApexParser.IntegerLiteral);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1675;
                        this.match(ApexParser.LIMIT);
                        this.state = 1676;
                        this.boundExpression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    offsetClause() {
        let _localctx = new OffsetClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 254, ApexParser.RULE_offsetClause);
        try {
            this.state = 1683;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 166, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1679;
                        this.match(ApexParser.OFFSET);
                        this.state = 1680;
                        this.match(ApexParser.IntegerLiteral);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1681;
                        this.match(ApexParser.OFFSET);
                        this.state = 1682;
                        this.boundExpression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    allRowsClause() {
        let _localctx = new AllRowsClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 256, ApexParser.RULE_allRowsClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1685;
                this.match(ApexParser.ALL);
                this.state = 1686;
                this.match(ApexParser.ROWS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    forClauses() {
        let _localctx = new ForClausesContext(this._ctx, this.state);
        this.enterRule(_localctx, 258, ApexParser.RULE_forClauses);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1692;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.FOR) {
                    {
                        {
                            this.state = 1688;
                            this.match(ApexParser.FOR);
                            this.state = 1689;
                            _la = this._input.LA(1);
                            if (!(_la === ApexParser.UPDATE || _la === ApexParser.VIEW || _la === ApexParser.REFERENCE)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    this.state = 1694;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    boundExpression() {
        let _localctx = new BoundExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 260, ApexParser.RULE_boundExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1695;
                this.match(ApexParser.COLON);
                this.state = 1696;
                this.expression(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dateFormula() {
        let _localctx = new DateFormulaContext(this._ctx, this.state);
        this.enterRule(_localctx, 262, ApexParser.RULE_dateFormula);
        try {
            this.state = 1784;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexParser.YESTERDAY:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1698;
                        this.match(ApexParser.YESTERDAY);
                    }
                    break;
                case ApexParser.TODAY:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1699;
                        this.match(ApexParser.TODAY);
                    }
                    break;
                case ApexParser.TOMORROW:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1700;
                        this.match(ApexParser.TOMORROW);
                    }
                    break;
                case ApexParser.LAST_WEEK:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1701;
                        this.match(ApexParser.LAST_WEEK);
                    }
                    break;
                case ApexParser.THIS_WEEK:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1702;
                        this.match(ApexParser.THIS_WEEK);
                    }
                    break;
                case ApexParser.NEXT_WEEK:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1703;
                        this.match(ApexParser.NEXT_WEEK);
                    }
                    break;
                case ApexParser.LAST_MONTH:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1704;
                        this.match(ApexParser.LAST_MONTH);
                    }
                    break;
                case ApexParser.THIS_MONTH:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1705;
                        this.match(ApexParser.THIS_MONTH);
                    }
                    break;
                case ApexParser.NEXT_MONTH:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1706;
                        this.match(ApexParser.NEXT_MONTH);
                    }
                    break;
                case ApexParser.LAST_90_DAYS:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1707;
                        this.match(ApexParser.LAST_90_DAYS);
                    }
                    break;
                case ApexParser.NEXT_90_DAYS:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1708;
                        this.match(ApexParser.NEXT_90_DAYS);
                    }
                    break;
                case ApexParser.LAST_N_DAYS_N:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 1709;
                        this.match(ApexParser.LAST_N_DAYS_N);
                        this.state = 1710;
                        this.match(ApexParser.COLON);
                        this.state = 1711;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.NEXT_N_DAYS_N:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 1712;
                        this.match(ApexParser.NEXT_N_DAYS_N);
                        this.state = 1713;
                        this.match(ApexParser.COLON);
                        this.state = 1714;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.N_DAYS_AGO_N:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 1715;
                        this.match(ApexParser.N_DAYS_AGO_N);
                        this.state = 1716;
                        this.match(ApexParser.COLON);
                        this.state = 1717;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.NEXT_N_WEEKS_N:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 1718;
                        this.match(ApexParser.NEXT_N_WEEKS_N);
                        this.state = 1719;
                        this.match(ApexParser.COLON);
                        this.state = 1720;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.LAST_N_WEEKS_N:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 1721;
                        this.match(ApexParser.LAST_N_WEEKS_N);
                        this.state = 1722;
                        this.match(ApexParser.COLON);
                        this.state = 1723;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.N_WEEKS_AGO_N:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 1724;
                        this.match(ApexParser.N_WEEKS_AGO_N);
                        this.state = 1725;
                        this.match(ApexParser.COLON);
                        this.state = 1726;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.NEXT_N_MONTHS_N:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 1727;
                        this.match(ApexParser.NEXT_N_MONTHS_N);
                        this.state = 1728;
                        this.match(ApexParser.COLON);
                        this.state = 1729;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.LAST_N_MONTHS_N:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 1730;
                        this.match(ApexParser.LAST_N_MONTHS_N);
                        this.state = 1731;
                        this.match(ApexParser.COLON);
                        this.state = 1732;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.N_MONTHS_AGO_N:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 1733;
                        this.match(ApexParser.N_MONTHS_AGO_N);
                        this.state = 1734;
                        this.match(ApexParser.COLON);
                        this.state = 1735;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.THIS_QUARTER:
                    this.enterOuterAlt(_localctx, 21);
                    {
                        this.state = 1736;
                        this.match(ApexParser.THIS_QUARTER);
                    }
                    break;
                case ApexParser.LAST_QUARTER:
                    this.enterOuterAlt(_localctx, 22);
                    {
                        this.state = 1737;
                        this.match(ApexParser.LAST_QUARTER);
                    }
                    break;
                case ApexParser.NEXT_QUARTER:
                    this.enterOuterAlt(_localctx, 23);
                    {
                        this.state = 1738;
                        this.match(ApexParser.NEXT_QUARTER);
                    }
                    break;
                case ApexParser.NEXT_N_QUARTERS_N:
                    this.enterOuterAlt(_localctx, 24);
                    {
                        this.state = 1739;
                        this.match(ApexParser.NEXT_N_QUARTERS_N);
                        this.state = 1740;
                        this.match(ApexParser.COLON);
                        this.state = 1741;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.LAST_N_QUARTERS_N:
                    this.enterOuterAlt(_localctx, 25);
                    {
                        this.state = 1742;
                        this.match(ApexParser.LAST_N_QUARTERS_N);
                        this.state = 1743;
                        this.match(ApexParser.COLON);
                        this.state = 1744;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.N_QUARTERS_AGO_N:
                    this.enterOuterAlt(_localctx, 26);
                    {
                        this.state = 1745;
                        this.match(ApexParser.N_QUARTERS_AGO_N);
                        this.state = 1746;
                        this.match(ApexParser.COLON);
                        this.state = 1747;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.THIS_YEAR:
                    this.enterOuterAlt(_localctx, 27);
                    {
                        this.state = 1748;
                        this.match(ApexParser.THIS_YEAR);
                    }
                    break;
                case ApexParser.LAST_YEAR:
                    this.enterOuterAlt(_localctx, 28);
                    {
                        this.state = 1749;
                        this.match(ApexParser.LAST_YEAR);
                    }
                    break;
                case ApexParser.NEXT_YEAR:
                    this.enterOuterAlt(_localctx, 29);
                    {
                        this.state = 1750;
                        this.match(ApexParser.NEXT_YEAR);
                    }
                    break;
                case ApexParser.NEXT_N_YEARS_N:
                    this.enterOuterAlt(_localctx, 30);
                    {
                        this.state = 1751;
                        this.match(ApexParser.NEXT_N_YEARS_N);
                        this.state = 1752;
                        this.match(ApexParser.COLON);
                        this.state = 1753;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.LAST_N_YEARS_N:
                    this.enterOuterAlt(_localctx, 31);
                    {
                        this.state = 1754;
                        this.match(ApexParser.LAST_N_YEARS_N);
                        this.state = 1755;
                        this.match(ApexParser.COLON);
                        this.state = 1756;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.N_YEARS_AGO_N:
                    this.enterOuterAlt(_localctx, 32);
                    {
                        this.state = 1757;
                        this.match(ApexParser.N_YEARS_AGO_N);
                        this.state = 1758;
                        this.match(ApexParser.COLON);
                        this.state = 1759;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.THIS_FISCAL_QUARTER:
                    this.enterOuterAlt(_localctx, 33);
                    {
                        this.state = 1760;
                        this.match(ApexParser.THIS_FISCAL_QUARTER);
                    }
                    break;
                case ApexParser.LAST_FISCAL_QUARTER:
                    this.enterOuterAlt(_localctx, 34);
                    {
                        this.state = 1761;
                        this.match(ApexParser.LAST_FISCAL_QUARTER);
                    }
                    break;
                case ApexParser.NEXT_FISCAL_QUARTER:
                    this.enterOuterAlt(_localctx, 35);
                    {
                        this.state = 1762;
                        this.match(ApexParser.NEXT_FISCAL_QUARTER);
                    }
                    break;
                case ApexParser.NEXT_N_FISCAL_QUARTERS_N:
                    this.enterOuterAlt(_localctx, 36);
                    {
                        this.state = 1763;
                        this.match(ApexParser.NEXT_N_FISCAL_QUARTERS_N);
                        this.state = 1764;
                        this.match(ApexParser.COLON);
                        this.state = 1765;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.LAST_N_FISCAL_QUARTERS_N:
                    this.enterOuterAlt(_localctx, 37);
                    {
                        this.state = 1766;
                        this.match(ApexParser.LAST_N_FISCAL_QUARTERS_N);
                        this.state = 1767;
                        this.match(ApexParser.COLON);
                        this.state = 1768;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.N_FISCAL_QUARTERS_AGO_N:
                    this.enterOuterAlt(_localctx, 38);
                    {
                        this.state = 1769;
                        this.match(ApexParser.N_FISCAL_QUARTERS_AGO_N);
                        this.state = 1770;
                        this.match(ApexParser.COLON);
                        this.state = 1771;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.THIS_FISCAL_YEAR:
                    this.enterOuterAlt(_localctx, 39);
                    {
                        this.state = 1772;
                        this.match(ApexParser.THIS_FISCAL_YEAR);
                    }
                    break;
                case ApexParser.LAST_FISCAL_YEAR:
                    this.enterOuterAlt(_localctx, 40);
                    {
                        this.state = 1773;
                        this.match(ApexParser.LAST_FISCAL_YEAR);
                    }
                    break;
                case ApexParser.NEXT_FISCAL_YEAR:
                    this.enterOuterAlt(_localctx, 41);
                    {
                        this.state = 1774;
                        this.match(ApexParser.NEXT_FISCAL_YEAR);
                    }
                    break;
                case ApexParser.NEXT_N_FISCAL_YEARS_N:
                    this.enterOuterAlt(_localctx, 42);
                    {
                        this.state = 1775;
                        this.match(ApexParser.NEXT_N_FISCAL_YEARS_N);
                        this.state = 1776;
                        this.match(ApexParser.COLON);
                        this.state = 1777;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.LAST_N_FISCAL_YEARS_N:
                    this.enterOuterAlt(_localctx, 43);
                    {
                        this.state = 1778;
                        this.match(ApexParser.LAST_N_FISCAL_YEARS_N);
                        this.state = 1779;
                        this.match(ApexParser.COLON);
                        this.state = 1780;
                        this.signedInteger();
                    }
                    break;
                case ApexParser.N_FISCAL_YEARS_AGO_N:
                    this.enterOuterAlt(_localctx, 44);
                    {
                        this.state = 1781;
                        this.match(ApexParser.N_FISCAL_YEARS_AGO_N);
                        this.state = 1782;
                        this.match(ApexParser.COLON);
                        this.state = 1783;
                        this.signedInteger();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    signedInteger() {
        let _localctx = new SignedIntegerContext(this._ctx, this.state);
        this.enterRule(_localctx, 264, ApexParser.RULE_signedInteger);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1787;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.ADD || _la === ApexParser.SUB) {
                    {
                        this.state = 1786;
                        _la = this._input.LA(1);
                        if (!(_la === ApexParser.ADD || _la === ApexParser.SUB)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1789;
                this.match(ApexParser.IntegerLiteral);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    soqlId() {
        let _localctx = new SoqlIdContext(this._ctx, this.state);
        this.enterRule(_localctx, 266, ApexParser.RULE_soqlId);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1791;
                this.id();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    soslLiteral() {
        let _localctx = new SoslLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 268, ApexParser.RULE_soslLiteral);
        try {
            this.state = 1803;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexParser.FindLiteral:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1793;
                        this.match(ApexParser.FindLiteral);
                        this.state = 1794;
                        this.soslClauses();
                        this.state = 1795;
                        this.match(ApexParser.RBRACK);
                    }
                    break;
                case ApexParser.LBRACK:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1797;
                        this.match(ApexParser.LBRACK);
                        this.state = 1798;
                        this.match(ApexParser.FIND);
                        this.state = 1799;
                        this.boundExpression();
                        this.state = 1800;
                        this.soslClauses();
                        this.state = 1801;
                        this.match(ApexParser.RBRACK);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    soslLiteralAlt() {
        let _localctx = new SoslLiteralAltContext(this._ctx, this.state);
        this.enterRule(_localctx, 270, ApexParser.RULE_soslLiteralAlt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1805;
                this.match(ApexParser.FindLiteralAlt);
                this.state = 1806;
                this.soslClauses();
                this.state = 1807;
                this.match(ApexParser.RBRACK);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    soslClauses() {
        let _localctx = new SoslClausesContext(this._ctx, this.state);
        this.enterRule(_localctx, 272, ApexParser.RULE_soslClauses);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1811;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.IN) {
                    {
                        this.state = 1809;
                        this.match(ApexParser.IN);
                        this.state = 1810;
                        this.searchGroup();
                    }
                }
                this.state = 1815;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.RETURNING) {
                    {
                        this.state = 1813;
                        this.match(ApexParser.RETURNING);
                        this.state = 1814;
                        this.fieldSpecList();
                    }
                }
                this.state = 1820;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexParser.WITH) {
                    {
                        {
                            this.state = 1817;
                            this.soslWithClause();
                        }
                    }
                    this.state = 1822;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1824;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.LIMIT) {
                    {
                        this.state = 1823;
                        this.limitClause();
                    }
                }
                this.state = 1828;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.UPDATE) {
                    {
                        this.state = 1826;
                        this.match(ApexParser.UPDATE);
                        this.state = 1827;
                        this.updateList();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    soslWithClause() {
        let _localctx = new SoslWithClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 274, ApexParser.RULE_soslWithClause);
        let _la;
        try {
            this.state = 1870;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 177, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1830;
                        this.match(ApexParser.WITH);
                        this.state = 1831;
                        this.match(ApexParser.DIVISION);
                        this.state = 1832;
                        this.match(ApexParser.ASSIGN);
                        this.state = 1833;
                        this.match(ApexParser.StringLiteral);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1834;
                        this.match(ApexParser.WITH);
                        this.state = 1835;
                        this.match(ApexParser.DATA);
                        this.state = 1836;
                        this.match(ApexParser.CATEGORY);
                        this.state = 1837;
                        this.filteringExpression();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1838;
                        this.match(ApexParser.WITH);
                        this.state = 1839;
                        this.match(ApexParser.SNIPPET);
                        this.state = 1845;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === ApexParser.LPAREN) {
                            {
                                this.state = 1840;
                                this.match(ApexParser.LPAREN);
                                this.state = 1841;
                                this.match(ApexParser.TARGET_LENGTH);
                                this.state = 1842;
                                this.match(ApexParser.ASSIGN);
                                this.state = 1843;
                                this.match(ApexParser.IntegerLiteral);
                                this.state = 1844;
                                this.match(ApexParser.RPAREN);
                            }
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1847;
                        this.match(ApexParser.WITH);
                        this.state = 1848;
                        this.match(ApexParser.NETWORK);
                        this.state = 1849;
                        this.match(ApexParser.IN);
                        this.state = 1850;
                        this.match(ApexParser.LPAREN);
                        this.state = 1851;
                        this.networkList();
                        this.state = 1852;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1854;
                        this.match(ApexParser.WITH);
                        this.state = 1855;
                        this.match(ApexParser.NETWORK);
                        this.state = 1856;
                        this.match(ApexParser.ASSIGN);
                        this.state = 1857;
                        this.match(ApexParser.StringLiteral);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1858;
                        this.match(ApexParser.WITH);
                        this.state = 1859;
                        this.match(ApexParser.PRICEBOOKID);
                        this.state = 1860;
                        this.match(ApexParser.ASSIGN);
                        this.state = 1861;
                        this.match(ApexParser.StringLiteral);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1862;
                        this.match(ApexParser.WITH);
                        this.state = 1863;
                        this.match(ApexParser.METADATA);
                        this.state = 1864;
                        this.match(ApexParser.ASSIGN);
                        this.state = 1865;
                        this.match(ApexParser.StringLiteral);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1866;
                        this.match(ApexParser.WITH);
                        this.state = 1867;
                        this.match(ApexParser.USER_MODE);
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1868;
                        this.match(ApexParser.WITH);
                        this.state = 1869;
                        this.match(ApexParser.SYSTEM_MODE);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    searchGroup() {
        let _localctx = new SearchGroupContext(this._ctx, this.state);
        this.enterRule(_localctx, 276, ApexParser.RULE_searchGroup);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1872;
                _la = this._input.LA(1);
                if (!(_la === ApexParser.ALL || ((((_la - 178)) & ~0x1F) === 0 && ((1 << (_la - 178)) & ((1 << (ApexParser.EMAIL - 178)) | (1 << (ApexParser.NAME - 178)) | (1 << (ApexParser.PHONE - 178)) | (1 << (ApexParser.SIDEBAR - 178)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1873;
                this.match(ApexParser.FIELDS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fieldSpecList() {
        let _localctx = new FieldSpecListContext(this._ctx, this.state);
        this.enterRule(_localctx, 278, ApexParser.RULE_fieldSpecList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1875;
                this.fieldSpec();
                this.state = 1880;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 178, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1876;
                                this.match(ApexParser.COMMA);
                                this.state = 1877;
                                this.fieldSpecList();
                            }
                        }
                    }
                    this.state = 1882;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 178, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fieldSpec() {
        let _localctx = new FieldSpecContext(this._ctx, this.state);
        this.enterRule(_localctx, 280, ApexParser.RULE_fieldSpec);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1883;
                this.soslId();
                this.state = 1909;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.LPAREN) {
                    {
                        this.state = 1884;
                        this.match(ApexParser.LPAREN);
                        this.state = 1885;
                        this.fieldList();
                        this.state = 1888;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === ApexParser.WHERE) {
                            {
                                this.state = 1886;
                                this.match(ApexParser.WHERE);
                                this.state = 1887;
                                this.logicalExpression();
                            }
                        }
                        this.state = 1894;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === ApexParser.USING) {
                            {
                                this.state = 1890;
                                this.match(ApexParser.USING);
                                this.state = 1891;
                                this.match(ApexParser.LISTVIEW);
                                this.state = 1892;
                                this.match(ApexParser.ASSIGN);
                                this.state = 1893;
                                this.soslId();
                            }
                        }
                        this.state = 1899;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === ApexParser.ORDER) {
                            {
                                this.state = 1896;
                                this.match(ApexParser.ORDER);
                                this.state = 1897;
                                this.match(ApexParser.BY);
                                this.state = 1898;
                                this.fieldOrderList();
                            }
                        }
                        this.state = 1902;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === ApexParser.LIMIT) {
                            {
                                this.state = 1901;
                                this.limitClause();
                            }
                        }
                        this.state = 1905;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === ApexParser.OFFSET) {
                            {
                                this.state = 1904;
                                this.offsetClause();
                            }
                        }
                        this.state = 1907;
                        this.match(ApexParser.RPAREN);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fieldList() {
        let _localctx = new FieldListContext(this._ctx, this.state);
        this.enterRule(_localctx, 282, ApexParser.RULE_fieldList);
        try {
            let _alt;
            this.state = 1924;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 186, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1911;
                        this.soslId();
                        this.state = 1916;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 185, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 1912;
                                        this.match(ApexParser.COMMA);
                                        this.state = 1913;
                                        this.fieldList();
                                    }
                                }
                            }
                            this.state = 1918;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 185, this._ctx);
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1919;
                        this.match(ApexParser.TOLABEL);
                        this.state = 1920;
                        this.match(ApexParser.LPAREN);
                        this.state = 1921;
                        this.soslId();
                        this.state = 1922;
                        this.match(ApexParser.RPAREN);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    updateList() {
        let _localctx = new UpdateListContext(this._ctx, this.state);
        this.enterRule(_localctx, 284, ApexParser.RULE_updateList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1926;
                this.updateType();
                this.state = 1929;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.COMMA) {
                    {
                        this.state = 1927;
                        this.match(ApexParser.COMMA);
                        this.state = 1928;
                        this.updateList();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    updateType() {
        let _localctx = new UpdateTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 286, ApexParser.RULE_updateType);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1931;
                _la = this._input.LA(1);
                if (!(_la === ApexParser.TRACKING || _la === ApexParser.VIEWSTAT)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    networkList() {
        let _localctx = new NetworkListContext(this._ctx, this.state);
        this.enterRule(_localctx, 288, ApexParser.RULE_networkList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1933;
                this.match(ApexParser.StringLiteral);
                this.state = 1936;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexParser.COMMA) {
                    {
                        this.state = 1934;
                        this.match(ApexParser.COMMA);
                        this.state = 1935;
                        this.networkList();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    soslId() {
        let _localctx = new SoslIdContext(this._ctx, this.state);
        this.enterRule(_localctx, 290, ApexParser.RULE_soslId);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1938;
                this.id();
                this.state = 1943;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 189, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1939;
                                this.match(ApexParser.DOT);
                                this.state = 1940;
                                this.soslId();
                            }
                        }
                    }
                    this.state = 1945;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 189, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    id() {
        let _localctx = new IdContext(this._ctx, this.state);
        this.enterRule(_localctx, 292, ApexParser.RULE_id);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1946;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.SET - 34)) | (1 << (ApexParser.SHARING - 34)) | (1 << (ApexParser.SWITCH - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.TRIGGER - 34)) | (1 << (ApexParser.WHEN - 34)) | (1 << (ApexParser.WITH - 34)) | (1 << (ApexParser.WITHOUT - 34)) | (1 << (ApexParser.SYSTEM - 34)) | (1 << (ApexParser.USER - 34)) | (1 << (ApexParser.SELECT - 34)) | (1 << (ApexParser.COUNT - 34)) | (1 << (ApexParser.FROM - 34)) | (1 << (ApexParser.AS - 34)) | (1 << (ApexParser.USING - 34)) | (1 << (ApexParser.SCOPE - 34)) | (1 << (ApexParser.WHERE - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.ORDER - 66)) | (1 << (ApexParser.BY - 66)) | (1 << (ApexParser.LIMIT - 66)) | (1 << (ApexParser.SOQLAND - 66)) | (1 << (ApexParser.SOQLOR - 66)) | (1 << (ApexParser.NOT - 66)) | (1 << (ApexParser.AVG - 66)) | (1 << (ApexParser.COUNT_DISTINCT - 66)) | (1 << (ApexParser.MIN - 66)) | (1 << (ApexParser.MAX - 66)) | (1 << (ApexParser.SUM - 66)) | (1 << (ApexParser.TYPEOF - 66)) | (1 << (ApexParser.END - 66)) | (1 << (ApexParser.THEN - 66)) | (1 << (ApexParser.LIKE - 66)) | (1 << (ApexParser.IN - 66)) | (1 << (ApexParser.INCLUDES - 66)) | (1 << (ApexParser.EXCLUDES - 66)) | (1 << (ApexParser.ASC - 66)) | (1 << (ApexParser.DESC - 66)) | (1 << (ApexParser.NULLS - 66)) | (1 << (ApexParser.FIRST - 66)) | (1 << (ApexParser.LAST - 66)) | (1 << (ApexParser.GROUP - 66)) | (1 << (ApexParser.ALL - 66)) | (1 << (ApexParser.ROWS - 66)) | (1 << (ApexParser.VIEW - 66)) | (1 << (ApexParser.HAVING - 66)) | (1 << (ApexParser.ROLLUP - 66)) | (1 << (ApexParser.TOLABEL - 66)) | (1 << (ApexParser.OFFSET - 66)) | (1 << (ApexParser.DATA - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (ApexParser.CATEGORY - 98)) | (1 << (ApexParser.AT - 98)) | (1 << (ApexParser.ABOVE - 98)) | (1 << (ApexParser.BELOW - 98)) | (1 << (ApexParser.ABOVE_OR_BELOW - 98)) | (1 << (ApexParser.SECURITY_ENFORCED - 98)) | (1 << (ApexParser.SYSTEM_MODE - 98)) | (1 << (ApexParser.USER_MODE - 98)) | (1 << (ApexParser.REFERENCE - 98)) | (1 << (ApexParser.CUBE - 98)) | (1 << (ApexParser.FORMAT - 98)) | (1 << (ApexParser.TRACKING - 98)) | (1 << (ApexParser.VIEWSTAT - 98)) | (1 << (ApexParser.CUSTOM - 98)) | (1 << (ApexParser.STANDARD - 98)) | (1 << (ApexParser.DISTANCE - 98)) | (1 << (ApexParser.GEOLOCATION - 98)) | (1 << (ApexParser.GROUPING - 98)) | (1 << (ApexParser.CALENDAR_MONTH - 98)) | (1 << (ApexParser.CALENDAR_QUARTER - 98)) | (1 << (ApexParser.CALENDAR_YEAR - 98)) | (1 << (ApexParser.DAY_IN_MONTH - 98)) | (1 << (ApexParser.DAY_IN_WEEK - 98)) | (1 << (ApexParser.DAY_IN_YEAR - 98)) | (1 << (ApexParser.DAY_ONLY - 98)) | (1 << (ApexParser.FISCAL_MONTH - 98)) | (1 << (ApexParser.FISCAL_QUARTER - 98)) | (1 << (ApexParser.FISCAL_YEAR - 98)) | (1 << (ApexParser.HOUR_IN_DAY - 98)) | (1 << (ApexParser.WEEK_IN_MONTH - 98)) | (1 << (ApexParser.WEEK_IN_YEAR - 98)) | (1 << (ApexParser.CONVERT_TIMEZONE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (ApexParser.YESTERDAY - 130)) | (1 << (ApexParser.TODAY - 130)) | (1 << (ApexParser.TOMORROW - 130)) | (1 << (ApexParser.LAST_WEEK - 130)) | (1 << (ApexParser.THIS_WEEK - 130)) | (1 << (ApexParser.NEXT_WEEK - 130)) | (1 << (ApexParser.LAST_MONTH - 130)) | (1 << (ApexParser.THIS_MONTH - 130)) | (1 << (ApexParser.NEXT_MONTH - 130)) | (1 << (ApexParser.LAST_90_DAYS - 130)) | (1 << (ApexParser.NEXT_90_DAYS - 130)) | (1 << (ApexParser.LAST_N_DAYS_N - 130)) | (1 << (ApexParser.NEXT_N_DAYS_N - 130)) | (1 << (ApexParser.N_DAYS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 130)) | (1 << (ApexParser.LAST_N_WEEKS_N - 130)) | (1 << (ApexParser.N_WEEKS_AGO_N - 130)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 130)) | (1 << (ApexParser.LAST_N_MONTHS_N - 130)) | (1 << (ApexParser.N_MONTHS_AGO_N - 130)) | (1 << (ApexParser.THIS_QUARTER - 130)) | (1 << (ApexParser.LAST_QUARTER - 130)) | (1 << (ApexParser.NEXT_QUARTER - 130)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 130)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 130)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 130)) | (1 << (ApexParser.THIS_YEAR - 130)) | (1 << (ApexParser.LAST_YEAR - 130)) | (1 << (ApexParser.NEXT_YEAR - 130)) | (1 << (ApexParser.NEXT_N_YEARS_N - 130)) | (1 << (ApexParser.LAST_N_YEARS_N - 130)) | (1 << (ApexParser.N_YEARS_AGO_N - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (ApexParser.THIS_FISCAL_QUARTER - 162)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 162)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 162)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 162)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 162)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 162)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 162)) | (1 << (ApexParser.IntegralCurrencyLiteral - 162)) | (1 << (ApexParser.FIND - 162)) | (1 << (ApexParser.EMAIL - 162)) | (1 << (ApexParser.NAME - 162)) | (1 << (ApexParser.PHONE - 162)) | (1 << (ApexParser.SIDEBAR - 162)) | (1 << (ApexParser.FIELDS - 162)) | (1 << (ApexParser.METADATA - 162)) | (1 << (ApexParser.PRICEBOOKID - 162)) | (1 << (ApexParser.NETWORK - 162)) | (1 << (ApexParser.SNIPPET - 162)) | (1 << (ApexParser.TARGET_LENGTH - 162)) | (1 << (ApexParser.DIVISION - 162)) | (1 << (ApexParser.RETURNING - 162)) | (1 << (ApexParser.LISTVIEW - 162)))) !== 0) || _la === ApexParser.Identifier)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    anyId() {
        let _localctx = new AnyIdContext(this._ctx, this.state);
        this.enterRule(_localctx, 294, ApexParser.RULE_anyId);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1948;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.BREAK) | (1 << ApexParser.CATCH) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (ApexParser.RETURN - 32)) | (1 << (ApexParser.SET - 32)) | (1 << (ApexParser.SHARING - 32)) | (1 << (ApexParser.STATIC - 32)) | (1 << (ApexParser.SUPER - 32)) | (1 << (ApexParser.SWITCH - 32)) | (1 << (ApexParser.TESTMETHOD - 32)) | (1 << (ApexParser.THIS - 32)) | (1 << (ApexParser.THROW - 32)) | (1 << (ApexParser.TRANSIENT - 32)) | (1 << (ApexParser.TRIGGER - 32)) | (1 << (ApexParser.TRY - 32)) | (1 << (ApexParser.UNDELETE - 32)) | (1 << (ApexParser.UPDATE - 32)) | (1 << (ApexParser.UPSERT - 32)) | (1 << (ApexParser.VIRTUAL - 32)) | (1 << (ApexParser.WEBSERVICE - 32)) | (1 << (ApexParser.WHEN - 32)) | (1 << (ApexParser.WHILE - 32)) | (1 << (ApexParser.WITH - 32)) | (1 << (ApexParser.WITHOUT - 32)) | (1 << (ApexParser.LIST - 32)) | (1 << (ApexParser.MAP - 32)) | (1 << (ApexParser.SYSTEM - 32)) | (1 << (ApexParser.USER - 32)) | (1 << (ApexParser.SELECT - 32)) | (1 << (ApexParser.COUNT - 32)) | (1 << (ApexParser.FROM - 32)) | (1 << (ApexParser.AS - 32)) | (1 << (ApexParser.USING - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (ApexParser.SCOPE - 64)) | (1 << (ApexParser.WHERE - 64)) | (1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (ApexParser.OFFSET - 96)) | (1 << (ApexParser.DATA - 96)) | (1 << (ApexParser.CATEGORY - 96)) | (1 << (ApexParser.AT - 96)) | (1 << (ApexParser.ABOVE - 96)) | (1 << (ApexParser.BELOW - 96)) | (1 << (ApexParser.ABOVE_OR_BELOW - 96)) | (1 << (ApexParser.SECURITY_ENFORCED - 96)) | (1 << (ApexParser.SYSTEM_MODE - 96)) | (1 << (ApexParser.USER_MODE - 96)) | (1 << (ApexParser.REFERENCE - 96)) | (1 << (ApexParser.CUBE - 96)) | (1 << (ApexParser.FORMAT - 96)) | (1 << (ApexParser.TRACKING - 96)) | (1 << (ApexParser.VIEWSTAT - 96)) | (1 << (ApexParser.CUSTOM - 96)) | (1 << (ApexParser.STANDARD - 96)) | (1 << (ApexParser.DISTANCE - 96)) | (1 << (ApexParser.GEOLOCATION - 96)) | (1 << (ApexParser.GROUPING - 96)) | (1 << (ApexParser.CALENDAR_MONTH - 96)) | (1 << (ApexParser.CALENDAR_QUARTER - 96)) | (1 << (ApexParser.CALENDAR_YEAR - 96)) | (1 << (ApexParser.DAY_IN_MONTH - 96)) | (1 << (ApexParser.DAY_IN_WEEK - 96)) | (1 << (ApexParser.DAY_IN_YEAR - 96)) | (1 << (ApexParser.DAY_ONLY - 96)) | (1 << (ApexParser.FISCAL_MONTH - 96)) | (1 << (ApexParser.FISCAL_QUARTER - 96)) | (1 << (ApexParser.FISCAL_YEAR - 96)) | (1 << (ApexParser.HOUR_IN_DAY - 96)) | (1 << (ApexParser.WEEK_IN_MONTH - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (ApexParser.WEEK_IN_YEAR - 128)) | (1 << (ApexParser.CONVERT_TIMEZONE - 128)) | (1 << (ApexParser.YESTERDAY - 128)) | (1 << (ApexParser.TODAY - 128)) | (1 << (ApexParser.TOMORROW - 128)) | (1 << (ApexParser.LAST_WEEK - 128)) | (1 << (ApexParser.THIS_WEEK - 128)) | (1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.N_DAYS_AGO_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.N_WEEKS_AGO_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.N_MONTHS_AGO_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.N_QUARTERS_AGO_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (ApexParser.LAST_N_YEARS_N - 160)) | (1 << (ApexParser.N_YEARS_AGO_N - 160)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 160)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 160)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 160)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 160)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 160)) | (1 << (ApexParser.N_FISCAL_QUARTERS_AGO_N - 160)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 160)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 160)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 160)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 160)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 160)) | (1 << (ApexParser.N_FISCAL_YEARS_AGO_N - 160)) | (1 << (ApexParser.IntegralCurrencyLiteral - 160)) | (1 << (ApexParser.FIND - 160)) | (1 << (ApexParser.EMAIL - 160)) | (1 << (ApexParser.NAME - 160)) | (1 << (ApexParser.PHONE - 160)) | (1 << (ApexParser.SIDEBAR - 160)) | (1 << (ApexParser.FIELDS - 160)) | (1 << (ApexParser.METADATA - 160)) | (1 << (ApexParser.PRICEBOOKID - 160)) | (1 << (ApexParser.NETWORK - 160)) | (1 << (ApexParser.SNIPPET - 160)) | (1 << (ApexParser.TARGET_LENGTH - 160)) | (1 << (ApexParser.DIVISION - 160)) | (1 << (ApexParser.RETURNING - 160)) | (1 << (ApexParser.LISTVIEW - 160)))) !== 0) || _la === ApexParser.Identifier)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    sempred(_localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 76:
                return this.expression_sempred(_localctx, predIndex);
        }
        return true;
    }
    expression_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return this.precpred(this._ctx, 14);
            case 1:
                return this.precpred(this._ctx, 13);
            case 2:
                return this.precpred(this._ctx, 12);
            case 3:
                return this.precpred(this._ctx, 11);
            case 4:
                return this.precpred(this._ctx, 9);
            case 5:
                return this.precpred(this._ctx, 8);
            case 6:
                return this.precpred(this._ctx, 7);
            case 7:
                return this.precpred(this._ctx, 6);
            case 8:
                return this.precpred(this._ctx, 5);
            case 9:
                return this.precpred(this._ctx, 4);
            case 10:
                return this.precpred(this._ctx, 3);
            case 11:
                return this.precpred(this._ctx, 2);
            case 12:
                return this.precpred(this._ctx, 1);
            case 13:
                return this.precpred(this._ctx, 23);
            case 14:
                return this.precpred(this._ctx, 22);
            case 15:
                return this.precpred(this._ctx, 17);
            case 16:
                return this.precpred(this._ctx, 10);
        }
        return true;
    }
    static get _ATN() {
        if (!ApexParser.__ATN) {
            ApexParser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(ApexParser._serializedATN));
        }
        return ApexParser.__ATN;
    }
}
exports.ApexParser = ApexParser;
ApexParser.ABSTRACT = 1;
ApexParser.AFTER = 2;
ApexParser.BEFORE = 3;
ApexParser.BREAK = 4;
ApexParser.CATCH = 5;
ApexParser.CLASS = 6;
ApexParser.CONTINUE = 7;
ApexParser.DELETE = 8;
ApexParser.DO = 9;
ApexParser.ELSE = 10;
ApexParser.ENUM = 11;
ApexParser.EXTENDS = 12;
ApexParser.FINAL = 13;
ApexParser.FINALLY = 14;
ApexParser.FOR = 15;
ApexParser.GET = 16;
ApexParser.GLOBAL = 17;
ApexParser.IF = 18;
ApexParser.IMPLEMENTS = 19;
ApexParser.INHERITED = 20;
ApexParser.INSERT = 21;
ApexParser.INSTANCEOF = 22;
ApexParser.INTERFACE = 23;
ApexParser.MERGE = 24;
ApexParser.NEW = 25;
ApexParser.NULL = 26;
ApexParser.ON = 27;
ApexParser.OVERRIDE = 28;
ApexParser.PRIVATE = 29;
ApexParser.PROTECTED = 30;
ApexParser.PUBLIC = 31;
ApexParser.RETURN = 32;
ApexParser.SYSTEMRUNAS = 33;
ApexParser.SET = 34;
ApexParser.SHARING = 35;
ApexParser.STATIC = 36;
ApexParser.SUPER = 37;
ApexParser.SWITCH = 38;
ApexParser.TESTMETHOD = 39;
ApexParser.THIS = 40;
ApexParser.THROW = 41;
ApexParser.TRANSIENT = 42;
ApexParser.TRIGGER = 43;
ApexParser.TRY = 44;
ApexParser.UNDELETE = 45;
ApexParser.UPDATE = 46;
ApexParser.UPSERT = 47;
ApexParser.VIRTUAL = 48;
ApexParser.VOID = 49;
ApexParser.WEBSERVICE = 50;
ApexParser.WHEN = 51;
ApexParser.WHILE = 52;
ApexParser.WITH = 53;
ApexParser.WITHOUT = 54;
ApexParser.LIST = 55;
ApexParser.MAP = 56;
ApexParser.SYSTEM = 57;
ApexParser.USER = 58;
ApexParser.SELECT = 59;
ApexParser.COUNT = 60;
ApexParser.FROM = 61;
ApexParser.AS = 62;
ApexParser.USING = 63;
ApexParser.SCOPE = 64;
ApexParser.WHERE = 65;
ApexParser.ORDER = 66;
ApexParser.BY = 67;
ApexParser.LIMIT = 68;
ApexParser.SOQLAND = 69;
ApexParser.SOQLOR = 70;
ApexParser.NOT = 71;
ApexParser.AVG = 72;
ApexParser.COUNT_DISTINCT = 73;
ApexParser.MIN = 74;
ApexParser.MAX = 75;
ApexParser.SUM = 76;
ApexParser.TYPEOF = 77;
ApexParser.END = 78;
ApexParser.THEN = 79;
ApexParser.LIKE = 80;
ApexParser.IN = 81;
ApexParser.INCLUDES = 82;
ApexParser.EXCLUDES = 83;
ApexParser.ASC = 84;
ApexParser.DESC = 85;
ApexParser.NULLS = 86;
ApexParser.FIRST = 87;
ApexParser.LAST = 88;
ApexParser.GROUP = 89;
ApexParser.ALL = 90;
ApexParser.ROWS = 91;
ApexParser.VIEW = 92;
ApexParser.HAVING = 93;
ApexParser.ROLLUP = 94;
ApexParser.TOLABEL = 95;
ApexParser.OFFSET = 96;
ApexParser.DATA = 97;
ApexParser.CATEGORY = 98;
ApexParser.AT = 99;
ApexParser.ABOVE = 100;
ApexParser.BELOW = 101;
ApexParser.ABOVE_OR_BELOW = 102;
ApexParser.SECURITY_ENFORCED = 103;
ApexParser.SYSTEM_MODE = 104;
ApexParser.USER_MODE = 105;
ApexParser.REFERENCE = 106;
ApexParser.CUBE = 107;
ApexParser.FORMAT = 108;
ApexParser.TRACKING = 109;
ApexParser.VIEWSTAT = 110;
ApexParser.CUSTOM = 111;
ApexParser.STANDARD = 112;
ApexParser.DISTANCE = 113;
ApexParser.GEOLOCATION = 114;
ApexParser.GROUPING = 115;
ApexParser.CALENDAR_MONTH = 116;
ApexParser.CALENDAR_QUARTER = 117;
ApexParser.CALENDAR_YEAR = 118;
ApexParser.DAY_IN_MONTH = 119;
ApexParser.DAY_IN_WEEK = 120;
ApexParser.DAY_IN_YEAR = 121;
ApexParser.DAY_ONLY = 122;
ApexParser.FISCAL_MONTH = 123;
ApexParser.FISCAL_QUARTER = 124;
ApexParser.FISCAL_YEAR = 125;
ApexParser.HOUR_IN_DAY = 126;
ApexParser.WEEK_IN_MONTH = 127;
ApexParser.WEEK_IN_YEAR = 128;
ApexParser.CONVERT_TIMEZONE = 129;
ApexParser.YESTERDAY = 130;
ApexParser.TODAY = 131;
ApexParser.TOMORROW = 132;
ApexParser.LAST_WEEK = 133;
ApexParser.THIS_WEEK = 134;
ApexParser.NEXT_WEEK = 135;
ApexParser.LAST_MONTH = 136;
ApexParser.THIS_MONTH = 137;
ApexParser.NEXT_MONTH = 138;
ApexParser.LAST_90_DAYS = 139;
ApexParser.NEXT_90_DAYS = 140;
ApexParser.LAST_N_DAYS_N = 141;
ApexParser.NEXT_N_DAYS_N = 142;
ApexParser.N_DAYS_AGO_N = 143;
ApexParser.NEXT_N_WEEKS_N = 144;
ApexParser.LAST_N_WEEKS_N = 145;
ApexParser.N_WEEKS_AGO_N = 146;
ApexParser.NEXT_N_MONTHS_N = 147;
ApexParser.LAST_N_MONTHS_N = 148;
ApexParser.N_MONTHS_AGO_N = 149;
ApexParser.THIS_QUARTER = 150;
ApexParser.LAST_QUARTER = 151;
ApexParser.NEXT_QUARTER = 152;
ApexParser.NEXT_N_QUARTERS_N = 153;
ApexParser.LAST_N_QUARTERS_N = 154;
ApexParser.N_QUARTERS_AGO_N = 155;
ApexParser.THIS_YEAR = 156;
ApexParser.LAST_YEAR = 157;
ApexParser.NEXT_YEAR = 158;
ApexParser.NEXT_N_YEARS_N = 159;
ApexParser.LAST_N_YEARS_N = 160;
ApexParser.N_YEARS_AGO_N = 161;
ApexParser.THIS_FISCAL_QUARTER = 162;
ApexParser.LAST_FISCAL_QUARTER = 163;
ApexParser.NEXT_FISCAL_QUARTER = 164;
ApexParser.NEXT_N_FISCAL_QUARTERS_N = 165;
ApexParser.LAST_N_FISCAL_QUARTERS_N = 166;
ApexParser.N_FISCAL_QUARTERS_AGO_N = 167;
ApexParser.THIS_FISCAL_YEAR = 168;
ApexParser.LAST_FISCAL_YEAR = 169;
ApexParser.NEXT_FISCAL_YEAR = 170;
ApexParser.NEXT_N_FISCAL_YEARS_N = 171;
ApexParser.LAST_N_FISCAL_YEARS_N = 172;
ApexParser.N_FISCAL_YEARS_AGO_N = 173;
ApexParser.DateLiteral = 174;
ApexParser.DateTimeLiteral = 175;
ApexParser.IntegralCurrencyLiteral = 176;
ApexParser.FIND = 177;
ApexParser.EMAIL = 178;
ApexParser.NAME = 179;
ApexParser.PHONE = 180;
ApexParser.SIDEBAR = 181;
ApexParser.FIELDS = 182;
ApexParser.METADATA = 183;
ApexParser.PRICEBOOKID = 184;
ApexParser.NETWORK = 185;
ApexParser.SNIPPET = 186;
ApexParser.TARGET_LENGTH = 187;
ApexParser.DIVISION = 188;
ApexParser.RETURNING = 189;
ApexParser.LISTVIEW = 190;
ApexParser.FindLiteral = 191;
ApexParser.FindLiteralAlt = 192;
ApexParser.IntegerLiteral = 193;
ApexParser.LongLiteral = 194;
ApexParser.NumberLiteral = 195;
ApexParser.BooleanLiteral = 196;
ApexParser.StringLiteral = 197;
ApexParser.NullLiteral = 198;
ApexParser.LPAREN = 199;
ApexParser.RPAREN = 200;
ApexParser.LBRACE = 201;
ApexParser.RBRACE = 202;
ApexParser.LBRACK = 203;
ApexParser.RBRACK = 204;
ApexParser.SEMI = 205;
ApexParser.COMMA = 206;
ApexParser.DOT = 207;
ApexParser.ASSIGN = 208;
ApexParser.GT = 209;
ApexParser.LT = 210;
ApexParser.BANG = 211;
ApexParser.TILDE = 212;
ApexParser.QUESTIONDOT = 213;
ApexParser.QUESTION = 214;
ApexParser.COLON = 215;
ApexParser.EQUAL = 216;
ApexParser.TRIPLEEQUAL = 217;
ApexParser.NOTEQUAL = 218;
ApexParser.LESSANDGREATER = 219;
ApexParser.TRIPLENOTEQUAL = 220;
ApexParser.AND = 221;
ApexParser.OR = 222;
ApexParser.COAL = 223;
ApexParser.INC = 224;
ApexParser.DEC = 225;
ApexParser.ADD = 226;
ApexParser.SUB = 227;
ApexParser.MUL = 228;
ApexParser.DIV = 229;
ApexParser.BITAND = 230;
ApexParser.BITOR = 231;
ApexParser.CARET = 232;
ApexParser.MAPTO = 233;
ApexParser.ADD_ASSIGN = 234;
ApexParser.SUB_ASSIGN = 235;
ApexParser.MUL_ASSIGN = 236;
ApexParser.DIV_ASSIGN = 237;
ApexParser.AND_ASSIGN = 238;
ApexParser.OR_ASSIGN = 239;
ApexParser.XOR_ASSIGN = 240;
ApexParser.LSHIFT_ASSIGN = 241;
ApexParser.RSHIFT_ASSIGN = 242;
ApexParser.URSHIFT_ASSIGN = 243;
ApexParser.ATSIGN = 244;
ApexParser.Identifier = 245;
ApexParser.WS = 246;
ApexParser.DOC_COMMENT = 247;
ApexParser.COMMENT = 248;
ApexParser.LINE_COMMENT = 249;
ApexParser.RULE_triggerUnit = 0;
ApexParser.RULE_triggerCase = 1;
ApexParser.RULE_triggerBlock = 2;
ApexParser.RULE_triggerBlockMember = 3;
ApexParser.RULE_compilationUnit = 4;
ApexParser.RULE_typeDeclaration = 5;
ApexParser.RULE_classDeclaration = 6;
ApexParser.RULE_enumDeclaration = 7;
ApexParser.RULE_enumConstants = 8;
ApexParser.RULE_interfaceDeclaration = 9;
ApexParser.RULE_typeList = 10;
ApexParser.RULE_classBody = 11;
ApexParser.RULE_interfaceBody = 12;
ApexParser.RULE_classBodyDeclaration = 13;
ApexParser.RULE_modifier = 14;
ApexParser.RULE_memberDeclaration = 15;
ApexParser.RULE_triggerMemberDeclaration = 16;
ApexParser.RULE_methodDeclaration = 17;
ApexParser.RULE_constructorDeclaration = 18;
ApexParser.RULE_fieldDeclaration = 19;
ApexParser.RULE_propertyDeclaration = 20;
ApexParser.RULE_interfaceMethodDeclaration = 21;
ApexParser.RULE_variableDeclarators = 22;
ApexParser.RULE_variableDeclarator = 23;
ApexParser.RULE_arrayInitializer = 24;
ApexParser.RULE_typeRef = 25;
ApexParser.RULE_arraySubscripts = 26;
ApexParser.RULE_typeName = 27;
ApexParser.RULE_typeArguments = 28;
ApexParser.RULE_formalParameters = 29;
ApexParser.RULE_formalParameterList = 30;
ApexParser.RULE_formalParameter = 31;
ApexParser.RULE_qualifiedName = 32;
ApexParser.RULE_literal = 33;
ApexParser.RULE_annotation = 34;
ApexParser.RULE_elementValuePairs = 35;
ApexParser.RULE_elementValuePair = 36;
ApexParser.RULE_elementValue = 37;
ApexParser.RULE_elementValueArrayInitializer = 38;
ApexParser.RULE_block = 39;
ApexParser.RULE_localVariableDeclarationStatement = 40;
ApexParser.RULE_localVariableDeclaration = 41;
ApexParser.RULE_statement = 42;
ApexParser.RULE_ifStatement = 43;
ApexParser.RULE_switchStatement = 44;
ApexParser.RULE_whenControl = 45;
ApexParser.RULE_whenValue = 46;
ApexParser.RULE_whenLiteral = 47;
ApexParser.RULE_forStatement = 48;
ApexParser.RULE_whileStatement = 49;
ApexParser.RULE_doWhileStatement = 50;
ApexParser.RULE_tryStatement = 51;
ApexParser.RULE_returnStatement = 52;
ApexParser.RULE_throwStatement = 53;
ApexParser.RULE_breakStatement = 54;
ApexParser.RULE_continueStatement = 55;
ApexParser.RULE_accessLevel = 56;
ApexParser.RULE_insertStatement = 57;
ApexParser.RULE_updateStatement = 58;
ApexParser.RULE_deleteStatement = 59;
ApexParser.RULE_undeleteStatement = 60;
ApexParser.RULE_upsertStatement = 61;
ApexParser.RULE_mergeStatement = 62;
ApexParser.RULE_runAsStatement = 63;
ApexParser.RULE_expressionStatement = 64;
ApexParser.RULE_propertyBlock = 65;
ApexParser.RULE_getter = 66;
ApexParser.RULE_setter = 67;
ApexParser.RULE_catchClause = 68;
ApexParser.RULE_finallyBlock = 69;
ApexParser.RULE_forControl = 70;
ApexParser.RULE_forInit = 71;
ApexParser.RULE_enhancedForControl = 72;
ApexParser.RULE_forUpdate = 73;
ApexParser.RULE_parExpression = 74;
ApexParser.RULE_expressionList = 75;
ApexParser.RULE_expression = 76;
ApexParser.RULE_primary = 77;
ApexParser.RULE_methodCall = 78;
ApexParser.RULE_dotMethodCall = 79;
ApexParser.RULE_creator = 80;
ApexParser.RULE_createdName = 81;
ApexParser.RULE_idCreatedNamePair = 82;
ApexParser.RULE_noRest = 83;
ApexParser.RULE_classCreatorRest = 84;
ApexParser.RULE_arrayCreatorRest = 85;
ApexParser.RULE_mapCreatorRest = 86;
ApexParser.RULE_mapCreatorRestPair = 87;
ApexParser.RULE_setCreatorRest = 88;
ApexParser.RULE_arguments = 89;
ApexParser.RULE_soqlLiteral = 90;
ApexParser.RULE_query = 91;
ApexParser.RULE_subQuery = 92;
ApexParser.RULE_selectList = 93;
ApexParser.RULE_selectEntry = 94;
ApexParser.RULE_fieldName = 95;
ApexParser.RULE_fromNameList = 96;
ApexParser.RULE_subFieldList = 97;
ApexParser.RULE_subFieldEntry = 98;
ApexParser.RULE_soqlFieldsParameter = 99;
ApexParser.RULE_soqlFunction = 100;
ApexParser.RULE_dateFieldName = 101;
ApexParser.RULE_locationValue = 102;
ApexParser.RULE_coordinateValue = 103;
ApexParser.RULE_typeOf = 104;
ApexParser.RULE_whenClause = 105;
ApexParser.RULE_elseClause = 106;
ApexParser.RULE_fieldNameList = 107;
ApexParser.RULE_usingScope = 108;
ApexParser.RULE_whereClause = 109;
ApexParser.RULE_logicalExpression = 110;
ApexParser.RULE_conditionalExpression = 111;
ApexParser.RULE_fieldExpression = 112;
ApexParser.RULE_comparisonOperator = 113;
ApexParser.RULE_value = 114;
ApexParser.RULE_valueList = 115;
ApexParser.RULE_signedNumber = 116;
ApexParser.RULE_withClause = 117;
ApexParser.RULE_filteringExpression = 118;
ApexParser.RULE_dataCategorySelection = 119;
ApexParser.RULE_dataCategoryName = 120;
ApexParser.RULE_filteringSelector = 121;
ApexParser.RULE_groupByClause = 122;
ApexParser.RULE_orderByClause = 123;
ApexParser.RULE_fieldOrderList = 124;
ApexParser.RULE_fieldOrder = 125;
ApexParser.RULE_limitClause = 126;
ApexParser.RULE_offsetClause = 127;
ApexParser.RULE_allRowsClause = 128;
ApexParser.RULE_forClauses = 129;
ApexParser.RULE_boundExpression = 130;
ApexParser.RULE_dateFormula = 131;
ApexParser.RULE_signedInteger = 132;
ApexParser.RULE_soqlId = 133;
ApexParser.RULE_soslLiteral = 134;
ApexParser.RULE_soslLiteralAlt = 135;
ApexParser.RULE_soslClauses = 136;
ApexParser.RULE_soslWithClause = 137;
ApexParser.RULE_searchGroup = 138;
ApexParser.RULE_fieldSpecList = 139;
ApexParser.RULE_fieldSpec = 140;
ApexParser.RULE_fieldList = 141;
ApexParser.RULE_updateList = 142;
ApexParser.RULE_updateType = 143;
ApexParser.RULE_networkList = 144;
ApexParser.RULE_soslId = 145;
ApexParser.RULE_id = 146;
ApexParser.RULE_anyId = 147;
// tslint:disable:no-trailing-whitespace
ApexParser.ruleNames = [
    "triggerUnit", "triggerCase", "triggerBlock", "triggerBlockMember", "compilationUnit",
    "typeDeclaration", "classDeclaration", "enumDeclaration", "enumConstants",
    "interfaceDeclaration", "typeList", "classBody", "interfaceBody", "classBodyDeclaration",
    "modifier", "memberDeclaration", "triggerMemberDeclaration", "methodDeclaration",
    "constructorDeclaration", "fieldDeclaration", "propertyDeclaration", "interfaceMethodDeclaration",
    "variableDeclarators", "variableDeclarator", "arrayInitializer", "typeRef",
    "arraySubscripts", "typeName", "typeArguments", "formalParameters", "formalParameterList",
    "formalParameter", "qualifiedName", "literal", "annotation", "elementValuePairs",
    "elementValuePair", "elementValue", "elementValueArrayInitializer", "block",
    "localVariableDeclarationStatement", "localVariableDeclaration", "statement",
    "ifStatement", "switchStatement", "whenControl", "whenValue", "whenLiteral",
    "forStatement", "whileStatement", "doWhileStatement", "tryStatement",
    "returnStatement", "throwStatement", "breakStatement", "continueStatement",
    "accessLevel", "insertStatement", "updateStatement", "deleteStatement",
    "undeleteStatement", "upsertStatement", "mergeStatement", "runAsStatement",
    "expressionStatement", "propertyBlock", "getter", "setter", "catchClause",
    "finallyBlock", "forControl", "forInit", "enhancedForControl", "forUpdate",
    "parExpression", "expressionList", "expression", "primary", "methodCall",
    "dotMethodCall", "creator", "createdName", "idCreatedNamePair", "noRest",
    "classCreatorRest", "arrayCreatorRest", "mapCreatorRest", "mapCreatorRestPair",
    "setCreatorRest", "arguments", "soqlLiteral", "query", "subQuery", "selectList",
    "selectEntry", "fieldName", "fromNameList", "subFieldList", "subFieldEntry",
    "soqlFieldsParameter", "soqlFunction", "dateFieldName", "locationValue",
    "coordinateValue", "typeOf", "whenClause", "elseClause", "fieldNameList",
    "usingScope", "whereClause", "logicalExpression", "conditionalExpression",
    "fieldExpression", "comparisonOperator", "value", "valueList", "signedNumber",
    "withClause", "filteringExpression", "dataCategorySelection", "dataCategoryName",
    "filteringSelector", "groupByClause", "orderByClause", "fieldOrderList",
    "fieldOrder", "limitClause", "offsetClause", "allRowsClause", "forClauses",
    "boundExpression", "dateFormula", "signedInteger", "soqlId", "soslLiteral",
    "soslLiteralAlt", "soslClauses", "soslWithClause", "searchGroup", "fieldSpecList",
    "fieldSpec", "fieldList", "updateList", "updateType", "networkList", "soslId",
    "id", "anyId",
];
ApexParser._LITERAL_NAMES = [
    undefined, "'abstract'", "'after'", "'before'", "'break'", "'catch'",
    "'class'", "'continue'", "'delete'", "'do'", "'else'", "'enum'", "'extends'",
    "'final'", "'finally'", "'for'", "'get'", "'global'", "'if'", "'implements'",
    "'inherited'", "'insert'", "'instanceof'", "'interface'", "'merge'", "'new'",
    "'null'", "'on'", "'override'", "'private'", "'protected'", "'public'",
    "'return'", "'system.runas'", "'set'", "'sharing'", "'static'", "'super'",
    "'switch'", "'testmethod'", "'this'", "'throw'", "'transient'", "'trigger'",
    "'try'", "'undelete'", "'update'", "'upsert'", "'virtual'", "'void'",
    "'webservice'", "'when'", "'while'", "'with'", "'without'", "'list'",
    "'map'", "'system'", "'user'", "'select'", "'count'", "'from'", "'as'",
    "'using'", "'scope'", "'where'", "'order'", "'by'", "'limit'", "'and'",
    "'or'", "'not'", "'avg'", "'count_distinct'", "'min'", "'max'", "'sum'",
    "'typeof'", "'end'", "'then'", "'like'", "'in'", "'includes'", "'excludes'",
    "'asc'", "'desc'", "'nulls'", "'first'", "'last'", "'group'", "'all'",
    "'rows'", "'view'", "'having'", "'rollup'", "'tolabel'", "'offset'", "'data'",
    "'category'", "'at'", "'above'", "'below'", "'above_or_below'", "'security_enforced'",
    "'system_mode'", "'user_mode'", "'reference'", "'cube'", "'format'", "'tracking'",
    "'viewstat'", "'custom'", "'standard'", "'distance'", "'geolocation'",
    "'grouping'", "'calendar_month'", "'calendar_quarter'", "'calendar_year'",
    "'day_in_month'", "'day_in_week'", "'day_in_year'", "'day_only'", "'fiscal_month'",
    "'fiscal_quarter'", "'fiscal_year'", "'hour_in_day'", "'week_in_month'",
    "'week_in_year'", "'converttimezone'", "'yesterday'", "'today'", "'tomorrow'",
    "'last_week'", "'this_week'", "'next_week'", "'last_month'", "'this_month'",
    "'next_month'", "'last_90_days'", "'next_90_days'", "'last_n_days'", "'next_n_days'",
    "'n_days_ago'", "'next_n_weeks'", "'last_n_weeks'", "'n_weeks_ago'", "'next_n_months'",
    "'last_n_months'", "'n_months_ago'", "'this_quarter'", "'last_quarter'",
    "'next_quarter'", "'next_n_quarters'", "'last_n_quarters'", "'n_quarters_ago'",
    "'this_year'", "'last_year'", "'next_year'", "'next_n_years'", "'last_n_years'",
    "'n_years_ago'", "'this_fiscal_quarter'", "'last_fiscal_quarter'", "'next_fiscal_quarter'",
    "'next_n_fiscal_quarters'", "'last_n_fiscal_quarters'", "'n_fiscal_quarters_ago'",
    "'this_fiscal_year'", "'last_fiscal_year'", "'next_fiscal_year'", "'next_n_fiscal_years'",
    "'last_n_fiscal_years'", "'n_fiscal_years_ago'", undefined, undefined,
    undefined, "'find'", "'email'", "'name'", "'phone'", "'sidebar'", "'fields'",
    "'metadata'", "'pricebookid'", "'network'", "'snippet'", "'target_length'",
    "'division'", "'returning'", "'listview'", undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, "'('", "')'", "'{'",
    "'}'", "'['", "']'", "';'", "','", "'.'", "'='", "'>'", "'<'", "'!'",
    "'~'", "'?.'", "'?'", "':'", "'=='", "'==='", "'!='", "'<>'", "'!=='",
    "'&&'", "'||'", "'??'", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", "'&'",
    "'|'", "'^'", "'=>'", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='",
    "'^='", "'<<='", "'>>='", "'>>>='", "'@'",
];
ApexParser._SYMBOLIC_NAMES = [
    undefined, "ABSTRACT", "AFTER", "BEFORE", "BREAK", "CATCH", "CLASS", "CONTINUE",
    "DELETE", "DO", "ELSE", "ENUM", "EXTENDS", "FINAL", "FINALLY", "FOR",
    "GET", "GLOBAL", "IF", "IMPLEMENTS", "INHERITED", "INSERT", "INSTANCEOF",
    "INTERFACE", "MERGE", "NEW", "NULL", "ON", "OVERRIDE", "PRIVATE", "PROTECTED",
    "PUBLIC", "RETURN", "SYSTEMRUNAS", "SET", "SHARING", "STATIC", "SUPER",
    "SWITCH", "TESTMETHOD", "THIS", "THROW", "TRANSIENT", "TRIGGER", "TRY",
    "UNDELETE", "UPDATE", "UPSERT", "VIRTUAL", "VOID", "WEBSERVICE", "WHEN",
    "WHILE", "WITH", "WITHOUT", "LIST", "MAP", "SYSTEM", "USER", "SELECT",
    "COUNT", "FROM", "AS", "USING", "SCOPE", "WHERE", "ORDER", "BY", "LIMIT",
    "SOQLAND", "SOQLOR", "NOT", "AVG", "COUNT_DISTINCT", "MIN", "MAX", "SUM",
    "TYPEOF", "END", "THEN", "LIKE", "IN", "INCLUDES", "EXCLUDES", "ASC",
    "DESC", "NULLS", "FIRST", "LAST", "GROUP", "ALL", "ROWS", "VIEW", "HAVING",
    "ROLLUP", "TOLABEL", "OFFSET", "DATA", "CATEGORY", "AT", "ABOVE", "BELOW",
    "ABOVE_OR_BELOW", "SECURITY_ENFORCED", "SYSTEM_MODE", "USER_MODE", "REFERENCE",
    "CUBE", "FORMAT", "TRACKING", "VIEWSTAT", "CUSTOM", "STANDARD", "DISTANCE",
    "GEOLOCATION", "GROUPING", "CALENDAR_MONTH", "CALENDAR_QUARTER", "CALENDAR_YEAR",
    "DAY_IN_MONTH", "DAY_IN_WEEK", "DAY_IN_YEAR", "DAY_ONLY", "FISCAL_MONTH",
    "FISCAL_QUARTER", "FISCAL_YEAR", "HOUR_IN_DAY", "WEEK_IN_MONTH", "WEEK_IN_YEAR",
    "CONVERT_TIMEZONE", "YESTERDAY", "TODAY", "TOMORROW", "LAST_WEEK", "THIS_WEEK",
    "NEXT_WEEK", "LAST_MONTH", "THIS_MONTH", "NEXT_MONTH", "LAST_90_DAYS",
    "NEXT_90_DAYS", "LAST_N_DAYS_N", "NEXT_N_DAYS_N", "N_DAYS_AGO_N", "NEXT_N_WEEKS_N",
    "LAST_N_WEEKS_N", "N_WEEKS_AGO_N", "NEXT_N_MONTHS_N", "LAST_N_MONTHS_N",
    "N_MONTHS_AGO_N", "THIS_QUARTER", "LAST_QUARTER", "NEXT_QUARTER", "NEXT_N_QUARTERS_N",
    "LAST_N_QUARTERS_N", "N_QUARTERS_AGO_N", "THIS_YEAR", "LAST_YEAR", "NEXT_YEAR",
    "NEXT_N_YEARS_N", "LAST_N_YEARS_N", "N_YEARS_AGO_N", "THIS_FISCAL_QUARTER",
    "LAST_FISCAL_QUARTER", "NEXT_FISCAL_QUARTER", "NEXT_N_FISCAL_QUARTERS_N",
    "LAST_N_FISCAL_QUARTERS_N", "N_FISCAL_QUARTERS_AGO_N", "THIS_FISCAL_YEAR",
    "LAST_FISCAL_YEAR", "NEXT_FISCAL_YEAR", "NEXT_N_FISCAL_YEARS_N", "LAST_N_FISCAL_YEARS_N",
    "N_FISCAL_YEARS_AGO_N", "DateLiteral", "DateTimeLiteral", "IntegralCurrencyLiteral",
    "FIND", "EMAIL", "NAME", "PHONE", "SIDEBAR", "FIELDS", "METADATA", "PRICEBOOKID",
    "NETWORK", "SNIPPET", "TARGET_LENGTH", "DIVISION", "RETURNING", "LISTVIEW",
    "FindLiteral", "FindLiteralAlt", "IntegerLiteral", "LongLiteral", "NumberLiteral",
    "BooleanLiteral", "StringLiteral", "NullLiteral", "LPAREN", "RPAREN",
    "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN",
    "GT", "LT", "BANG", "TILDE", "QUESTIONDOT", "QUESTION", "COLON", "EQUAL",
    "TRIPLEEQUAL", "NOTEQUAL", "LESSANDGREATER", "TRIPLENOTEQUAL", "AND",
    "OR", "COAL", "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR",
    "CARET", "MAPTO", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN",
    "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN",
    "URSHIFT_ASSIGN", "ATSIGN", "Identifier", "WS", "DOC_COMMENT", "COMMENT",
    "LINE_COMMENT",
];
ApexParser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(ApexParser._LITERAL_NAMES, ApexParser._SYMBOLIC_NAMES, []);
ApexParser._serializedATNSegments = 4;
ApexParser._serializedATNSegment0 = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\xFB\u07A1\x04" +
    "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
    "\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
    "\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
    "\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
    "\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
    "\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
    "#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
    "+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
    "4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
    "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
    "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
    "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
    "X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
    "`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
    "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
    "r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
    "{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
    "\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
    "\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
    "\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
    "\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
    "\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x07\x02" +
    "\u0133\n\x02\f\x02\x0E\x02\u0136\v\x02\x03\x02\x03\x02\x03\x02\x03\x02" +
    "\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x07\x04\u0141\n\x04\f\x04\x0E" +
    "\x04\u0144\v\x04\x03\x04\x03\x04\x03\x05\x07\x05\u0149\n\x05\f\x05\x0E" +
    "\x05\u014C\v\x05\x03\x05\x03\x05\x05\x05\u0150\n\x05\x03\x06\x03\x06\x03" +
    "\x06\x03\x07\x07\x07\u0156\n\x07\f\x07\x0E\x07\u0159\v\x07\x03\x07\x03" +
    "\x07\x07\x07\u015D\n\x07\f\x07\x0E\x07\u0160\v\x07\x03\x07\x03\x07\x07" +
    "\x07\u0164\n\x07\f\x07\x0E\x07\u0167\v\x07\x03\x07\x05\x07\u016A\n\x07" +
    "\x03\b\x03\b\x03\b\x03\b\x05\b\u0170\n\b\x03\b\x03\b\x05\b\u0174\n\b\x03" +
    "\b\x03\b\x03\t\x03\t\x03\t\x03\t\x05\t\u017C\n\t\x03\t\x03\t\x03\n\x03" +
    "\n\x03\n\x07\n\u0183\n\n\f\n\x0E\n\u0186\v\n\x03\v\x03\v\x03\v\x03\v\x05" +
    "\v\u018C\n\v\x03\v\x03\v\x03\f\x03\f\x03\f\x07\f\u0193\n\f\f\f\x0E\f\u0196" +
    "\v\f\x03\r\x03\r\x07\r\u019A\n\r\f\r\x0E\r\u019D\v\r\x03\r\x03\r\x03\x0E" +
    "\x03\x0E\x07\x0E\u01A3\n\x0E\f\x0E\x0E\x0E\u01A6\v\x0E\x03\x0E\x03\x0E" +
    "\x03\x0F\x03\x0F\x05\x0F\u01AC\n\x0F\x03\x0F\x03\x0F\x07\x0F\u01B0\n\x0F" +
    "\f\x0F\x0E\x0F\u01B3\v\x0F\x03\x0F\x05\x0F\u01B6\n\x0F\x03\x10\x03\x10" +
    "\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10" +
    "\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10" +
    "\u01CB\n\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x05" +
    "\x11\u01D4\n\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x05\x12" +
    "\u01DC\n\x12\x03\x13\x03\x13\x05\x13\u01E0\n\x13\x03\x13\x03\x13\x03\x13" +
    "\x03\x13\x05\x13\u01E6\n\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03" +
    "\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x07\x16\u01F4\n\x16" +
    "\f\x16\x0E\x16\u01F7\v\x16\x03\x16\x03\x16\x03\x17\x07\x17\u01FC\n\x17" +
    "\f\x17\x0E\x17\u01FF\v\x17\x03\x17\x03\x17\x05\x17\u0203\n\x17\x03\x17" +
    "\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x07\x18\u020C\n\x18\f" +
    "\x18\x0E\x18\u020F\v\x18\x03\x19\x03\x19\x03\x19\x05\x19\u0214\n\x19\x03" +
    "\x1A\x03\x1A\x03\x1A\x03\x1A\x07\x1A\u021A\n\x1A\f\x1A\x0E\x1A\u021D\v" +
    "\x1A\x03\x1A\x05\x1A\u0220\n\x1A\x05\x1A\u0222\n\x1A\x03\x1A\x03\x1A\x03" +
    "\x1B\x03\x1B\x03\x1B\x07\x1B\u0229\n\x1B\f\x1B\x0E\x1B\u022C\v\x1B\x03" +
    "\x1B\x03\x1B\x03\x1C\x03\x1C\x07\x1C\u0232\n\x1C\f\x1C\x0E\x1C\u0235\v" +
    "\x1C\x03\x1D\x03\x1D\x05\x1D\u0239\n\x1D\x03\x1D\x03\x1D\x05\x1D\u023D" +
    "\n\x1D\x03\x1D\x03\x1D\x05\x1D\u0241\n\x1D\x03\x1D\x03\x1D\x05\x1D\u0245" +
    "\n\x1D\x05\x1D\u0247\n\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1F\x03" +
    "\x1F\x05\x1F\u024F\n\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x07 \u0256\n " +
    "\f \x0E \u0259\v \x03!\x07!\u025C\n!\f!\x0E!\u025F\v!\x03!\x03!\x03!\x03" +
    "\"\x03\"\x03\"\x07\"\u0267\n\"\f\"\x0E\"\u026A\v\"\x03#\x03#\x03$\x03" +
    "$\x03$\x03$\x03$\x05$\u0273\n$\x03$\x05$\u0276\n$\x03%\x03%\x05%\u027A" +
    "\n%\x03%\x07%\u027D\n%\f%\x0E%\u0280\v%\x03&\x03&\x03&\x03&\x03\'\x03" +
    "\'\x03\'\x05\'\u0289\n\'\x03(\x03(\x03(\x03(\x07(\u028F\n(\f(\x0E(\u0292" +
    "\v(\x05(\u0294\n(\x03(\x05(\u0297\n(\x03(\x03(\x03)\x03)\x07)\u029D\n" +
    ")\f)\x0E)\u02A0\v)\x03)\x03)\x03*\x03*\x03*\x03+\x07+\u02A8\n+\f+\x0E" +
    "+\u02AB\v+\x03+\x03+\x03+\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03" +
    ",\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x05,\u02C4\n" +
    ",\x03-\x03-\x03-\x03-\x03-\x05-\u02CB\n-\x03.\x03.\x03.\x03.\x03.\x06" +
    ".\u02D2\n.\r.\x0E.\u02D3\x03.\x03.\x03/\x03/\x03/\x03/\x030\x030\x030" +
    "\x030\x070\u02E0\n0\f0\x0E0\u02E3\v0\x030\x030\x030\x050\u02E8\n0\x03" +
    "1\x071\u02EB\n1\f1\x0E1\u02EE\v1\x031\x031\x071\u02F2\n1\f1\x0E1\u02F5" +
    "\v1\x031\x031\x031\x031\x031\x031\x031\x031\x051\u02FF\n1\x032\x032\x03" +
    "2\x032\x032\x032\x052\u0307\n2\x033\x033\x033\x033\x053\u030D\n3\x034" +
    "\x034\x034\x034\x034\x034\x035\x035\x035\x065\u0318\n5\r5\x0E5\u0319\x03" +
    "5\x055\u031D\n5\x035\x055\u0320\n5\x036\x036\x056\u0324\n6\x036\x036\x03" +
    "7\x037\x037\x037\x038\x038\x038\x039\x039\x039\x03:\x03:\x03:\x03;\x03" +
    ";\x05;\u0337\n;\x03;\x03;\x03;\x03<\x03<\x05<\u033E\n<\x03<\x03<\x03<" +
    "\x03=\x03=\x05=\u0345\n=\x03=\x03=\x03=\x03>\x03>\x05>\u034C\n>\x03>\x03" +
    ">\x03>\x03?\x03?\x05?\u0353\n?\x03?\x03?\x05?\u0357\n?\x03?\x03?\x03@" +
    "\x03@\x05@\u035D\n@\x03@\x03@\x03@\x03@\x03A\x03A\x03A\x05A\u0366\nA\x03" +
    "A\x03A\x03A\x03B\x03B\x03B\x03C\x07C\u036F\nC\fC\x0EC\u0372\vC\x03C\x03" +
    "C\x05C\u0376\nC\x03D\x03D\x03D\x05D\u037B\nD\x03E\x03E\x03E\x05E\u0380" +
    "\nE\x03F\x03F\x03F\x07F\u0385\nF\fF\x0EF\u0388\vF\x03F\x03F\x03F\x03F" +
    "\x03F\x03G\x03G\x03G\x03H\x03H\x05H\u0394\nH\x03H\x03H\x05H\u0398\nH\x03" +
    "H\x03H\x05H\u039C\nH\x05H\u039E\nH\x03I\x03I\x05I\u03A2\nI\x03J\x03J\x03" +
    "J\x03J\x03J\x03K\x03K\x03L\x03L\x03L\x03L\x03M\x03M\x03M\x07M\u03B2\n" +
    "M\fM\x0EM\u03B5\vM\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03" +
    "N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x05N\u03C9\nN\x03N\x03N\x03N\x03" +
    "N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x05N\u03D9\nN\x03" +
    "N\x03N\x03N\x03N\x05N\u03DF\nN\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03" +
    "N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03" +
    "N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x05" +
    "N\u0404\nN\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x07N\u0410" +
    "\nN\fN\x0EN\u0413\vN\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03" +
    "O\x03O\x03O\x03O\x05O\u0422\nO\x03P\x03P\x03P\x05P\u0427\nP\x03P\x03P" +
    "\x03P\x03P\x03P\x05P\u042E\nP\x03P\x03P\x03P\x03P\x05P\u0434\nP\x03P\x05" +
    "P\u0437\nP\x03Q\x03Q\x03Q\x05Q\u043C\nQ\x03Q\x03Q\x03R\x03R\x03R\x03R" +
    "\x03R\x03R\x05R\u0446\nR\x03S\x03S\x03S\x07S\u044B\nS\fS\x0ES\u044E\v" +
    "S\x03T\x03T\x03T\x03T\x03T\x05T\u0455\nT\x03U\x03U\x03U\x03V\x03V\x03" +
    "W\x03W\x03W\x03W\x03W\x03W\x03W\x05W\u0463\nW\x05W\u0465\nW\x03X\x03X" +
    "\x03X\x03X\x07X\u046B\nX\fX\x0EX\u046E\vX\x03X\x03X\x03Y\x03Y\x03Y\x03" +
    "Y\x03Z\x03Z\x03Z\x03Z\x07Z\u047A\nZ\fZ\x0EZ\u047D\vZ\x03Z\x03Z\x03[\x03" +
    "[\x05[\u0483\n[\x03[\x03[\x03\\\x03\\\x03\\\x03\\\x03]\x03]\x03]\x03]" +
    "\x03]\x05]\u0490\n]\x03]\x05]\u0493\n]\x03]\x05]\u0496\n]\x03]\x05]\u0499" +
    "\n]\x03]\x05]\u049C\n]\x03]\x05]\u049F\n]\x03]\x05]\u04A2\n]\x03]\x05" +
    "]\u04A5\n]\x03]\x03]\x03]\x05]\u04AA\n]\x03^\x03^\x03^\x03^\x03^\x05^" +
    "\u04B1\n^\x03^\x05^\u04B4\n^\x03^\x05^\u04B7\n^\x03^\x03^\x03^\x05^\u04BC" +
    "\n^\x03_\x03_\x03_\x07_\u04C1\n_\f_\x0E_\u04C4\v_\x03`\x03`\x05`\u04C8" +
    "\n`\x03`\x03`\x05`\u04CC\n`\x03`\x03`\x03`\x03`\x05`\u04D2\n`\x03`\x05" +
    "`\u04D5\n`\x03a\x03a\x03a\x07a\u04DA\na\fa\x0Ea\u04DD\va\x03b\x03b\x05" +
    "b\u04E1\nb\x03b\x03b\x03b\x05b\u04E6\nb\x07b\u04E8\nb\fb\x0Eb\u04EB\v" +
    "b\x03c\x03c\x03c\x07c\u04F0\nc\fc\x0Ec\u04F3\vc\x03d\x03d\x05d\u04F7\n" +
    "d\x03d\x03d\x05d\u04FB\nd\x03d\x03d\x03d\x03d\x05d\u0501\nd\x03d\x05d" +
    "\u0504\nd\x03e\x03e\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f" +
    "\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03" +
    "f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03" +
    "f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03" +
    "f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03" +
    "f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03" +
    "f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03" +
    "f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03" +
    "f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03" +
    "f\x03f\x03f\x03f\x03f\x03f\x05f\u0587\nf\x03g\x03g\x03g\x03g\x03g\x03" +
    "g\x05g\u058F\ng\x03h\x03h\x03h\x03h\x03h\x03h\x03h\x03h\x03h\x05h\u059A" +
    "\nh\x03i\x03i\x05i\u059E\ni\x03j\x03j\x03j\x06j\u05A3\nj\rj\x0Ej\u05A4" +
    "\x03j\x05j\u05A8\nj\x03j\x03j\x03k\x03k\x03k\x03k\x03k\x03l\x03l\x03l" +
    "\x03m\x03m\x03m\x07m\u05B7\nm\fm\x0Em\u05BA\vm\x03n\x03n\x03n\x03n\x03" +
    "o\x03o\x03o\x03p\x03p\x03p\x07p\u05C6\np\fp\x0Ep\u05C9\vp\x03p\x03p\x03" +
    "p\x07p\u05CE\np\fp\x0Ep\u05D1\vp\x03p\x03p\x05p\u05D5\np\x03q\x03q\x03" +
    "q\x03q\x03q\x05q\u05DC\nq\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x05" +
    "r\u05E6\nr\x03s\x03s\x03s\x03s\x03s\x03s\x03s\x03s\x03s\x03s\x03s\x03" +
    "s\x03s\x03s\x03s\x05s\u05F7\ns\x03t\x03t\x03t\x03t\x03t\x03t\x03t\x03" +
    "t\x03t\x03t\x05t\u0603\nt\x05t\u0605\nt\x03t\x03t\x03t\x03t\x03t\x03t" +
    "\x05t\u060D\nt\x03u\x03u\x03u\x03u\x07u\u0613\nu\fu\x0Eu\u0616\vu\x03" +
    "u\x03u\x03v\x05v\u061B\nv\x03v\x03v\x03w\x03w\x03w\x03w\x03w\x03w\x03" +
    "w\x03w\x03w\x03w\x03w\x03w\x05w\u062B\nw\x03x\x03x\x03x\x07x\u0630\nx" +
    "\fx\x0Ex\u0633\vx\x03y\x03y\x03y\x03y\x03z\x03z\x03z\x03z\x03z\x07z\u063E" +
    "\nz\fz\x0Ez\u0641\vz\x03z\x03z\x05z\u0645\nz\x03{\x03{\x03|\x03|\x03|" +
    "\x03|\x03|\x05|\u064E\n|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x07|\u0657" +
    "\n|\f|\x0E|\u065A\v|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x07" +
    "|\u0665\n|\f|\x0E|\u0668\v|\x03|\x03|\x05|\u066C\n|\x03}\x03}\x03}\x03" +
    "}\x03~\x03~\x03~\x07~\u0675\n~\f~\x0E~\u0678\v~\x03\x7F\x03\x7F\x05\x7F" +
    "\u067C\n\x7F\x03\x7F\x03\x7F\x05\x7F\u0680\n\x7F\x03\x7F\x03\x7F\x05\x7F" +
    "\u0684\n\x7F\x03\x7F\x03\x7F\x05\x7F\u0688\n\x7F\x05\x7F\u068A\n\x7F\x03" +
    "\x80\x03\x80\x03\x80\x03\x80\x05\x80\u0690\n\x80\x03\x81\x03\x81\x03\x81" +
    "\x03\x81\x05\x81\u0696\n\x81\x03\x82\x03\x82\x03\x82\x03\x83\x03\x83\x07" +
    "\x83\u069D\n\x83\f\x83\x0E\x83\u06A0\v\x83\x03\x84\x03\x84\x03\x84\x03" +
    "\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03" +
    "\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03" +
    "\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03" +
    "\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03" +
    "\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03" +
    "\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03" +
    "\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03" +
    "\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03" +
    "\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03" +
    "\x85\x03\x85\x03\x85\x03\x85\x03\x85\x05\x85\u06FB\n\x85\x03\x86\x05\x86" +
    "\u06FE\n\x86\x03\x86\x03\x86\x03\x87\x03\x87\x03\x88\x03\x88\x03\x88\x03" +
    "\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x05\x88\u070E\n\x88" +
    "\x03\x89\x03\x89\x03\x89\x03\x89\x03\x8A\x03\x8A\x05\x8A\u0716\n\x8A\x03" +
    "\x8A\x03\x8A\x05\x8A\u071A\n\x8A\x03\x8A\x07\x8A\u071D\n\x8A\f\x8A\x0E" +
    "\x8A\u0720\v\x8A\x03\x8A\x05\x8A\u0723\n\x8A\x03\x8A\x03\x8A\x05\x8A\u0727" +
    "\n\x8A\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B" +
    "\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x05\x8B\u0738" +
    "\n\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B" +
    "\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B" +
    "\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x05\x8B\u0751\n\x8B\x03" +
    "\x8C\x03\x8C\x03\x8C\x03\x8D\x03\x8D\x03\x8D\x07\x8D\u0759\n\x8D\f\x8D" +
    "\x0E\x8D\u075C\v\x8D\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x05\x8E\u0763" +
    "\n\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x05\x8E\u0769\n\x8E\x03\x8E\x03" +
    "\x8E\x03\x8E\x05\x8E\u076E\n\x8E\x03\x8E\x05\x8E\u0771\n\x8E\x03\x8E\x05" +
    "\x8E\u0774\n\x8E\x03\x8E\x03\x8E\x05\x8E\u0778\n\x8E\x03\x8F\x03\x8F\x03" +
    "\x8F\x07\x8F\u077D\n\x8F\f\x8F\x0E\x8F\u0780\v\x8F\x03\x8F\x03\x8F\x03" +
    "\x8F\x03\x8F\x03\x8F\x05\x8F\u0787\n\x8F\x03\x90\x03\x90\x03\x90\x05\x90" +
    "\u078C\n\x90\x03\x91\x03\x91\x03\x92\x03\x92\x03\x92\x05\x92\u0793\n\x92" +
    "\x03\x93\x03\x93\x03\x93\x07\x93\u0798\n\x93\f\x93\x0E\x93\u079B\v\x93" +
    "\x03\x94\x03\x94\x03\x95\x03\x95\x03\x95\x02\x02\x03\x9A\x96\x02\x02\x04" +
    "\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02" +
    "\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02,\x02." +
    "\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02H\x02" +
    "J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02" +
    "f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02\x80" +
    "\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92" +
    "\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4" +
    "\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6" +
    "\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8" +
    "\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA" +
    "\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC" +
    "\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE" +
    "\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02\u010A\x02\u010C" +
    "\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02\u0118\x02\u011A" +
    "\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02\u0126\x02\u0128" +
    "\x02\x02\x19\x03\x02\x04\x05\x05\x02\n\n\x17\x17/0\x04\x02\x1C\x1C\xC3" +
    "\xC7\x03\x02\xE4\xE5\x03\x02;<\x03\x02\xE2\xE5\x03\x02\xD5\xD6\x03\x02" +
    "\xE6\xE7\x03\x02\xD3\xD4\x03\x02\xDA\xDE\x04\x02\xD2\xD2\xEC\xF5\x04\x02" +
    "\xD1\xD1\xD7\xD7\x03\x02\xE2\xE3\x04\x02\\\\qr\x04\x02\xC3\xC3\xC5\xC5" +
    "\x03\x02eh\x03\x02VW\x03\x02YZ\x05\x0200^^ll\x04\x02\\\\\xB4\xB7\x03\x02" +
    "op\x0E\x02\x04\x05\x12\x12\x16\x16\x18\x18$%((,-5578;\xAF\xB2\xC0\xF7" +
    "\xF7\x07\x02\x03\"$24\xAF\xB2\xC0\xF7\xF7\x02\u0882\x02\u012A\x03\x02" +
    "\x02\x02\x04\u013B\x03\x02\x02\x02\x06\u013E\x03\x02\x02\x02\b\u014F\x03" +
    "\x02\x02\x02\n\u0151\x03\x02\x02\x02\f\u0169\x03\x02\x02\x02\x0E\u016B" +
    "\x03\x02\x02\x02\x10\u0177\x03\x02\x02\x02\x12\u017F\x03\x02\x02\x02\x14" +
    "\u0187\x03\x02\x02\x02\x16\u018F\x03\x02\x02\x02\x18\u0197\x03\x02\x02" +
    "\x02\x1A\u01A0\x03\x02\x02\x02\x1C\u01B5\x03\x02\x02\x02\x1E\u01CA\x03" +
    "\x02\x02\x02 \u01D3\x03\x02\x02\x02\"\u01DB\x03\x02\x02\x02$\u01DF\x03" +
    "\x02\x02\x02&\u01E7\x03\x02\x02\x02(\u01EB\x03\x02\x02\x02*\u01EF\x03" +
    "\x02\x02\x02,\u01FD\x03\x02\x02\x02.\u0208\x03\x02\x02\x020\u0210\x03" +
    "\x02\x02\x022\u0215\x03\x02\x02\x024\u0225\x03\x02\x02\x026\u0233\x03" +
    "\x02\x02\x028\u0246\x03\x02\x02\x02:\u0248\x03\x02\x02\x02<\u024C\x03" +
    "\x02\x02\x02>\u0252\x03\x02\x02\x02@\u025D\x03\x02\x02\x02B\u0263\x03" +
    "\x02\x02\x02D\u026B\x03\x02\x02\x02F\u026D\x03\x02\x02\x02H\u0277\x03" +
    "\x02\x02\x02J\u0281\x03\x02\x02\x02L\u0288\x03\x02\x02\x02N\u028A\x03" +
    "\x02\x02\x02P\u029A\x03\x02\x02\x02R\u02A3\x03\x02\x02\x02T\u02A9\x03" +
    "\x02\x02\x02V\u02C3\x03\x02\x02\x02X\u02C5\x03\x02\x02\x02Z\u02CC\x03" +
    "\x02\x02\x02\\\u02D7\x03\x02\x02\x02^\u02E7\x03\x02\x02\x02`\u02FE\x03" +
    "\x02\x02\x02b\u0300\x03\x02\x02\x02d\u0308\x03\x02\x02\x02f\u030E\x03" +
    "\x02\x02\x02h\u0314\x03\x02\x02\x02j\u0321\x03\x02\x02\x02l\u0327\x03" +
    "\x02\x02\x02n\u032B\x03\x02\x02\x02p\u032E\x03\x02\x02\x02r\u0331\x03" +
    "\x02\x02\x02t\u0334\x03\x02\x02\x02v\u033B\x03\x02\x02\x02x\u0342\x03" +
    "\x02\x02\x02z\u0349\x03\x02\x02\x02|\u0350\x03\x02\x02\x02~\u035A\x03" +
    "\x02\x02\x02\x80\u0362\x03\x02\x02\x02\x82\u036A\x03\x02\x02\x02\x84\u0370" +
    "\x03\x02\x02";
ApexParser._serializedATNSegment1 = "\x02\x86\u0377\x03\x02\x02\x02\x88\u037C\x03\x02\x02\x02\x8A\u0381\x03" +
    "\x02\x02\x02\x8C\u038E\x03\x02\x02\x02\x8E\u039D\x03\x02\x02\x02\x90\u03A1" +
    "\x03\x02\x02\x02\x92\u03A3\x03\x02\x02\x02\x94\u03A8\x03\x02\x02\x02\x96" +
    "\u03AA\x03\x02\x02\x02\x98\u03AE\x03\x02\x02\x02\x9A\u03C8\x03\x02\x02" +
    "\x02\x9C\u0421\x03\x02\x02\x02\x9E\u0436\x03\x02\x02\x02\xA0\u0438\x03" +
    "\x02\x02\x02\xA2\u043F\x03\x02\x02\x02\xA4\u0447\x03\x02\x02\x02\xA6\u044F" +
    "\x03\x02\x02\x02\xA8\u0456\x03\x02\x02\x02\xAA\u0459\x03\x02\x02\x02\xAC" +
    "\u0464\x03\x02\x02\x02\xAE\u0466\x03\x02\x02\x02\xB0\u0471\x03\x02\x02" +
    "\x02\xB2\u0475\x03\x02\x02\x02\xB4\u0480\x03\x02\x02\x02\xB6\u0486\x03" +
    "\x02\x02\x02\xB8\u048A\x03\x02\x02\x02\xBA\u04AB\x03\x02\x02\x02\xBC\u04BD" +
    "\x03\x02\x02\x02\xBE\u04D4\x03\x02\x02\x02\xC0\u04D6\x03\x02\x02\x02\xC2" +
    "\u04DE\x03\x02\x02\x02\xC4\u04EC\x03\x02\x02\x02\xC6\u0503\x03\x02\x02" +
    "\x02\xC8\u0505\x03\x02\x02\x02\xCA\u0586\x03\x02\x02\x02\xCC\u058E\x03" +
    "\x02\x02\x02\xCE\u0599\x03\x02\x02\x02\xD0\u059D\x03\x02\x02\x02\xD2\u059F" +
    "\x03\x02\x02\x02\xD4\u05AB\x03\x02\x02\x02\xD6\u05B0\x03\x02\x02\x02\xD8" +
    "\u05B3\x03\x02\x02\x02\xDA\u05BB\x03\x02\x02\x02\xDC\u05BF\x03\x02\x02" +
    "\x02\xDE\u05D4\x03\x02\x02\x02\xE0\u05DB\x03\x02\x02\x02\xE2\u05E5\x03" +
    "\x02\x02\x02\xE4\u05F6\x03\x02\x02\x02\xE6\u060C\x03\x02\x02\x02\xE8\u060E" +
    "\x03\x02\x02\x02\xEA\u061A\x03\x02\x02\x02\xEC\u062A\x03\x02\x02\x02\xEE" +
    "\u062C\x03\x02\x02\x02\xF0\u0634\x03\x02\x02\x02\xF2\u0644\x03\x02\x02" +
    "\x02\xF4\u0646\x03\x02\x02\x02\xF6\u066B\x03\x02\x02\x02\xF8\u066D\x03" +
    "\x02\x02\x02\xFA\u0671\x03\x02\x02\x02\xFC\u0689\x03\x02\x02\x02\xFE\u068F" +
    "\x03\x02\x02\x02\u0100\u0695\x03\x02\x02\x02\u0102\u0697\x03\x02\x02\x02" +
    "\u0104\u069E\x03\x02\x02\x02\u0106\u06A1\x03\x02\x02\x02\u0108\u06FA\x03" +
    "\x02\x02\x02\u010A\u06FD\x03\x02\x02\x02\u010C\u0701\x03\x02\x02\x02\u010E" +
    "\u070D\x03\x02\x02\x02\u0110\u070F\x03\x02\x02\x02\u0112\u0715\x03\x02" +
    "\x02\x02\u0114\u0750\x03\x02\x02\x02\u0116\u0752\x03\x02\x02\x02\u0118" +
    "\u0755\x03\x02\x02\x02\u011A\u075D\x03\x02\x02\x02\u011C\u0786\x03\x02" +
    "\x02\x02\u011E\u0788\x03\x02\x02\x02\u0120\u078D\x03\x02\x02\x02\u0122" +
    "\u078F\x03\x02\x02\x02\u0124\u0794\x03\x02\x02\x02\u0126\u079C\x03\x02" +
    "\x02\x02\u0128\u079E\x03\x02\x02\x02\u012A\u012B\x07-\x02\x02\u012B\u012C" +
    "\x05\u0126\x94\x02\u012C\u012D\x07\x1D\x02\x02\u012D\u012E\x05\u0126\x94" +
    "\x02\u012E\u012F\x07\xC9\x02\x02\u012F\u0134\x05\x04\x03\x02\u0130\u0131" +
    "\x07\xD0\x02\x02\u0131\u0133\x05\x04\x03\x02\u0132\u0130\x03\x02\x02\x02" +
    "\u0133\u0136\x03\x02\x02\x02\u0134\u0132\x03\x02\x02\x02\u0134\u0135\x03" +
    "\x02\x02\x02\u0135\u0137\x03\x02\x02\x02\u0136\u0134\x03\x02\x02\x02\u0137" +
    "\u0138\x07\xCA\x02\x02\u0138\u0139\x05\x06\x04\x02\u0139\u013A\x07\x02" +
    "\x02\x03\u013A\x03\x03\x02\x02\x02\u013B\u013C\t\x02\x02\x02\u013C\u013D" +
    "\t\x03\x02\x02\u013D\x05\x03\x02\x02\x02\u013E\u0142\x07\xCB\x02\x02\u013F" +
    "\u0141\x05\b\x05\x02\u0140\u013F\x03\x02\x02\x02\u0141\u0144\x03\x02\x02" +
    "\x02\u0142\u0140\x03\x02\x02\x02\u0142\u0143\x03\x02\x02\x02\u0143\u0145" +
    "\x03\x02\x02\x02\u0144\u0142\x03\x02\x02\x02\u0145\u0146\x07\xCC\x02\x02" +
    "\u0146\x07\x03\x02\x02\x02\u0147\u0149\x05\x1E\x10\x02\u0148\u0147\x03" +
    "\x02\x02\x02\u0149\u014C\x03\x02\x02\x02\u014A\u0148\x03\x02\x02\x02\u014A" +
    "\u014B\x03\x02\x02\x02\u014B\u014D\x03\x02\x02\x02\u014C\u014A\x03\x02" +
    "\x02\x02\u014D\u0150\x05\"\x12\x02\u014E\u0150\x05V,\x02\u014F\u014A\x03" +
    "\x02\x02\x02\u014F\u014E\x03\x02\x02\x02\u0150\t\x03\x02\x02\x02\u0151" +
    "\u0152\x05\f\x07\x02\u0152\u0153\x07\x02\x02\x03\u0153\v\x03\x02\x02\x02" +
    "\u0154\u0156\x05\x1E\x10\x02\u0155\u0154\x03\x02\x02\x02\u0156\u0159\x03" +
    "\x02\x02\x02\u0157\u0155\x03\x02\x02\x02\u0157\u0158\x03\x02\x02\x02\u0158" +
    "\u015A\x03\x02\x02\x02\u0159\u0157\x03\x02\x02\x02\u015A\u016A\x05\x0E" +
    "\b\x02\u015B\u015D\x05\x1E\x10\x02\u015C\u015B\x03\x02\x02\x02\u015D\u0160" +
    "\x03\x02\x02\x02\u015E\u015C\x03\x02\x02\x02\u015E\u015F\x03\x02\x02\x02" +
    "\u015F\u0161\x03\x02\x02\x02\u0160\u015E\x03\x02\x02\x02\u0161\u016A\x05" +
    "\x10\t\x02\u0162\u0164\x05\x1E\x10\x02\u0163\u0162\x03\x02\x02\x02\u0164" +
    "\u0167\x03\x02\x02\x02\u0165\u0163\x03\x02\x02\x02\u0165\u0166\x03\x02" +
    "\x02\x02\u0166\u0168\x03\x02\x02\x02\u0167\u0165\x03\x02\x02\x02\u0168" +
    "\u016A\x05\x14\v\x02\u0169\u0157\x03\x02\x02\x02\u0169\u015E\x03\x02\x02" +
    "\x02\u0169\u0165\x03\x02\x02\x02\u016A\r\x03\x02\x02\x02\u016B\u016C\x07" +
    "\b\x02\x02\u016C\u016F\x05\u0126\x94\x02\u016D\u016E\x07\x0E\x02\x02\u016E" +
    "\u0170\x054\x1B\x02\u016F\u016D\x03\x02\x02\x02\u016F\u0170\x03\x02\x02" +
    "\x02\u0170\u0173\x03\x02\x02\x02\u0171\u0172\x07\x15\x02\x02\u0172\u0174" +
    "\x05\x16\f\x02\u0173\u0171\x03\x02\x02\x02\u0173\u0174\x03\x02\x02\x02" +
    "\u0174\u0175\x03\x02\x02\x02\u0175\u0176\x05\x18\r\x02\u0176\x0F\x03\x02" +
    "\x02\x02\u0177\u0178\x07\r\x02\x02\u0178\u0179\x05\u0126\x94\x02\u0179" +
    "\u017B\x07\xCB\x02\x02\u017A\u017C\x05\x12\n\x02\u017B\u017A\x03\x02\x02" +
    "\x02\u017B\u017C\x03\x02\x02\x02\u017C\u017D\x03\x02\x02\x02\u017D\u017E" +
    "\x07\xCC\x02\x02\u017E\x11\x03\x02\x02\x02\u017F\u0184\x05\u0126\x94\x02" +
    "\u0180\u0181\x07\xD0\x02\x02\u0181\u0183\x05\u0126\x94\x02\u0182\u0180" +
    "\x03\x02\x02\x02\u0183\u0186\x03\x02\x02\x02\u0184\u0182\x03\x02\x02\x02" +
    "\u0184\u0185\x03\x02\x02\x02\u0185\x13\x03\x02\x02\x02\u0186\u0184\x03" +
    "\x02\x02\x02\u0187\u0188\x07\x19\x02\x02\u0188\u018B\x05\u0126\x94\x02" +
    "\u0189\u018A\x07\x0E\x02\x02\u018A\u018C\x05\x16\f\x02\u018B\u0189\x03" +
    "\x02\x02\x02\u018B\u018C\x03\x02\x02\x02\u018C\u018D\x03\x02\x02\x02\u018D" +
    "\u018E\x05\x1A\x0E\x02\u018E\x15\x03\x02\x02\x02\u018F\u0194\x054\x1B" +
    "\x02\u0190\u0191\x07\xD0\x02\x02\u0191\u0193\x054\x1B\x02\u0192\u0190" +
    "\x03\x02\x02\x02\u0193\u0196\x03\x02\x02\x02\u0194\u0192\x03\x02\x02\x02" +
    "\u0194\u0195\x03\x02\x02\x02\u0195\x17\x03\x02\x02\x02\u0196\u0194\x03" +
    "\x02\x02\x02\u0197\u019B\x07\xCB\x02\x02\u0198\u019A\x05\x1C\x0F\x02\u0199" +
    "\u0198\x03\x02\x02\x02\u019A\u019D\x03\x02\x02\x02\u019B\u0199\x03\x02" +
    "\x02\x02\u019B\u019C\x03\x02\x02\x02\u019C\u019E\x03\x02\x02\x02\u019D" +
    "\u019B\x03\x02\x02\x02\u019E\u019F\x07\xCC\x02\x02\u019F\x19\x03\x02\x02" +
    "\x02\u01A0\u01A4\x07\xCB\x02\x02\u01A1\u01A3\x05,\x17\x02\u01A2\u01A1" +
    "\x03\x02\x02\x02\u01A3\u01A6\x03\x02\x02\x02\u01A4\u01A2\x03\x02\x02\x02" +
    "\u01A4\u01A5\x03\x02\x02\x02\u01A5\u01A7\x03\x02\x02\x02\u01A6\u01A4\x03" +
    "\x02\x02\x02\u01A7\u01A8\x07\xCC\x02\x02\u01A8\x1B\x03\x02\x02\x02\u01A9" +
    "\u01B6\x07\xCF\x02\x02\u01AA\u01AC\x07&\x02\x02\u01AB\u01AA\x03\x02\x02" +
    "\x02\u01AB\u01AC\x03\x02\x02\x02\u01AC\u01AD\x03\x02\x02\x02\u01AD\u01B6" +
    "\x05P)\x02\u01AE\u01B0\x05\x1E\x10\x02\u01AF\u01AE\x03\x02\x02\x02\u01B0" +
    "\u01B3\x03\x02\x02\x02\u01B1\u01AF\x03\x02\x02\x02\u01B1\u01B2\x03\x02" +
    "\x02\x02\u01B2\u01B4\x03\x02\x02\x02\u01B3\u01B1\x03\x02\x02\x02\u01B4" +
    "\u01B6\x05 \x11\x02\u01B5\u01A9\x03\x02\x02\x02\u01B5\u01AB\x03\x02\x02" +
    "\x02\u01B5\u01B1\x03\x02\x02\x02\u01B6\x1D\x03\x02\x02\x02\u01B7\u01CB" +
    "\x05F$\x02\u01B8\u01CB\x07\x13\x02\x02\u01B9\u01CB\x07!\x02\x02\u01BA" +
    "\u01CB\x07 \x02\x02\u01BB\u01CB\x07\x1F\x02\x02\u01BC\u01CB\x07,\x02\x02" +
    "\u01BD\u01CB\x07&\x02\x02\u01BE\u01CB\x07\x03\x02\x02\u01BF\u01CB\x07" +
    "\x0F\x02\x02\u01C0\u01CB\x074\x02\x02\u01C1\u01CB\x07\x1E\x02\x02\u01C2" +
    "\u01CB\x072\x02\x02\u01C3\u01CB\x07)\x02\x02\u01C4\u01C5\x077\x02\x02" +
    "\u01C5\u01CB\x07%\x02\x02\u01C6\u01C7\x078\x02\x02\u01C7\u01CB\x07%\x02" +
    "\x02\u01C8\u01C9\x07\x16\x02\x02\u01C9\u01CB\x07%\x02\x02\u01CA\u01B7" +
    "\x03\x02\x02\x02\u01CA\u01B8\x03\x02\x02\x02\u01CA\u01B9\x03\x02\x02\x02" +
    "\u01CA\u01BA\x03\x02\x02\x02\u01CA\u01BB\x03\x02\x02\x02\u01CA\u01BC\x03" +
    "\x02\x02\x02\u01CA\u01BD\x03\x02\x02\x02\u01CA\u01BE\x03\x02\x02\x02\u01CA" +
    "\u01BF\x03\x02\x02\x02\u01CA\u01C0\x03\x02\x02\x02\u01CA\u01C1\x03\x02" +
    "\x02\x02\u01CA\u01C2\x03\x02\x02\x02\u01CA\u01C3\x03\x02\x02\x02\u01CA" +
    "\u01C4\x03\x02\x02\x02\u01CA\u01C6\x03\x02\x02\x02\u01CA\u01C8\x03\x02" +
    "\x02\x02\u01CB\x1F\x03\x02\x02\x02\u01CC\u01D4\x05$\x13\x02\u01CD\u01D4" +
    "\x05(\x15\x02\u01CE\u01D4\x05&\x14\x02\u01CF\u01D4\x05\x14\v\x02\u01D0" +
    "\u01D4\x05\x0E\b\x02\u01D1\u01D4\x05\x10\t\x02\u01D2\u01D4\x05*\x16\x02" +
    "\u01D3\u01CC\x03\x02\x02\x02\u01D3\u01CD\x03\x02\x02\x02\u01D3\u01CE\x03" +
    "\x02\x02\x02\u01D3\u01CF\x03\x02\x02\x02\u01D3\u01D0\x03\x02\x02\x02\u01D3" +
    "\u01D1\x03\x02\x02\x02\u01D3\u01D2\x03\x02\x02\x02\u01D4!\x03\x02\x02" +
    "\x02\u01D5\u01DC\x05$\x13\x02\u01D6\u01DC\x05(\x15\x02\u01D7\u01DC\x05" +
    "\x14\v\x02\u01D8\u01DC\x05\x0E\b\x02\u01D9\u01DC\x05\x10\t\x02\u01DA\u01DC" +
    "\x05*\x16\x02\u01DB\u01D5\x03\x02\x02\x02\u01DB\u01D6\x03\x02\x02\x02" +
    "\u01DB\u01D7\x03\x02\x02\x02\u01DB\u01D8\x03\x02\x02\x02\u01DB\u01D9\x03" +
    "\x02\x02\x02\u01DB\u01DA\x03\x02\x02\x02\u01DC#\x03\x02\x02\x02\u01DD" +
    "\u01E0\x054\x1B\x02\u01DE\u01E0\x073\x02\x02\u01DF\u01DD\x03\x02\x02\x02" +
    "\u01DF\u01DE\x03\x02\x02\x02\u01E0\u01E1\x03\x02\x02\x02\u01E1\u01E2\x05" +
    "\u0126\x94\x02\u01E2\u01E5\x05<\x1F\x02\u01E3\u01E6\x05P)\x02\u01E4\u01E6" +
    "\x07\xCF\x02\x02\u01E5\u01E3\x03\x02\x02\x02\u01E5\u01E4\x03\x02\x02\x02" +
    "\u01E6%\x03\x02\x02\x02\u01E7\u01E8\x05B\"\x02\u01E8\u01E9\x05<\x1F\x02" +
    "\u01E9\u01EA\x05P)\x02\u01EA\'\x03\x02\x02\x02\u01EB\u01EC\x054\x1B\x02" +
    "\u01EC\u01ED\x05.\x18\x02\u01ED\u01EE\x07\xCF\x02\x02\u01EE)\x03\x02\x02" +
    "\x02\u01EF\u01F0\x054\x1B\x02\u01F0\u01F1\x05\u0126\x94\x02\u01F1\u01F5" +
    "\x07\xCB\x02\x02\u01F2\u01F4\x05\x84C\x02\u01F3\u01F2\x03\x02\x02\x02" +
    "\u01F4\u01F7\x03\x02\x02\x02\u01F5\u01F3\x03\x02\x02\x02\u01F5\u01F6\x03" +
    "\x02\x02\x02\u01F6\u01F8\x03\x02\x02\x02\u01F7\u01F5\x03\x02\x02\x02\u01F8" +
    "\u01F9\x07\xCC\x02\x02\u01F9+\x03\x02\x02\x02\u01FA\u01FC\x05\x1E\x10" +
    "\x02\u01FB\u01FA\x03\x02\x02\x02\u01FC\u01FF\x03\x02\x02\x02\u01FD\u01FB" +
    "\x03\x02\x02\x02\u01FD\u01FE\x03\x02\x02\x02\u01FE\u0202\x03\x02\x02\x02" +
    "\u01FF\u01FD\x03\x02\x02\x02\u0200\u0203\x054\x1B\x02\u0201\u0203\x07" +
    "3\x02\x02\u0202\u0200\x03\x02\x02\x02\u0202\u0201\x03\x02\x02\x02\u0203" +
    "\u0204\x03\x02\x02\x02\u0204\u0205\x05\u0126\x94\x02\u0205\u0206\x05<" +
    "\x1F\x02\u0206\u0207\x07\xCF\x02\x02\u0207-\x03\x02\x02\x02\u0208\u020D" +
    "\x050\x19\x02\u0209\u020A\x07\xD0\x02\x02\u020A\u020C\x050\x19\x02\u020B" +
    "\u0209\x03\x02\x02\x02\u020C\u020F\x03\x02\x02\x02\u020D\u020B\x03\x02" +
    "\x02\x02\u020D\u020E\x03\x02\x02\x02\u020E/\x03\x02\x02\x02\u020F\u020D" +
    "\x03\x02\x02\x02\u0210\u0213\x05\u0126\x94\x02\u0211\u0212\x07\xD2\x02" +
    "\x02\u0212\u0214\x05\x9AN\x02\u0213\u0211\x03\x02\x02\x02\u0213\u0214" +
    "\x03\x02\x02\x02\u02141\x03\x02\x02\x02\u0215\u0221\x07\xCB\x02\x02\u0216" +
    "\u021B\x05\x9AN\x02\u0217\u0218\x07\xD0\x02\x02\u0218\u021A\x05\x9AN\x02" +
    "\u0219\u0217\x03\x02\x02\x02\u021A\u021D\x03\x02\x02\x02\u021B\u0219\x03" +
    "\x02\x02\x02\u021B\u021C\x03\x02\x02\x02\u021C\u021F\x03\x02\x02\x02\u021D" +
    "\u021B\x03\x02\x02\x02\u021E\u0220\x07\xD0\x02\x02\u021F\u021E\x03\x02" +
    "\x02\x02\u021F\u0220\x03\x02\x02\x02\u0220\u0222\x03\x02\x02\x02\u0221" +
    "\u0216\x03\x02\x02\x02\u0221\u0222\x03\x02\x02\x02\u0222\u0223\x03\x02" +
    "\x02\x02\u0223\u0224\x07\xCC\x02\x02\u02243\x03\x02\x02\x02\u0225\u022A" +
    "\x058\x1D\x02\u0226\u0227\x07\xD1\x02\x02\u0227\u0229\x058\x1D\x02\u0228" +
    "\u0226\x03\x02\x02\x02\u0229\u022C\x03\x02\x02\x02\u022A\u0228\x03\x02" +
    "\x02\x02\u022A\u022B\x03\x02\x02\x02\u022B\u022D\x03\x02\x02\x02\u022C" +
    "\u022A\x03\x02\x02\x02\u022D\u022E\x056\x1C\x02\u022E5\x03\x02\x02\x02" +
    "\u022F\u0230\x07\xCD\x02\x02\u0230\u0232\x07\xCE\x02\x02\u0231\u022F\x03" +
    "\x02\x02\x02\u0232\u0235\x03\x02\x02\x02\u0233\u0231\x03\x02\x02\x02\u0233" +
    "\u0234\x03\x02\x02\x02\u02347\x03\x02\x02\x02\u0235\u0233\x03\x02\x02" +
    "\x02\u0236\u0238\x079\x02\x02\u0237\u0239\x05:\x1E\x02\u0238\u0237\x03" +
    "\x02\x02\x02\u0238\u0239\x03\x02\x02\x02\u0239\u0247\x03\x02\x02\x02\u023A" +
    "\u023C\x07$\x02\x02\u023B\u023D\x05:\x1E\x02\u023C\u023B\x03\x02\x02\x02" +
    "\u023C\u023D\x03\x02\x02\x02\u023D\u0247\x03\x02\x02\x02\u023E\u0240\x07" +
    ":\x02\x02\u023F\u0241\x05:\x1E\x02\u0240\u023F\x03\x02\x02\x02\u0240\u0241" +
    "\x03\x02\x02\x02\u0241\u0247\x03\x02\x02\x02\u0242\u0244\x05\u0126\x94" +
    "\x02\u0243\u0245\x05:\x1E\x02\u0244\u0243\x03\x02\x02\x02\u0244\u0245" +
    "\x03\x02\x02\x02\u0245\u0247\x03\x02\x02\x02\u0246\u0236\x03\x02\x02\x02" +
    "\u0246\u023A\x03\x02\x02\x02\u0246\u023E\x03\x02\x02\x02\u0246\u0242\x03" +
    "\x02\x02\x02\u02479\x03\x02\x02\x02\u0248\u0249\x07\xD4\x02\x02\u0249" +
    "\u024A\x05\x16\f\x02\u024A\u024B\x07\xD3\x02\x02\u024B;\x03\x02\x02\x02" +
    "\u024C\u024E\x07\xC9\x02\x02\u024D\u024F\x05> \x02\u024E\u024D\x03\x02" +
    "\x02\x02\u024E\u024F\x03\x02\x02\x02\u024F\u0250\x03\x02\x02\x02\u0250" +
    "\u0251\x07\xCA\x02\x02\u0251=\x03\x02\x02\x02\u0252\u0257\x05@!\x02\u0253" +
    "\u0254\x07\xD0\x02\x02\u0254\u0256\x05@!\x02\u0255\u0253\x03\x02\x02\x02" +
    "\u0256\u0259\x03\x02\x02\x02\u0257\u0255\x03\x02\x02\x02\u0257\u0258\x03" +
    "\x02\x02\x02\u0258?\x03\x02\x02\x02\u0259\u0257\x03\x02\x02\x02\u025A" +
    "\u025C\x05\x1E\x10\x02\u025B\u025A\x03\x02\x02\x02\u025C\u025F\x03\x02" +
    "\x02\x02\u025D\u025B\x03\x02\x02\x02\u025D\u025E\x03\x02\x02\x02\u025E" +
    "\u0260\x03\x02\x02\x02\u025F\u025D\x03\x02\x02\x02\u0260\u0261\x054\x1B" +
    "\x02\u0261\u0262\x05\u0126\x94\x02\u0262A\x03\x02\x02\x02\u0263\u0268" +
    "\x05\u0126\x94\x02\u0264\u0265\x07\xD1\x02\x02\u0265\u0267\x05\u0126\x94" +
    "\x02\u0266\u0264\x03\x02\x02\x02\u0267\u026A\x03\x02\x02\x02\u0268\u0266" +
    "\x03\x02\x02\x02\u0268\u0269\x03\x02\x02\x02\u0269C\x03\x02\x02\x02\u026A" +
    "\u0268\x03\x02\x02\x02\u026B\u026C\t\x04\x02\x02\u026CE\x03\x02\x02\x02" +
    "\u026D\u026E\x07\xF6\x02\x02\u026E\u0275\x05B\"\x02\u026F\u0272\x07\xC9" +
    "\x02\x02\u0270\u0273\x05H%\x02\u0271\u0273\x05L\'\x02\u0272\u0270\x03" +
    "\x02\x02\x02\u0272\u0271\x03\x02\x02\x02\u0272\u0273\x03\x02\x02\x02\u0273" +
    "\u0274\x03\x02\x02\x02\u0274\u0276\x07\xCA\x02\x02\u0275\u026F\x03\x02" +
    "\x02\x02\u0275\u0276\x03\x02\x02\x02\u0276G\x03\x02\x02\x02\u0277\u027E" +
    "\x05J&\x02\u0278\u027A\x07\xD0\x02\x02\u0279\u0278\x03\x02\x02\x02\u0279" +
    "\u027A\x03\x02\x02\x02\u027A\u027B\x03\x02\x02\x02\u027B\u027D\x05J&\x02" +
    "\u027C\u0279\x03\x02\x02\x02\u027D\u0280\x03\x02\x02\x02\u027E\u027C\x03" +
    "\x02\x02\x02\u027E\u027F\x03\x02\x02\x02\u027FI\x03\x02\x02\x02\u0280" +
    "\u027E\x03\x02\x02\x02\u0281\u0282\x05\u0126\x94\x02\u0282\u0283\x07\xD2" +
    "\x02\x02\u0283\u0284\x05L\'\x02\u0284K\x03\x02\x02\x02\u0285\u0289\x05" +
    "\x9AN\x02\u0286\u0289\x05F$\x02\u0287\u0289\x05N(\x02\u0288\u0285\x03" +
    "\x02\x02\x02\u0288\u0286\x03\x02\x02\x02\u0288\u0287\x03\x02\x02\x02\u0289" +
    "M\x03\x02\x02\x02\u028A\u0293\x07\xCB\x02\x02\u028B\u0290\x05L\'\x02\u028C" +
    "\u028D\x07\xD0\x02\x02\u028D\u028F\x05L\'\x02\u028E\u028C\x03\x02\x02" +
    "\x02\u028F\u0292\x03\x02\x02\x02\u0290\u028E\x03\x02\x02\x02\u0290\u0291" +
    "\x03\x02\x02\x02\u0291\u0294\x03\x02\x02\x02\u0292\u0290\x03\x02\x02\x02" +
    "\u0293\u028B\x03\x02\x02\x02\u0293\u0294\x03\x02\x02\x02\u0294\u0296\x03" +
    "\x02\x02\x02\u0295\u0297\x07\xD0\x02\x02\u0296\u0295\x03\x02\x02\x02\u0296" +
    "\u0297\x03\x02\x02\x02\u0297\u0298\x03\x02\x02\x02\u0298\u0299\x07\xCC" +
    "\x02\x02\u0299O\x03\x02\x02\x02\u029A\u029E\x07\xCB\x02\x02\u029B\u029D" +
    "\x05V,\x02\u029C\u029B\x03\x02\x02\x02\u029D\u02A0\x03\x02\x02\x02\u029E" +
    "\u029C\x03\x02\x02\x02\u029E\u029F\x03\x02\x02\x02\u029F\u02A1\x03\x02" +
    "\x02\x02\u02A0\u029E\x03\x02\x02\x02\u02A1\u02A2\x07\xCC\x02\x02\u02A2" +
    "Q\x03\x02\x02\x02\u02A3\u02A4\x05T+\x02\u02A4\u02A5\x07\xCF\x02\x02\u02A5" +
    "S\x03\x02\x02\x02\u02A6\u02A8\x05\x1E\x10\x02\u02A7\u02A6\x03\x02\x02" +
    "\x02\u02A8\u02AB\x03\x02\x02\x02\u02A9\u02A7\x03\x02\x02\x02\u02A9\u02AA" +
    "\x03\x02\x02\x02\u02AA\u02AC\x03\x02\x02\x02\u02AB\u02A9\x03\x02\x02\x02" +
    "\u02AC\u02AD\x054\x1B\x02\u02AD\u02AE\x05.\x18\x02\u02AEU\x03\x02\x02" +
    "\x02\u02AF\u02C4\x05P)\x02\u02B0\u02C4\x05X-\x02\u02B1\u02C4\x05Z.\x02" +
    "\u02B2\u02C4\x05b2\x02\u02B3\u02C4\x05d3\x02\u02B4\u02C4\x05f4\x02\u02B5" +
    "\u02C4\x05h5\x02\u02B6\u02C4\x05j6\x02\u02B7\u02C4\x05l7\x02\u02B8\u02C4" +
    "\x05n8\x02\u02B9\u02C4\x05p9\x02\u02BA\u02C4\x05t;\x02\u02BB\u02C4\x05" +
    "v<\x02\u02BC\u02C4\x05x=\x02\u02BD\u02C4\x05z>\x02\u02BE\u02C4\x05|?\x02" +
    "\u02BF\u02C4\x05~@\x02\u02C0\u02C4\x05\x80A\x02\u02C1\u02C4\x05R*\x02" +
    "\u02C2\u02C4\x05\x82B\x02\u02C3\u02AF\x03\x02\x02\x02\u02C3\u02B0\x03" +
    "\x02\x02\x02\u02C3\u02B1\x03\x02\x02\x02\u02C3\u02B2\x03\x02\x02\x02\u02C3" +
    "\u02B3\x03\x02\x02\x02\u02C3\u02B4\x03\x02\x02\x02\u02C3\u02B5\x03\x02" +
    "\x02\x02\u02C3\u02B6\x03\x02\x02\x02\u02C3\u02B7\x03\x02\x02\x02\u02C3" +
    "\u02B8\x03\x02\x02\x02\u02C3\u02B9\x03\x02\x02\x02\u02C3\u02BA\x03\x02" +
    "\x02\x02\u02C3\u02BB\x03\x02\x02\x02\u02C3\u02BC\x03\x02\x02\x02\u02C3" +
    "\u02BD\x03\x02\x02\x02\u02C3\u02BE\x03\x02\x02\x02\u02C3\u02BF\x03\x02" +
    "\x02\x02\u02C3\u02C0\x03\x02\x02\x02\u02C3\u02C1\x03\x02\x02\x02\u02C3" +
    "\u02C2\x03\x02\x02\x02\u02C4W\x03\x02\x02\x02\u02C5\u02C6\x07\x14\x02" +
    "\x02\u02C6\u02C7\x05\x96L\x02\u02C7\u02CA\x05V,\x02\u02C8\u02C9\x07\f" +
    "\x02\x02\u02C9\u02CB\x05V,\x02\u02CA\u02C8\x03\x02\x02\x02\u02CA\u02CB" +
    "\x03\x02\x02\x02\u02CBY\x03\x02\x02\x02\u02CC\u02CD\x07(\x02\x02\u02CD" +
    "\u02CE\x07\x1D\x02\x02\u02CE\u02CF\x05\x9AN\x02\u02CF\u02D1\x07\xCB\x02" +
    "\x02\u02D0\u02D2\x05\\/\x02\u02D1\u02D0\x03\x02\x02\x02\u02D2\u02D3\x03" +
    "\x02\x02\x02\u02D3\u02D1\x03\x02\x02\x02\u02D3\u02D4\x03\x02\x02\x02\u02D4" +
    "\u02D5\x03\x02\x02\x02\u02D5\u02D6\x07\xCC\x02\x02\u02D6[\x03\x02\x02" +
    "\x02\u02D7\u02D8\x075\x02\x02\u02D8\u02D9\x05^0\x02\u02D9\u02DA\x05P)" +
    "\x02\u02DA]\x03\x02\x02\x02\u02DB\u02E8\x07\f\x02\x02\u02DC\u02E1\x05" +
    "`1\x02\u02DD\u02DE\x07\xD0\x02\x02\u02DE\u02E0\x05`1\x02\u02DF\u02DD\x03" +
    "\x02\x02\x02\u02E0\u02E3\x03\x02\x02\x02\u02E1\u02DF\x03\x02\x02\x02\u02E1" +
    "\u02E2\x03\x02\x02\x02\u02E2\u02E8\x03\x02\x02\x02\u02E3\u02E1\x03\x02" +
    "\x02\x02\u02E4\u02E5\x05\u0126\x94\x02\u02E5\u02E6\x05\u0126\x94\x02\u02E6" +
    "\u02E8\x03\x02\x02\x02\u02E7\u02DB\x03\x02\x02\x02\u02E7\u02DC\x03\x02" +
    "\x02\x02\u02E7\u02E4\x03\x02\x02\x02\u02E8_\x03\x02\x02\x02\u02E9\u02EB" +
    "\t\x05\x02\x02\u02EA\u02E9\x03\x02\x02\x02\u02EB\u02EE\x03\x02\x02\x02" +
    "\u02EC\u02EA\x03\x02\x02\x02\u02EC\u02ED\x03\x02\x02\x02\u02ED\u02EF\x03" +
    "\x02\x02\x02\u02EE\u02EC\x03\x02\x02\x02\u02EF\u02FF\x07\xC3\x02\x02\u02F0" +
    "\u02F2\t\x05\x02\x02\u02F1\u02F0\x03\x02\x02\x02\u02F2\u02F5\x03\x02\x02" +
    "\x02\u02F3\u02F1\x03\x02\x02\x02\u02F3\u02F4\x03\x02\x02\x02\u02F4\u02F6" +
    "\x03\x02\x02\x02\u02F5\u02F3\x03\x02\x02\x02\u02F6\u02FF\x07\xC4\x02\x02" +
    "\u02F7\u02FF\x07\xC7\x02\x02\u02F8\u02FF\x07\x1C\x02\x02\u02F9\u02FF\x05" +
    "\u0126\x94\x02\u02FA\u02FB\x07\xC9\x02\x02\u02FB\u02FC\x05`1\x02\u02FC" +
    "\u02FD\x07\xCA\x02\x02\u02FD\u02FF\x03\x02\x02\x02\u02FE\u02EC\x03\x02" +
    "\x02\x02\u02FE\u02F3\x03\x02\x02\x02\u02FE\u02F7\x03\x02\x02\x02\u02FE" +
    "\u02F8\x03\x02\x02\x02\u02FE\u02F9\x03\x02\x02\x02\u02FE\u02FA\x03\x02" +
    "\x02\x02\u02FFa\x03\x02\x02\x02\u0300\u0301\x07\x11\x02\x02\u0301\u0302" +
    "\x07\xC9\x02\x02\u0302\u0303\x05\x8EH\x02\u0303\u0306\x07\xCA\x02\x02" +
    "\u0304\u0307\x05V,\x02\u0305\u0307\x07\xCF\x02\x02\u0306\u0304\x03\x02" +
    "\x02\x02\u0306\u0305\x03\x02\x02\x02\u0307c\x03\x02\x02\x02\u0308\u0309" +
    "\x076\x02\x02\u0309\u030C\x05\x96L\x02\u030A\u030D\x05V,\x02\u030B\u030D" +
    "\x07\xCF\x02\x02\u030C\u030A\x03\x02\x02\x02\u030C\u030B\x03\x02\x02\x02" +
    "\u030De\x03\x02\x02\x02\u030E\u030F\x07\v\x02\x02\u030F\u0310\x05P)\x02" +
    "\u0310\u0311\x076\x02\x02\u0311\u0312\x05\x96L\x02\u0312\u0313\x07\xCF" +
    "\x02\x02\u0313g\x03\x02\x02\x02\u0314\u0315\x07.\x02\x02\u0315\u031F\x05" +
    "P)\x02\u0316\u0318\x05\x8AF\x02\u0317\u0316\x03\x02\x02\x02\u0318\u0319" +
    "\x03\x02\x02\x02\u0319\u0317\x03\x02\x02\x02\u0319\u031A\x03\x02\x02\x02" +
    "\u031A\u031C\x03\x02\x02\x02\u031B\u031D\x05\x8CG\x02\u031C\u031B\x03" +
    "\x02\x02\x02\u031C\u031D\x03\x02\x02\x02\u031D\u0320\x03\x02\x02\x02\u031E" +
    "\u0320\x05\x8CG\x02\u031F\u0317\x03\x02\x02\x02\u031F\u031E\x03\x02\x02" +
    "\x02\u0320i\x03\x02\x02\x02\u0321\u0323\x07\"\x02\x02\u0322\u0324\x05" +
    "\x9AN\x02\u0323\u0322\x03\x02\x02\x02\u0323\u0324\x03\x02\x02\x02\u0324" +
    "\u0325\x03\x02\x02\x02\u0325\u0326\x07\xCF\x02\x02\u0326k\x03\x02\x02" +
    "\x02\u0327\u0328\x07+\x02\x02\u0328\u0329\x05\x9AN\x02\u0329\u032A\x07" +
    "\xCF\x02\x02\u032Am\x03\x02\x02\x02\u032B\u032C\x07\x06\x02\x02\u032C" +
    "\u032D\x07\xCF\x02\x02\u032Do\x03\x02\x02\x02\u032E\u032F\x07\t\x02\x02" +
    "\u032F\u0330\x07\xCF\x02\x02\u0330q\x03\x02\x02\x02\u0331\u0332\x07@\x02" +
    "\x02\u0332\u0333\t\x06\x02\x02\u0333s\x03\x02\x02\x02\u0334\u0336\x07" +
    "\x17\x02\x02\u0335\u0337\x05r:\x02\u0336\u0335\x03\x02\x02\x02\u0336\u0337" +
    "\x03\x02\x02\x02\u0337\u0338\x03\x02\x02\x02\u0338\u0339\x05\x9AN\x02" +
    "\u0339\u033A\x07\xCF\x02\x02\u033Au\x03\x02\x02\x02\u033B\u033D\x070\x02" +
    "\x02\u033C\u033E\x05r:\x02\u033D\u033C\x03\x02\x02\x02\u033D\u033E\x03" +
    "\x02\x02\x02\u033E\u033F\x03\x02\x02\x02\u033F\u0340\x05\x9AN\x02\u0340" +
    "\u0341\x07\xCF\x02\x02\u0341w\x03\x02\x02\x02\u0342\u0344\x07\n\x02\x02" +
    "\u0343\u0345\x05r:\x02\u0344\u0343\x03\x02\x02\x02\u0344\u0345\x03\x02" +
    "\x02\x02\u0345\u0346\x03\x02\x02\x02\u0346\u0347\x05\x9AN\x02\u0347\u0348" +
    "\x07\xCF\x02\x02\u0348y\x03\x02\x02\x02\u0349\u034B\x07/\x02\x02\u034A" +
    "\u034C\x05r:\x02\u034B\u034A\x03\x02\x02\x02\u034B\u034C\x03\x02\x02\x02" +
    "\u034C\u034D\x03\x02\x02\x02\u034D\u034E\x05\x9AN\x02\u034E\u034F\x07" +
    "\xCF\x02\x02\u034F{\x03\x02\x02\x02\u0350\u0352\x071\x02\x02\u0351\u0353" +
    "\x05r:\x02\u0352\u0351\x03\x02\x02\x02\u0352\u0353\x03\x02\x02\x02\u0353" +
    "\u0354\x03\x02\x02\x02\u0354\u0356\x05\x9AN\x02\u0355\u0357\x05B\"\x02" +
    "\u0356\u0355\x03\x02\x02\x02\u0356\u0357\x03\x02\x02\x02\u0357\u0358\x03" +
    "\x02\x02\x02\u0358\u0359\x07\xCF\x02\x02\u0359}\x03\x02\x02\x02\u035A" +
    "\u035C\x07\x1A\x02\x02\u035B\u035D\x05r:\x02\u035C\u035B\x03\x02\x02\x02" +
    "\u035C\u035D\x03\x02\x02\x02\u035D\u035E\x03\x02\x02\x02\u035E\u035F\x05" +
    "\x9AN\x02\u035F\u0360\x05\x9AN\x02\u0360\u0361\x07\xCF\x02\x02\u0361\x7F" +
    "\x03\x02\x02\x02\u0362\u0363\x07#\x02\x02\u0363\u0365\x07\xC9\x02\x02" +
    "\u0364\u0366\x05\x98M\x02\u0365\u0364\x03\x02\x02\x02\u0365\u0366\x03" +
    "\x02\x02\x02\u0366\u0367\x03\x02\x02\x02\u0367\u0368\x07\xCA\x02\x02\u0368" +
    "\u0369\x05P)\x02\u0369\x81\x03\x02\x02\x02\u036A\u036B\x05\x9AN\x02\u036B" +
    "\u036C\x07\xCF\x02\x02\u036C\x83\x03\x02\x02\x02\u036D\u036F\x05\x1E\x10" +
    "\x02\u036E\u036D\x03\x02\x02\x02\u036F\u0372\x03\x02\x02\x02\u0370\u036E" +
    "\x03\x02\x02\x02\u0370\u0371\x03\x02\x02\x02\u0371\u0375\x03\x02\x02\x02" +
    "\u0372\u0370\x03\x02\x02\x02\u0373\u0376\x05\x86D\x02\u0374\u0376\x05" +
    "\x88E\x02\u0375\u0373\x03\x02\x02\x02\u0375\u0374\x03\x02\x02\x02\u0376" +
    "\x85\x03\x02\x02\x02\u0377\u037A\x07\x12\x02\x02\u0378\u037B\x07\xCF\x02" +
    "\x02\u0379\u037B\x05P)\x02\u037A\u0378\x03\x02\x02\x02\u037A\u0379\x03" +
    "\x02\x02\x02\u037B\x87\x03\x02\x02\x02\u037C\u037F\x07$\x02\x02\u037D" +
    "\u0380\x07\xCF\x02\x02\u037E\u0380\x05P)\x02\u037F\u037D\x03\x02\x02\x02" +
    "\u037F\u037E\x03\x02\x02\x02\u0380\x89\x03\x02\x02\x02\u0381\u0382\x07" +
    "\x07\x02\x02\u0382\u0386\x07\xC9\x02\x02\u0383\u0385\x05\x1E\x10\x02\u0384" +
    "\u0383\x03\x02\x02\x02\u0385\u0388\x03\x02\x02\x02\u0386\u0384\x03\x02" +
    "\x02\x02\u0386\u0387\x03\x02\x02\x02\u0387\u0389\x03\x02\x02\x02\u0388" +
    "\u0386\x03\x02\x02\x02\u0389\u038A\x05B\"\x02\u038A\u038B\x05\u0126\x94" +
    "\x02\u038B\u038C\x07\xCA\x02\x02\u038C\u038D\x05P)\x02\u038D\x8B\x03\x02" +
    "\x02\x02\u038E\u038F\x07\x10\x02\x02\u038F\u0390\x05P)\x02\u0390\x8D\x03" +
    "\x02\x02\x02\u0391\u039E\x05\x92J\x02\u0392\u0394\x05\x90I\x02\u0393\u0392" +
    "\x03\x02\x02\x02\u0393\u0394\x03\x02\x02\x02\u0394";
ApexParser._serializedATNSegment2 = "\u0395\x03\x02\x02\x02\u0395\u0397\x07\xCF\x02\x02\u0396\u0398\x05\x9A" +
    "N\x02\u0397\u0396\x03\x02\x02\x02\u0397\u0398\x03\x02\x02\x02\u0398\u0399" +
    "\x03\x02\x02\x02\u0399\u039B\x07\xCF\x02\x02\u039A\u039C\x05\x94K\x02" +
    "\u039B\u039A\x03\x02\x02\x02\u039B\u039C\x03\x02\x02\x02\u039C\u039E\x03" +
    "\x02\x02\x02\u039D\u0391\x03\x02\x02\x02\u039D\u0393\x03\x02\x02\x02\u039E" +
    "\x8F\x03\x02\x02\x02\u039F\u03A2\x05T+\x02\u03A0\u03A2\x05\x98M\x02\u03A1" +
    "\u039F\x03\x02\x02\x02\u03A1\u03A0\x03\x02\x02\x02\u03A2\x91\x03\x02\x02" +
    "\x02\u03A3\u03A4\x054\x1B\x02\u03A4\u03A5\x05\u0126\x94\x02\u03A5\u03A6" +
    "\x07\xD9\x02\x02\u03A6\u03A7\x05\x9AN\x02\u03A7\x93\x03\x02\x02\x02\u03A8" +
    "\u03A9\x05\x98M\x02\u03A9\x95\x03\x02\x02\x02\u03AA\u03AB\x07\xC9\x02" +
    "\x02\u03AB\u03AC\x05\x9AN\x02\u03AC\u03AD\x07\xCA\x02\x02\u03AD\x97\x03" +
    "\x02\x02\x02\u03AE\u03B3\x05\x9AN\x02\u03AF\u03B0\x07\xD0\x02\x02\u03B0" +
    "\u03B2\x05\x9AN\x02\u03B1\u03AF\x03\x02\x02\x02\u03B2\u03B5\x03\x02\x02" +
    "\x02\u03B3\u03B1\x03\x02\x02\x02\u03B3\u03B4\x03\x02\x02\x02\u03B4\x99" +
    "\x03\x02\x02\x02\u03B5\u03B3\x03\x02\x02\x02\u03B6\u03B7\bN\x01\x02\u03B7" +
    "\u03C9\x05\x9CO\x02\u03B8\u03C9\x05\x9EP\x02\u03B9\u03BA\x07\x1B\x02\x02" +
    "\u03BA\u03C9\x05\xA2R\x02\u03BB\u03BC\x07\xC9\x02\x02\u03BC\u03BD\x05" +
    "4\x1B\x02\u03BD\u03BE\x07\xCA\x02\x02\u03BE\u03BF\x05\x9AN\x15\u03BF\u03C9" +
    "\x03\x02\x02\x02\u03C0\u03C1\x07\xC9\x02\x02\u03C1\u03C2\x05\x9AN\x02" +
    "\u03C2\u03C3\x07\xCA\x02\x02\u03C3\u03C9\x03\x02\x02\x02\u03C4\u03C5\t" +
    "\x07\x02\x02\u03C5\u03C9\x05\x9AN\x12\u03C6\u03C7\t\b\x02\x02\u03C7\u03C9" +
    "\x05\x9AN\x11\u03C8\u03B6\x03\x02\x02\x02\u03C8\u03B8\x03\x02\x02\x02" +
    "\u03C8\u03B9\x03\x02\x02\x02\u03C8\u03BB\x03\x02\x02\x02\u03C8\u03C0\x03" +
    "\x02\x02\x02\u03C8\u03C4\x03\x02\x02\x02\u03C8\u03C6\x03\x02\x02\x02\u03C9" +
    "\u0411\x03\x02\x02\x02\u03CA\u03CB\f\x10\x02\x02\u03CB\u03CC\t\t\x02\x02" +
    "\u03CC\u0410\x05\x9AN\x11\u03CD\u03CE\f\x0F\x02\x02\u03CE\u03CF\t\x05" +
    "\x02\x02\u03CF\u0410\x05\x9AN\x10\u03D0\u03D8\f\x0E\x02\x02\u03D1\u03D2" +
    "\x07\xD4\x02\x02\u03D2\u03D9\x07\xD4\x02\x02\u03D3\u03D4\x07\xD3\x02\x02" +
    "\u03D4\u03D5\x07\xD3\x02\x02\u03D5\u03D9\x07\xD3\x02\x02\u03D6\u03D7\x07" +
    "\xD3\x02\x02\u03D7\u03D9\x07\xD3\x02\x02\u03D8\u03D1\x03\x02\x02\x02\u03D8" +
    "\u03D3\x03\x02\x02\x02\u03D8\u03D6\x03\x02\x02\x02\u03D9\u03DA\x03\x02" +
    "\x02\x02\u03DA\u0410\x05\x9AN\x0F\u03DB\u03DC\f\r\x02\x02\u03DC\u03DE" +
    "\t\n\x02\x02\u03DD\u03DF\x07\xD2\x02\x02\u03DE\u03DD\x03\x02\x02\x02\u03DE" +
    "\u03DF\x03\x02\x02\x02\u03DF\u03E0\x03\x02\x02\x02\u03E0\u0410\x05\x9A" +
    "N\x0E\u03E1\u03E2\f\v\x02\x02\u03E2\u03E3\t\v\x02\x02\u03E3\u0410\x05" +
    "\x9AN\f\u03E4\u03E5\f\n\x02\x02\u03E5\u03E6\x07\xE8\x02\x02\u03E6\u0410" +
    "\x05\x9AN\v\u03E7\u03E8\f\t\x02\x02\u03E8\u03E9\x07\xEA\x02\x02\u03E9" +
    "\u0410\x05\x9AN\n\u03EA\u03EB\f\b\x02\x02\u03EB\u03EC\x07\xE9\x02\x02" +
    "\u03EC\u0410\x05\x9AN\t\u03ED\u03EE\f\x07\x02\x02\u03EE\u03EF\x07\xDF" +
    "\x02\x02\u03EF\u0410\x05\x9AN\b\u03F0\u03F1\f\x06\x02\x02\u03F1\u03F2" +
    "\x07\xE0\x02\x02\u03F2\u0410\x05\x9AN\x07\u03F3\u03F4\f\x05\x02\x02\u03F4" +
    "\u03F5\x07\xE1\x02\x02\u03F5\u0410\x05\x9AN\x06\u03F6\u03F7\f\x04\x02" +
    "\x02\u03F7\u03F8\x07\xD8\x02\x02\u03F8\u03F9\x05\x9AN\x02\u03F9\u03FA" +
    "\x07\xD9\x02\x02\u03FA\u03FB\x05\x9AN\x04\u03FB\u0410\x03\x02\x02\x02" +
    "\u03FC\u03FD\f\x03\x02\x02\u03FD\u03FE\t\f\x02\x02\u03FE\u0410\x05\x9A" +
    "N\x03\u03FF\u0400\f\x19\x02\x02\u0400\u0403\t\r\x02\x02\u0401\u0404\x05" +
    "\xA0Q\x02\u0402\u0404\x05\u0128\x95\x02\u0403\u0401\x03\x02\x02\x02\u0403" +
    "\u0402\x03\x02\x02\x02\u0404\u0410\x03\x02\x02\x02\u0405\u0406\f\x18\x02" +
    "\x02\u0406\u0407\x07\xCD\x02\x02\u0407\u0408\x05\x9AN\x02\u0408\u0409" +
    "\x07\xCE\x02\x02\u0409\u0410\x03\x02\x02\x02\u040A\u040B\f\x13\x02\x02" +
    "\u040B\u0410\t\x0E\x02\x02\u040C\u040D\f\f\x02\x02\u040D\u040E\x07\x18" +
    "\x02\x02\u040E\u0410\x054\x1B\x02\u040F\u03CA\x03\x02\x02\x02\u040F\u03CD" +
    "\x03\x02\x02\x02\u040F\u03D0\x03\x02\x02\x02\u040F\u03DB\x03\x02\x02\x02" +
    "\u040F\u03E1\x03\x02\x02\x02\u040F\u03E4\x03\x02\x02\x02\u040F\u03E7\x03" +
    "\x02\x02\x02\u040F\u03EA\x03\x02\x02\x02\u040F\u03ED\x03\x02\x02\x02\u040F" +
    "\u03F0\x03\x02\x02\x02\u040F\u03F3\x03\x02\x02\x02\u040F\u03F6\x03\x02" +
    "\x02\x02\u040F\u03FC\x03\x02\x02\x02\u040F\u03FF\x03\x02\x02\x02\u040F" +
    "\u0405\x03\x02\x02\x02\u040F\u040A\x03\x02\x02\x02\u040F\u040C\x03\x02" +
    "\x02\x02\u0410\u0413\x03\x02\x02\x02\u0411\u040F\x03\x02\x02\x02\u0411" +
    "\u0412\x03\x02\x02\x02\u0412\x9B\x03\x02\x02\x02\u0413\u0411\x03\x02\x02" +
    "\x02\u0414\u0422\x07*\x02\x02\u0415\u0422\x07\'\x02\x02\u0416\u0422\x05" +
    "D#\x02\u0417\u0418\x054\x1B\x02\u0418\u0419\x07\xD1\x02\x02\u0419\u041A" +
    "\x07\b\x02\x02\u041A\u0422\x03\x02\x02\x02\u041B\u041C\x073\x02\x02\u041C" +
    "\u041D\x07\xD1\x02\x02\u041D\u0422\x07\b\x02\x02\u041E\u0422\x05\u0126" +
    "\x94\x02\u041F\u0422\x05\xB6\\\x02\u0420\u0422\x05\u010E\x88\x02\u0421" +
    "\u0414\x03\x02\x02\x02\u0421\u0415\x03\x02\x02\x02\u0421\u0416\x03\x02" +
    "\x02\x02\u0421\u0417\x03\x02\x02\x02\u0421\u041B\x03\x02\x02\x02\u0421" +
    "\u041E\x03\x02\x02\x02\u0421\u041F\x03\x02\x02\x02\u0421\u0420\x03\x02" +
    "\x02\x02\u0422\x9D\x03\x02\x02\x02\u0423\u0424\x05\u0126\x94\x02\u0424" +
    "\u0426\x07\xC9\x02\x02\u0425\u0427\x05\x98M\x02\u0426\u0425\x03\x02\x02" +
    "\x02\u0426\u0427\x03\x02\x02\x02\u0427\u0428\x03\x02\x02\x02\u0428\u0429" +
    "\x07\xCA\x02\x02\u0429\u0437\x03\x02\x02\x02\u042A\u042B\x07*\x02\x02" +
    "\u042B\u042D\x07\xC9\x02\x02\u042C\u042E\x05\x98M\x02\u042D\u042C\x03" +
    "\x02\x02\x02\u042D\u042E\x03\x02\x02\x02\u042E\u042F\x03\x02\x02\x02\u042F" +
    "\u0437\x07\xCA\x02\x02\u0430\u0431\x07\'\x02\x02\u0431\u0433\x07\xC9\x02" +
    "\x02\u0432\u0434\x05\x98M\x02\u0433\u0432\x03\x02\x02\x02\u0433\u0434" +
    "\x03\x02\x02\x02\u0434\u0435\x03\x02\x02\x02\u0435\u0437\x07\xCA\x02\x02" +
    "\u0436\u0423\x03\x02\x02\x02\u0436\u042A\x03\x02\x02\x02\u0436\u0430\x03" +
    "\x02\x02\x02\u0437\x9F\x03\x02\x02\x02\u0438\u0439\x05\u0128\x95\x02\u0439" +
    "\u043B\x07\xC9\x02\x02\u043A\u043C\x05\x98M\x02\u043B\u043A\x03\x02\x02" +
    "\x02\u043B\u043C\x03\x02\x02\x02\u043C\u043D\x03\x02\x02\x02\u043D\u043E" +
    "\x07\xCA\x02\x02\u043E\xA1\x03\x02\x02\x02\u043F\u0445\x05\xA4S\x02\u0440" +
    "\u0446\x05\xA8U\x02\u0441\u0446\x05\xAAV\x02\u0442\u0446\x05\xACW\x02" +
    "\u0443\u0446\x05\xAEX\x02\u0444\u0446\x05\xB2Z\x02\u0445\u0440\x03\x02" +
    "\x02\x02\u0445\u0441\x03\x02\x02\x02\u0445\u0442\x03\x02\x02\x02\u0445" +
    "\u0443\x03\x02\x02\x02\u0445\u0444\x03\x02\x02\x02\u0446\xA3\x03\x02\x02" +
    "\x02\u0447\u044C\x05\xA6T\x02\u0448\u0449\x07\xD1\x02\x02\u0449\u044B" +
    "\x05\xA6T\x02\u044A\u0448\x03\x02\x02\x02\u044B\u044E\x03\x02\x02\x02" +
    "\u044C\u044A\x03\x02\x02\x02\u044C\u044D\x03\x02\x02\x02\u044D\xA5\x03" +
    "\x02\x02\x02\u044E\u044C\x03\x02\x02\x02\u044F\u0454\x05\u0128\x95\x02" +
    "\u0450\u0451\x07\xD4\x02\x02\u0451\u0452\x05\x16\f\x02\u0452\u0453\x07" +
    "\xD3\x02\x02\u0453\u0455\x03\x02\x02\x02\u0454\u0450\x03\x02\x02\x02\u0454" +
    "\u0455\x03\x02\x02\x02\u0455\xA7\x03\x02\x02\x02\u0456\u0457\x07\xCB\x02" +
    "\x02\u0457\u0458\x07\xCC\x02\x02\u0458\xA9\x03\x02\x02\x02\u0459\u045A" +
    "\x05\xB4[\x02\u045A\xAB\x03\x02\x02\x02\u045B\u045C\x07\xCD\x02\x02\u045C" +
    "\u045D\x05\x9AN\x02\u045D\u045E\x07\xCE\x02\x02\u045E\u0465\x03\x02\x02" +
    "\x02\u045F\u0460\x07\xCD\x02\x02\u0460\u0462\x07\xCE\x02\x02\u0461\u0463" +
    "\x052\x1A\x02\u0462\u0461\x03\x02\x02\x02\u0462\u0463\x03\x02\x02\x02" +
    "\u0463\u0465\x03\x02\x02\x02\u0464\u045B\x03\x02\x02\x02\u0464\u045F\x03" +
    "\x02\x02\x02\u0465\xAD\x03\x02\x02\x02\u0466\u0467\x07\xCB\x02\x02\u0467" +
    "\u046C\x05\xB0Y\x02\u0468\u0469\x07\xD0\x02\x02\u0469\u046B\x05\xB0Y\x02" +
    "\u046A\u0468\x03\x02\x02\x02\u046B\u046E\x03\x02\x02\x02\u046C\u046A\x03" +
    "\x02\x02\x02\u046C\u046D\x03\x02\x02\x02\u046D\u046F\x03\x02\x02\x02\u046E" +
    "\u046C\x03\x02\x02\x02\u046F\u0470\x07\xCC\x02\x02\u0470\xAF\x03\x02\x02" +
    "\x02\u0471\u0472\x05\x9AN\x02\u0472\u0473\x07\xEB\x02\x02\u0473\u0474" +
    "\x05\x9AN\x02\u0474\xB1\x03\x02\x02\x02\u0475\u0476\x07\xCB\x02\x02\u0476" +
    "\u047B\x05\x9AN\x02\u0477\u0478\x07\xD0\x02\x02\u0478\u047A\x05\x9AN\x02" +
    "\u0479\u0477\x03\x02\x02\x02\u047A\u047D\x03\x02\x02\x02\u047B\u0479\x03" +
    "\x02\x02\x02\u047B\u047C\x03\x02\x02\x02\u047C\u047E\x03\x02\x02\x02\u047D" +
    "\u047B\x03\x02\x02\x02\u047E\u047F\x07\xCC\x02\x02\u047F\xB3\x03\x02\x02" +
    "\x02\u0480\u0482\x07\xC9\x02\x02\u0481\u0483\x05\x98M\x02\u0482\u0481" +
    "\x03\x02\x02\x02\u0482\u0483\x03\x02\x02\x02\u0483\u0484\x03\x02\x02\x02" +
    "\u0484\u0485\x07\xCA\x02\x02\u0485\xB5\x03\x02\x02\x02\u0486\u0487\x07" +
    "\xCD\x02\x02\u0487\u0488\x05\xB8]\x02\u0488\u0489\x07\xCE\x02\x02\u0489" +
    "\xB7\x03\x02\x02\x02\u048A\u048B\x07=\x02\x02\u048B\u048C\x05\xBC_\x02" +
    "\u048C\u048D\x07?\x02\x02\u048D\u048F\x05\xC2b\x02\u048E\u0490\x05\xDA" +
    "n\x02\u048F\u048E\x03\x02\x02\x02\u048F\u0490\x03\x02\x02\x02\u0490\u0492" +
    "\x03\x02\x02\x02\u0491\u0493\x05\xDCo\x02\u0492\u0491\x03\x02\x02\x02" +
    "\u0492\u0493\x03\x02\x02\x02\u0493\u0495\x03\x02\x02\x02\u0494\u0496\x05" +
    "\xECw\x02\u0495\u0494\x03\x02\x02\x02\u0495\u0496\x03\x02\x02\x02\u0496" +
    "\u0498\x03\x02\x02\x02\u0497\u0499\x05\xF6|\x02\u0498\u0497\x03\x02\x02" +
    "\x02\u0498\u0499\x03\x02\x02\x02\u0499\u049B\x03\x02\x02\x02\u049A\u049C" +
    "\x05\xF8}\x02\u049B\u049A\x03\x02\x02\x02\u049B\u049C\x03\x02\x02\x02" +
    "\u049C\u049E\x03\x02\x02\x02\u049D\u049F\x05\xFE\x80\x02\u049E\u049D\x03" +
    "\x02\x02\x02\u049E\u049F\x03\x02\x02\x02\u049F\u04A1\x03\x02\x02\x02\u04A0" +
    "\u04A2\x05\u0100\x81\x02\u04A1\u04A0\x03\x02\x02\x02\u04A1\u04A2\x03\x02" +
    "\x02\x02\u04A2\u04A4\x03\x02\x02\x02\u04A3\u04A5\x05\u0102\x82\x02\u04A4" +
    "\u04A3\x03\x02\x02\x02\u04A4\u04A5\x03\x02\x02\x02\u04A5\u04A6\x03\x02" +
    "\x02\x02\u04A6\u04A9\x05\u0104\x83\x02\u04A7\u04A8\x070\x02\x02\u04A8" +
    "\u04AA\x05\u011E\x90\x02\u04A9\u04A7\x03\x02\x02\x02\u04A9\u04AA\x03\x02" +
    "\x02\x02\u04AA\xB9\x03\x02\x02\x02\u04AB\u04AC\x07=\x02\x02\u04AC\u04AD" +
    "\x05\xC4c\x02\u04AD\u04AE\x07?\x02\x02\u04AE\u04B0\x05\xC2b\x02\u04AF" +
    "\u04B1\x05\xDCo\x02\u04B0\u04AF\x03\x02\x02\x02\u04B0\u04B1\x03\x02\x02" +
    "\x02\u04B1\u04B3\x03\x02\x02\x02\u04B2\u04B4\x05\xF8}\x02\u04B3\u04B2" +
    "\x03\x02\x02\x02\u04B3\u04B4\x03\x02\x02\x02\u04B4\u04B6\x03\x02\x02\x02" +
    "\u04B5\u04B7\x05\xFE\x80\x02\u04B6\u04B5\x03\x02\x02\x02\u04B6\u04B7\x03" +
    "\x02\x02\x02\u04B7\u04B8\x03\x02\x02\x02\u04B8\u04BB\x05\u0104\x83\x02" +
    "\u04B9\u04BA\x070\x02\x02\u04BA\u04BC\x05\u011E\x90\x02\u04BB\u04B9\x03" +
    "\x02\x02\x02\u04BB\u04BC\x03\x02\x02\x02\u04BC\xBB\x03\x02\x02\x02\u04BD" +
    "\u04C2\x05\xBE`\x02\u04BE\u04BF\x07\xD0\x02\x02\u04BF\u04C1\x05\xBE`\x02" +
    "\u04C0\u04BE\x03\x02\x02\x02\u04C1\u04C4\x03\x02\x02\x02\u04C2\u04C0\x03" +
    "\x02\x02\x02\u04C2\u04C3\x03\x02\x02\x02\u04C3\xBD\x03\x02\x02\x02\u04C4" +
    "\u04C2\x03\x02\x02\x02\u04C5\u04C7\x05\xC0a\x02\u04C6\u04C8\x05\u010C" +
    "\x87\x02\u04C7\u04C6\x03\x02\x02\x02\u04C7\u04C8\x03\x02\x02\x02\u04C8" +
    "\u04D5\x03\x02\x02\x02\u04C9\u04CB\x05\xCAf\x02\u04CA\u04CC\x05\u010C" +
    "\x87\x02\u04CB\u04CA\x03\x02\x02\x02\u04CB\u04CC\x03\x02\x02\x02\u04CC" +
    "\u04D5\x03\x02\x02\x02\u04CD\u04CE\x07\xC9\x02\x02\u04CE\u04CF\x05\xBA" +
    "^\x02\u04CF\u04D1\x07\xCA\x02\x02\u04D0\u04D2\x05\u010C\x87\x02\u04D1" +
    "\u04D0\x03\x02\x02\x02\u04D1\u04D2\x03\x02\x02\x02\u04D2\u04D5\x03\x02" +
    "\x02\x02\u04D3\u04D5\x05\xD2j\x02\u04D4\u04C5\x03\x02\x02\x02\u04D4\u04C9" +
    "\x03\x02\x02\x02\u04D4\u04CD\x03\x02\x02\x02\u04D4\u04D3\x03\x02\x02\x02" +
    "\u04D5\xBF\x03\x02\x02\x02\u04D6\u04DB\x05\u010C\x87\x02\u04D7\u04D8\x07" +
    "\xD1\x02\x02\u04D8\u04DA\x05\u010C\x87\x02\u04D9\u04D7\x03\x02\x02\x02" +
    "\u04DA\u04DD\x03\x02\x02\x02\u04DB\u04D9\x03\x02\x02\x02\u04DB\u04DC\x03" +
    "\x02\x02\x02\u04DC\xC1\x03\x02\x02\x02\u04DD\u04DB\x03\x02\x02\x02\u04DE" +
    "\u04E0\x05\xC0a\x02\u04DF\u04E1\x05\u010C\x87\x02\u04E0\u04DF\x03\x02" +
    "\x02\x02\u04E0\u04E1\x03\x02\x02\x02\u04E1\u04E9\x03\x02\x02\x02\u04E2" +
    "\u04E3\x07\xD0\x02\x02\u04E3\u04E5\x05\xC0a\x02\u04E4\u04E6\x05\u010C" +
    "\x87\x02\u04E5\u04E4\x03\x02\x02\x02\u04E5\u04E6\x03\x02\x02\x02\u04E6" +
    "\u04E8\x03\x02\x02\x02\u04E7\u04E2\x03\x02\x02\x02\u04E8\u04EB\x03\x02" +
    "\x02\x02\u04E9\u04E7\x03\x02\x02\x02\u04E9\u04EA\x03\x02\x02\x02\u04EA" +
    "\xC3\x03\x02\x02\x02\u04EB\u04E9\x03\x02\x02\x02\u04EC\u04F1\x05\xC6d" +
    "\x02\u04ED\u04EE\x07\xD0\x02\x02\u04EE\u04F0\x05\xC6d\x02\u04EF\u04ED" +
    "\x03\x02\x02\x02\u04F0\u04F3\x03\x02\x02\x02\u04F1\u04EF\x03\x02\x02\x02" +
    "\u04F1\u04F2\x03\x02\x02\x02\u04F2\xC5\x03\x02\x02\x02\u04F3\u04F1\x03" +
    "\x02\x02\x02\u04F4\u04F6\x05\xC0a\x02\u04F5\u04F7\x05\u010C\x87\x02\u04F6" +
    "\u04F5\x03\x02\x02\x02\u04F6\u04F7\x03\x02\x02\x02\u04F7\u0504\x03\x02" +
    "\x02\x02\u04F8\u04FA\x05\xCAf\x02\u04F9\u04FB\x05\u010C\x87\x02\u04FA" +
    "\u04F9\x03\x02\x02\x02\u04FA\u04FB\x03\x02\x02\x02\u04FB\u0504\x03\x02" +
    "\x02\x02\u04FC\u04FD\x07\xC9\x02\x02\u04FD\u04FE\x05\xBA^\x02\u04FE\u0500" +
    "\x07\xCA\x02\x02\u04FF\u0501\x05\u010C\x87\x02\u0500\u04FF\x03\x02\x02" +
    "\x02\u0500\u0501\x03\x02\x02\x02\u0501\u0504\x03\x02\x02\x02\u0502\u0504" +
    "\x05\xD2j\x02\u0503\u04F4\x03\x02\x02\x02\u0503\u04F8\x03\x02\x02\x02" +
    "\u0503\u04FC\x03\x02\x02\x02\u0503\u0502\x03\x02\x02\x02\u0504\xC7\x03" +
    "\x02\x02\x02\u0505\u0506\t\x0F\x02\x02\u0506\xC9\x03\x02\x02\x02\u0507" +
    "\u0508\x07J\x02\x02\u0508\u0509\x07\xC9\x02\x02\u0509\u050A\x05\xC0a\x02" +
    "\u050A\u050B\x07\xCA\x02\x02\u050B\u0587\x03\x02\x02\x02\u050C\u050D\x07" +
    ">\x02\x02\u050D\u050E\x07\xC9\x02\x02\u050E\u0587\x07\xCA\x02\x02\u050F" +
    "\u0510\x07>\x02\x02\u0510\u0511\x07\xC9\x02\x02\u0511\u0512\x05\xC0a\x02" +
    "\u0512\u0513\x07\xCA\x02\x02\u0513\u0587\x03\x02\x02\x02\u0514\u0515\x07" +
    "K\x02\x02\u0515\u0516\x07\xC9\x02\x02\u0516\u0517\x05\xC0a\x02\u0517\u0518" +
    "\x07\xCA\x02\x02\u0518\u0587\x03\x02\x02\x02\u0519\u051A\x07L\x02\x02" +
    "\u051A\u051B\x07\xC9\x02\x02\u051B\u051C\x05\xC0a\x02\u051C\u051D\x07" +
    "\xCA\x02\x02\u051D\u0587\x03\x02\x02\x02\u051E\u051F\x07M\x02\x02\u051F" +
    "\u0520\x07\xC9\x02\x02\u0520\u0521\x05\xC0a\x02\u0521\u0522\x07\xCA\x02" +
    "\x02\u0522\u0587\x03\x02\x02\x02\u0523\u0524\x07N\x02\x02\u0524\u0525" +
    "\x07\xC9\x02\x02\u0525\u0526\x05\xC0a\x02\u0526\u0527\x07\xCA\x02\x02" +
    "\u0527\u0587\x03\x02\x02\x02\u0528\u0529\x07a\x02\x02\u0529\u052A\x07" +
    "\xC9\x02\x02\u052A\u052B\x05\xC0a\x02\u052B\u052C\x07\xCA\x02\x02\u052C" +
    "\u0587\x03\x02\x02\x02\u052D\u052E\x07n\x02\x02\u052E\u052F\x07\xC9\x02" +
    "\x02\u052F\u0530\x05\xC0a\x02\u0530\u0531\x07\xCA\x02\x02\u0531\u0587" +
    "\x03\x02\x02\x02\u0532\u0533\x07v\x02\x02\u0533\u0534\x07\xC9\x02\x02" +
    "\u0534\u0535\x05\xCCg\x02\u0535\u0536\x07\xCA\x02\x02\u0536\u0587\x03" +
    "\x02\x02\x02\u0537\u0538\x07w\x02\x02\u0538\u0539\x07\xC9\x02\x02\u0539" +
    "\u053A\x05\xCCg\x02\u053A\u053B\x07\xCA\x02\x02\u053B\u0587\x03\x02\x02" +
    "\x02\u053C\u053D\x07x\x02\x02\u053D\u053E\x07\xC9\x02\x02\u053E\u053F" +
    "\x05\xCCg\x02\u053F\u0540\x07\xCA\x02\x02\u0540\u0587\x03\x02\x02\x02" +
    "\u0541\u0542\x07y\x02\x02\u0542\u0543\x07\xC9\x02\x02\u0543\u0544\x05" +
    "\xCCg\x02\u0544\u0545\x07\xCA\x02\x02\u0545\u0587\x03\x02\x02\x02\u0546" +
    "\u0547\x07z\x02\x02\u0547\u0548\x07\xC9\x02\x02\u0548\u0549\x05\xCCg\x02" +
    "\u0549\u054A\x07\xCA\x02\x02\u054A\u0587\x03\x02\x02\x02\u054B\u054C\x07" +
    "{\x02\x02\u054C\u054D\x07\xC9\x02\x02\u054D\u054E\x05\xCCg\x02\u054E\u054F" +
    "\x07\xCA\x02\x02\u054F\u0587\x03\x02\x02\x02\u0550\u0551\x07|\x02\x02" +
    "\u0551\u0552\x07\xC9\x02\x02\u0552\u0553\x05\xCCg\x02\u0553\u0554\x07" +
    "\xCA\x02\x02\u0554\u0587\x03\x02\x02\x02\u0555\u0556\x07}\x02\x02\u0556" +
    "\u0557\x07\xC9\x02\x02\u0557\u0558\x05\xCCg\x02\u0558\u0559\x07\xCA\x02" +
    "\x02\u0559\u0587\x03\x02\x02\x02\u055A\u055B\x07~\x02\x02\u055B\u055C" +
    "\x07\xC9\x02\x02\u055C\u055D\x05\xCCg\x02\u055D\u055E\x07\xCA\x02\x02" +
    "\u055E\u0587\x03\x02\x02\x02\u055F\u0560\x07\x7F\x02\x02\u0560\u0561\x07" +
    "\xC9\x02\x02\u0561\u0562\x05\xCCg\x02\u0562\u0563\x07\xCA\x02\x02\u0563" +
    "\u0587\x03\x02\x02\x02\u0564\u0565\x07\x80\x02\x02\u0565\u0566\x07\xC9" +
    "\x02\x02\u0566\u0567\x05\xCCg\x02\u0567\u0568\x07\xCA\x02\x02\u0568\u0587" +
    "\x03\x02\x02\x02\u0569\u056A\x07\x81\x02\x02\u056A\u056B\x07\xC9\x02\x02" +
    "\u056B\u056C\x05\xCCg\x02\u056C\u056D\x07\xCA\x02\x02\u056D\u0587\x03" +
    "\x02\x02\x02\u056E\u056F\x07\x82\x02\x02\u056F\u0570\x07\xC9\x02\x02\u0570" +
    "\u0571\x05\xCCg\x02\u0571\u0572\x07\xCA\x02\x02\u0572\u0587\x03\x02\x02" +
    "\x02\u0573\u0574\x07\xB8\x02\x02\u0574\u0575\x07\xC9\x02\x02\u0575\u0576" +
    "\x05\xC8e\x02\u0576\u0577\x07\xCA\x02\x02\u0577\u0587\x03\x02\x02\x02" +
    "\u0578\u0579\x07s\x02\x02\u0579\u057A\x07\xC9\x02\x02\u057A\u057B\x05" +
    "\xCEh\x02\u057B\u057C\x07\xD0\x02\x02\u057C\u057D\x05\xCEh\x02\u057D\u057E" +
    "\x07\xD0\x02\x02\u057E\u057F\x07\xC7\x02\x02\u057F\u0580\x07\xCA\x02\x02" +
    "\u0580\u0587\x03\x02\x02\x02\u0581\u0582\x07u\x02\x02\u0582\u0583\x07" +
    "\xC9\x02\x02\u0583\u0584\x05\xC0a\x02\u0584\u0585\x07\xCA\x02\x02\u0585" +
    "\u0587\x03\x02\x02\x02\u0586\u0507\x03\x02\x02\x02\u0586\u050C\x03\x02" +
    "\x02\x02\u0586\u050F\x03\x02\x02\x02\u0586\u0514\x03\x02\x02\x02\u0586" +
    "\u0519\x03\x02\x02\x02\u0586\u051E\x03\x02\x02\x02\u0586\u0523\x03\x02" +
    "\x02\x02\u0586\u0528\x03\x02\x02\x02\u0586\u052D\x03\x02\x02\x02\u0586" +
    "\u0532\x03\x02\x02\x02\u0586\u0537\x03\x02\x02\x02\u0586\u053C\x03\x02" +
    "\x02\x02\u0586\u0541\x03\x02\x02\x02\u0586\u0546\x03\x02\x02\x02\u0586" +
    "\u054B\x03\x02\x02\x02\u0586\u0550\x03\x02\x02\x02\u0586\u0555\x03\x02" +
    "\x02\x02\u0586\u055A\x03\x02\x02\x02\u0586\u055F\x03\x02\x02\x02\u0586" +
    "\u0564\x03\x02\x02\x02\u0586\u0569\x03\x02\x02\x02\u0586\u056E\x03\x02" +
    "\x02\x02\u0586\u0573\x03\x02\x02\x02\u0586\u0578\x03\x02\x02\x02\u0586" +
    "\u0581\x03\x02\x02\x02\u0587\xCB\x03\x02\x02\x02\u0588\u0589\x07\x83\x02" +
    "\x02\u0589\u058A\x07\xC9\x02\x02\u058A\u058B\x05\xC0a\x02\u058B\u058C" +
    "\x07\xCA\x02\x02\u058C\u058F\x03\x02\x02\x02\u058D\u058F\x05\xC0a\x02" +
    "\u058E\u0588\x03\x02\x02\x02\u058E\u058D\x03\x02\x02\x02\u058F\xCD\x03" +
    "\x02\x02\x02\u0590\u059A\x05\xC0a\x02\u0591\u059A\x05\u0106\x84\x02\u0592" +
    "\u0593\x07t\x02\x02\u0593\u0594\x07\xC9\x02\x02\u0594\u0595\x05\xD0i\x02" +
    "\u0595\u0596\x07\xD0\x02\x02\u0596\u0597\x05\xD0i\x02\u0597\u0598\x07" +
    "\xCA\x02\x02\u0598\u059A\x03\x02\x02\x02\u0599\u0590\x03\x02\x02\x02\u0599" +
    "\u0591\x03\x02\x02\x02\u0599\u0592\x03\x02\x02\x02\u059A\xCF\x03\x02\x02" +
    "\x02\u059B\u059E\x05\xEAv\x02\u059C\u059E\x05\u0106\x84\x02\u059D\u059B" +
    "\x03\x02\x02\x02\u059D\u059C\x03\x02\x02\x02\u059E\xD1\x03\x02\x02\x02" +
    "\u059F\u05A0\x07O\x02\x02\u05A0\u05A2\x05\xC0a\x02\u05A1\u05A3\x05\xD4" +
    "k\x02\u05A2\u05A1\x03\x02\x02\x02\u05A3\u05A4\x03\x02\x02\x02\u05A4\u05A2" +
    "\x03\x02\x02\x02\u05A4\u05A5\x03\x02\x02\x02\u05A5\u05A7\x03\x02\x02\x02" +
    "\u05A6\u05A8\x05\xD6l\x02\u05A7\u05A6\x03\x02\x02\x02\u05A7\u05A8\x03" +
    "\x02\x02\x02\u05A8\u05A9\x03\x02\x02\x02\u05A9\u05AA\x07P\x02\x02\u05AA" +
    "\xD3\x03\x02\x02\x02\u05AB\u05AC\x075\x02\x02\u05AC\u05AD\x05\xC0a\x02" +
    "\u05AD\u05AE\x07Q\x02\x02\u05AE\u05AF\x05\xD8m\x02\u05AF\xD5\x03\x02\x02" +
    "\x02\u05B0\u05B1\x07\f\x02\x02\u05B1\u05B2\x05\xD8m\x02\u05B2\xD7\x03" +
    "\x02\x02\x02\u05B3\u05B8\x05\xC0a\x02\u05B4\u05B5\x07\xD0\x02\x02\u05B5" +
    "\u05B7\x05\xC0a\x02\u05B6\u05B4\x03\x02\x02\x02\u05B7\u05BA\x03\x02\x02" +
    "\x02\u05B8\u05B6\x03\x02\x02\x02\u05B8\u05B9\x03\x02\x02\x02\u05B9\xD9" +
    "\x03\x02\x02\x02\u05BA\u05B8\x03\x02\x02\x02\u05BB\u05BC\x07A\x02\x02" +
    "\u05BC\u05BD\x07B\x02\x02\u05BD\u05BE\x05\u010C\x87\x02\u05BE\xDB\x03" +
    "\x02\x02\x02\u05BF\u05C0\x07C\x02\x02\u05C0\u05C1\x05\xDEp\x02\u05C1\xDD" +
    "\x03\x02\x02\x02\u05C2\u05C7\x05\xE0q\x02\u05C3\u05C4\x07G\x02\x02\u05C4" +
    "\u05C6\x05\xE0q\x02\u05C5\u05C3\x03\x02\x02\x02\u05C6\u05C9\x03\x02\x02" +
    "\x02\u05C7\u05C5\x03\x02\x02\x02\u05C7\u05C8\x03\x02\x02\x02\u05C8\u05D5" +
    "\x03\x02\x02\x02\u05C9\u05C7\x03\x02\x02\x02\u05CA\u05CF\x05\xE0q\x02" +
    "\u05CB\u05CC\x07H\x02\x02\u05CC\u05CE\x05\xE0q\x02\u05CD\u05CB\x03\x02" +
    "\x02\x02\u05CE\u05D1\x03\x02\x02\x02\u05CF\u05CD\x03\x02\x02\x02\u05CF" +
    "\u05D0\x03\x02\x02\x02\u05D0\u05D5\x03\x02\x02\x02\u05D1\u05CF\x03\x02" +
    "\x02\x02\u05D2\u05D3\x07I\x02\x02\u05D3\u05D5\x05\xE0q\x02\u05D4\u05C2" +
    "\x03\x02\x02\x02\u05D4\u05CA\x03\x02\x02\x02\u05D4\u05D2\x03\x02\x02\x02" +
    "\u05D5\xDF\x03\x02\x02\x02\u05D6\u05D7\x07\xC9\x02\x02\u05D7\u05D8\x05" +
    "\xDEp\x02\u05D8\u05D9\x07\xCA\x02\x02\u05D9\u05DC\x03\x02\x02\x02\u05DA" +
    "\u05DC\x05\xE2r\x02\u05DB\u05D6\x03\x02\x02\x02\u05DB\u05DA\x03\x02\x02" +
    "\x02\u05DC\xE1\x03\x02\x02\x02\u05DD\u05DE\x05\xC0a\x02\u05DE\u05DF\x05" +
    "\xE4s\x02\u05DF\u05E0\x05\xE6t\x02\u05E0\u05E6\x03\x02\x02\x02\u05E1\u05E2" +
    "\x05\xCAf\x02\u05E2\u05E3\x05\xE4s\x02\u05E3\u05E4\x05\xE6t\x02\u05E4" +
    "\u05E6\x03\x02\x02\x02\u05E5\u05DD\x03\x02\x02\x02\u05E5\u05E1\x03\x02" +
    "\x02\x02\u05E6\xE3\x03\x02\x02\x02\u05E7\u05F7\x07\xD2\x02\x02\u05E8\u05F7" +
    "\x07\xDC\x02\x02\u05E9\u05F7\x07\xD4\x02\x02\u05EA\u05F7\x07\xD3\x02\x02" +
    "\u05EB\u05EC\x07\xD4\x02\x02\u05EC\u05F7\x07\xD2\x02\x02\u05ED\u05EE\x07" +
    "\xD3\x02\x02\u05EE\u05F7\x07\xD2\x02\x02\u05EF\u05F7\x07\xDD\x02\x02\u05F0" +
    "\u05F7\x07R\x02\x02\u05F1\u05F7\x07S\x02\x02\u05F2\u05F3\x07I\x02\x02" +
    "\u05F3\u05F7\x07S\x02\x02\u05F4\u05F7\x07T\x02\x02\u05F5\u05F7\x07U\x02" +
    "\x02\u05F6\u05E7\x03\x02\x02\x02\u05F6\u05E8\x03\x02\x02\x02\u05F6\u05E9" +
    "\x03\x02\x02\x02\u05F6\u05EA\x03\x02\x02\x02\u05F6\u05EB\x03\x02\x02\x02" +
    "\u05F6\u05ED\x03\x02\x02\x02\u05F6\u05EF\x03\x02\x02\x02\u05F6\u05F0\x03" +
    "\x02\x02\x02\u05F6\u05F1\x03\x02\x02\x02\u05F6\u05F2\x03\x02\x02\x02\u05F6" +
    "\u05F4\x03\x02\x02\x02\u05F6\u05F5\x03\x02\x02\x02\u05F7\xE5\x03\x02\x02" +
    "\x02\u05F8\u060D\x07\x1C\x02\x02\u05F9\u060D\x07\xC6\x02\x02\u05FA\u060D" +
    "\x05\xEAv\x02\u05FB\u060D\x07\xC7\x02\x02\u05FC\u060D\x07\xB0\x02\x02" +
    "\u05FD\u060D\x07\xB1\x02\x02\u05FE\u060D\x05\u0108\x85\x02\u05FF\u0604" +
    "\x07\xB2\x02\x02\u0600\u0602\x07\xD1\x02\x02\u0601\u0603\x07\xC3\x02\x02" +
    "\u0602\u0601\x03\x02\x02\x02\u0602\u0603\x03\x02\x02\x02\u0603\u0605\x03" +
    "\x02\x02\x02\u0604\u0600\x03\x02\x02\x02\u0604\u0605\x03\x02\x02\x02\u0605" +
    "\u060D\x03\x02\x02\x02\u0606\u0607\x07\xC9\x02\x02\u0607\u0608\x05\xBA" +
    "^\x02\u0608\u0609\x07\xCA\x02\x02\u0609\u060D\x03\x02\x02\x02\u060A\u060D" +
    "\x05\xE8u\x02\u060B\u060D\x05\u0106\x84\x02\u060C\u05F8\x03\x02\x02\x02" +
    "\u060C\u05F9\x03\x02\x02\x02\u060C\u05FA\x03\x02\x02\x02\u060C\u05FB\x03" +
    "\x02\x02\x02\u060C\u05FC\x03\x02\x02\x02\u060C\u05FD\x03\x02\x02\x02\u060C" +
    "\u05FE\x03\x02\x02\x02\u060C\u05FF\x03\x02\x02\x02\u060C\u0606\x03\x02" +
    "\x02\x02\u060C\u060A\x03\x02\x02\x02\u060C\u060B\x03\x02\x02\x02\u060D" +
    "\xE7\x03\x02\x02\x02\u060E\u060F\x07\xC9\x02\x02\u060F\u0614\x05\xE6t" +
    "\x02\u0610\u0611\x07\xD0\x02\x02\u0611\u0613\x05\xE6t\x02\u0612\u0610" +
    "\x03\x02\x02\x02\u0613\u0616\x03\x02\x02\x02\u0614\u0612\x03\x02\x02\x02" +
    "\u0614\u0615\x03\x02\x02\x02\u0615\u0617\x03\x02\x02\x02\u0616\u0614\x03" +
    "\x02\x02\x02\u0617\u0618\x07\xCA\x02\x02\u0618\xE9\x03\x02\x02\x02\u0619" +
    "\u061B\t\x05\x02\x02\u061A\u0619\x03\x02\x02\x02\u061A\u061B\x03\x02\x02" +
    "\x02\u061B\u061C\x03\x02\x02\x02\u061C\u061D\t\x10\x02\x02\u061D\xEB\x03" +
    "\x02\x02\x02\u061E\u061F\x077\x02\x02\u061F\u0620\x07c\x02\x02\u0620\u0621" +
    "\x07d\x02\x02\u0621\u062B\x05\xEEx\x02\u0622\u0623\x077\x02\x02\u0623" +
    "\u062B\x07i\x02\x02\u0624\u0625\x077\x02\x02\u0625\u062B\x07j\x02\x02" +
    "\u0626\u0627\x077\x02\x02\u0627\u062B\x07k\x02\x02\u0628\u0629\x077\x02" +
    "\x02\u0629\u062B\x05\xDEp\x02\u062A\u061E\x03\x02\x02\x02\u062A\u0622" +
    "\x03\x02\x02\x02\u062A\u0624\x03\x02\x02\x02\u062A\u0626\x03\x02\x02\x02" +
    "\u062A\u0628\x03\x02\x02\x02\u062B\xED\x03\x02\x02\x02\u062C\u0631\x05" +
    "\xF0y\x02\u062D\u062E\x07\xDF\x02\x02\u062E\u0630\x05\xF0y\x02\u062F\u062D" +
    "\x03\x02\x02\x02\u0630\u0633\x03\x02\x02\x02\u0631\u062F\x03\x02\x02\x02" +
    "\u0631\u0632\x03\x02\x02\x02\u0632\xEF\x03\x02\x02\x02\u0633\u0631\x03" +
    "\x02\x02\x02\u0634\u0635\x05\u010C\x87\x02\u0635\u0636\x05\xF4{\x02\u0636" +
    "\u0637\x05\xF2z\x02\u0637\xF1\x03\x02\x02\x02\u0638\u0645\x05\u010C\x87" +
    "\x02\u0639\u063A\x07\xC9\x02\x02\u063A\u063F\x05\u010C\x87\x02\u063B\u063C" +
    "\x07";
ApexParser._serializedATNSegment3 = "\xD0\x02\x02\u063C\u063E\x05\u010C\x87\x02\u063D\u063B\x03\x02\x02\x02" +
    "\u063E\u0641\x03\x02\x02\x02\u063F\u063D\x03\x02\x02\x02\u063F\u0640\x03" +
    "\x02\x02\x02\u0640\u0642\x03\x02\x02\x02\u0641\u063F\x03\x02\x02\x02\u0642" +
    "\u0643\x07\xC9\x02\x02\u0643\u0645\x03\x02\x02\x02\u0644\u0638\x03\x02" +
    "\x02\x02\u0644\u0639\x03\x02\x02\x02\u0645\xF3\x03\x02\x02\x02\u0646\u0647" +
    "\t\x11\x02\x02\u0647\xF5\x03\x02\x02\x02\u0648\u0649\x07[\x02\x02\u0649" +
    "\u064A\x07E\x02\x02\u064A\u064D\x05\xBC_\x02\u064B\u064C\x07_\x02\x02" +
    "\u064C\u064E\x05\xDEp\x02\u064D\u064B\x03\x02\x02\x02\u064D\u064E\x03" +
    "\x02\x02\x02\u064E\u066C\x03\x02\x02\x02\u064F\u0650\x07[\x02\x02\u0650" +
    "\u0651\x07E\x02\x02\u0651\u0652\x07`\x02\x02\u0652\u0653\x07\xC9\x02\x02" +
    "\u0653\u0658\x05\xC0a\x02\u0654\u0655\x07\xD0\x02\x02\u0655\u0657\x05" +
    "\xC0a\x02\u0656\u0654\x03\x02\x02\x02\u0657\u065A\x03\x02\x02\x02\u0658" +
    "\u0656\x03\x02\x02\x02\u0658\u0659\x03\x02\x02\x02\u0659\u065B\x03\x02" +
    "\x02\x02\u065A\u0658\x03\x02\x02\x02\u065B\u065C\x07\xCA\x02\x02\u065C" +
    "\u066C\x03\x02\x02\x02\u065D\u065E\x07[\x02\x02\u065E\u065F\x07E\x02\x02" +
    "\u065F\u0660\x07m\x02\x02\u0660\u0661\x07\xC9\x02\x02\u0661\u0666\x05" +
    "\xC0a\x02\u0662\u0663\x07\xD0\x02\x02\u0663\u0665\x05\xC0a\x02\u0664\u0662" +
    "\x03\x02\x02\x02\u0665\u0668\x03\x02\x02\x02\u0666\u0664\x03\x02\x02\x02" +
    "\u0666\u0667\x03\x02\x02\x02\u0667\u0669\x03\x02\x02\x02\u0668\u0666\x03" +
    "\x02\x02\x02\u0669\u066A\x07\xCA\x02\x02\u066A\u066C\x03\x02\x02\x02\u066B" +
    "\u0648\x03\x02\x02\x02\u066B\u064F\x03\x02\x02\x02\u066B\u065D\x03\x02" +
    "\x02\x02\u066C\xF7\x03\x02\x02\x02\u066D\u066E\x07D\x02\x02\u066E\u066F" +
    "\x07E\x02\x02\u066F\u0670\x05\xFA~\x02\u0670\xF9\x03\x02\x02\x02\u0671" +
    "\u0676\x05\xFC\x7F\x02\u0672\u0673\x07\xD0\x02\x02\u0673\u0675\x05\xFC" +
    "\x7F\x02\u0674\u0672\x03\x02\x02\x02\u0675\u0678\x03\x02\x02\x02\u0676" +
    "\u0674\x03\x02\x02\x02\u0676\u0677\x03\x02\x02\x02\u0677\xFB\x03\x02\x02" +
    "\x02\u0678\u0676\x03\x02\x02\x02\u0679\u067B\x05\xC0a\x02\u067A\u067C" +
    "\t\x12\x02\x02\u067B\u067A\x03\x02\x02\x02\u067B\u067C\x03\x02\x02\x02" +
    "\u067C\u067F\x03\x02\x02\x02\u067D\u067E\x07X\x02\x02\u067E\u0680\t\x13" +
    "\x02\x02\u067F\u067D\x03\x02\x02\x02\u067F\u0680\x03\x02\x02\x02\u0680" +
    "\u068A\x03\x02\x02\x02\u0681\u0683\x05\xCAf\x02\u0682\u0684\t\x12\x02" +
    "\x02\u0683\u0682\x03\x02\x02\x02\u0683\u0684\x03\x02\x02\x02\u0684\u0687" +
    "\x03\x02\x02\x02\u0685\u0686\x07X\x02\x02\u0686\u0688\t\x13\x02\x02\u0687" +
    "\u0685\x03\x02\x02\x02\u0687\u0688\x03\x02\x02\x02\u0688\u068A\x03\x02" +
    "\x02\x02\u0689\u0679\x03\x02\x02\x02\u0689\u0681\x03\x02\x02\x02\u068A" +
    "\xFD\x03\x02\x02\x02\u068B\u068C\x07F\x02\x02\u068C\u0690\x07\xC3\x02" +
    "\x02\u068D\u068E\x07F\x02\x02\u068E\u0690\x05\u0106\x84\x02\u068F\u068B" +
    "\x03\x02\x02\x02\u068F\u068D\x03\x02\x02\x02\u0690\xFF\x03\x02\x02\x02" +
    "\u0691\u0692\x07b\x02\x02\u0692\u0696\x07\xC3\x02\x02\u0693\u0694\x07" +
    "b\x02\x02\u0694\u0696\x05\u0106\x84\x02\u0695\u0691\x03\x02\x02\x02\u0695" +
    "\u0693\x03\x02\x02\x02\u0696\u0101\x03\x02\x02\x02\u0697\u0698\x07\\\x02" +
    "\x02\u0698\u0699\x07]\x02\x02\u0699\u0103\x03\x02\x02\x02\u069A\u069B" +
    "\x07\x11\x02\x02\u069B\u069D\t\x14\x02\x02\u069C\u069A\x03\x02\x02\x02" +
    "\u069D\u06A0\x03\x02\x02\x02\u069E\u069C\x03\x02\x02\x02\u069E\u069F\x03" +
    "\x02\x02\x02\u069F\u0105\x03\x02\x02\x02\u06A0\u069E\x03\x02\x02\x02\u06A1" +
    "\u06A2\x07\xD9\x02\x02\u06A2\u06A3\x05\x9AN\x02\u06A3\u0107\x03\x02\x02" +
    "\x02\u06A4\u06FB\x07\x84\x02\x02\u06A5\u06FB\x07\x85\x02\x02\u06A6\u06FB" +
    "\x07\x86\x02\x02\u06A7\u06FB\x07\x87\x02\x02\u06A8\u06FB\x07\x88\x02\x02" +
    "\u06A9\u06FB\x07\x89\x02\x02\u06AA\u06FB\x07\x8A\x02\x02\u06AB\u06FB\x07" +
    "\x8B\x02\x02\u06AC\u06FB\x07\x8C\x02\x02\u06AD\u06FB\x07\x8D\x02\x02\u06AE" +
    "\u06FB\x07\x8E\x02\x02\u06AF\u06B0\x07\x8F\x02\x02\u06B0\u06B1\x07\xD9" +
    "\x02\x02\u06B1\u06FB\x05\u010A\x86\x02\u06B2\u06B3\x07\x90\x02\x02\u06B3" +
    "\u06B4\x07\xD9\x02\x02\u06B4\u06FB\x05\u010A\x86\x02\u06B5\u06B6\x07\x91" +
    "\x02\x02\u06B6\u06B7\x07\xD9\x02\x02\u06B7\u06FB\x05\u010A\x86\x02\u06B8" +
    "\u06B9\x07\x92\x02\x02\u06B9\u06BA\x07\xD9\x02\x02\u06BA\u06FB\x05\u010A" +
    "\x86\x02\u06BB\u06BC\x07\x93\x02\x02\u06BC\u06BD\x07\xD9\x02\x02\u06BD" +
    "\u06FB\x05\u010A\x86\x02\u06BE\u06BF\x07\x94\x02\x02\u06BF\u06C0\x07\xD9" +
    "\x02\x02\u06C0\u06FB\x05\u010A\x86\x02\u06C1\u06C2\x07\x95\x02\x02\u06C2" +
    "\u06C3\x07\xD9\x02\x02\u06C3\u06FB\x05\u010A\x86\x02\u06C4\u06C5\x07\x96" +
    "\x02\x02\u06C5\u06C6\x07\xD9\x02\x02\u06C6\u06FB\x05\u010A\x86\x02\u06C7" +
    "\u06C8\x07\x97\x02\x02\u06C8\u06C9\x07\xD9\x02\x02\u06C9\u06FB\x05\u010A" +
    "\x86\x02\u06CA\u06FB\x07\x98\x02\x02\u06CB\u06FB\x07\x99\x02\x02\u06CC" +
    "\u06FB\x07\x9A\x02\x02\u06CD\u06CE\x07\x9B\x02\x02\u06CE\u06CF\x07\xD9" +
    "\x02\x02\u06CF\u06FB\x05\u010A\x86\x02\u06D0\u06D1\x07\x9C\x02\x02\u06D1" +
    "\u06D2\x07\xD9\x02\x02\u06D2\u06FB\x05\u010A\x86\x02\u06D3\u06D4\x07\x9D" +
    "\x02\x02\u06D4\u06D5\x07\xD9\x02\x02\u06D5\u06FB\x05\u010A\x86\x02\u06D6" +
    "\u06FB\x07\x9E\x02\x02\u06D7\u06FB\x07\x9F\x02\x02\u06D8\u06FB\x07\xA0" +
    "\x02\x02\u06D9\u06DA\x07\xA1\x02\x02\u06DA\u06DB\x07\xD9\x02\x02\u06DB" +
    "\u06FB\x05\u010A\x86\x02\u06DC\u06DD\x07\xA2\x02\x02\u06DD\u06DE\x07\xD9" +
    "\x02\x02\u06DE\u06FB\x05\u010A\x86\x02\u06DF\u06E0\x07\xA3\x02\x02\u06E0" +
    "\u06E1\x07\xD9\x02\x02\u06E1\u06FB\x05\u010A\x86\x02\u06E2\u06FB\x07\xA4" +
    "\x02\x02\u06E3\u06FB\x07\xA5\x02\x02\u06E4\u06FB\x07\xA6\x02\x02\u06E5" +
    "\u06E6\x07\xA7\x02\x02\u06E6\u06E7\x07\xD9\x02\x02\u06E7\u06FB\x05\u010A" +
    "\x86\x02\u06E8\u06E9\x07\xA8\x02\x02\u06E9\u06EA\x07\xD9\x02\x02\u06EA" +
    "\u06FB\x05\u010A\x86\x02\u06EB\u06EC\x07\xA9\x02\x02\u06EC\u06ED\x07\xD9" +
    "\x02\x02\u06ED\u06FB\x05\u010A\x86\x02\u06EE\u06FB\x07\xAA\x02\x02\u06EF" +
    "\u06FB\x07\xAB\x02\x02\u06F0\u06FB\x07\xAC\x02\x02\u06F1\u06F2\x07\xAD" +
    "\x02\x02\u06F2\u06F3\x07\xD9\x02\x02\u06F3\u06FB\x05\u010A\x86\x02\u06F4" +
    "\u06F5\x07\xAE\x02\x02\u06F5\u06F6\x07\xD9\x02\x02\u06F6\u06FB\x05\u010A" +
    "\x86\x02\u06F7\u06F8\x07\xAF\x02\x02\u06F8\u06F9\x07\xD9\x02\x02\u06F9" +
    "\u06FB\x05\u010A\x86\x02\u06FA\u06A4\x03\x02\x02\x02\u06FA\u06A5\x03\x02" +
    "\x02\x02\u06FA\u06A6\x03\x02\x02\x02\u06FA\u06A7\x03\x02\x02\x02\u06FA" +
    "\u06A8\x03\x02\x02\x02\u06FA\u06A9\x03\x02\x02\x02\u06FA\u06AA\x03\x02" +
    "\x02\x02\u06FA\u06AB\x03\x02\x02\x02\u06FA\u06AC\x03\x02\x02\x02\u06FA" +
    "\u06AD\x03\x02\x02\x02\u06FA\u06AE\x03\x02\x02\x02\u06FA\u06AF\x03\x02" +
    "\x02\x02\u06FA\u06B2\x03\x02\x02\x02\u06FA\u06B5\x03\x02\x02\x02\u06FA" +
    "\u06B8\x03\x02\x02\x02\u06FA\u06BB\x03\x02\x02\x02\u06FA\u06BE\x03\x02" +
    "\x02\x02\u06FA\u06C1\x03\x02\x02\x02\u06FA\u06C4\x03\x02\x02\x02\u06FA" +
    "\u06C7\x03\x02\x02\x02\u06FA\u06CA\x03\x02\x02\x02\u06FA\u06CB\x03\x02" +
    "\x02\x02\u06FA\u06CC\x03\x02\x02\x02\u06FA\u06CD\x03\x02\x02\x02\u06FA" +
    "\u06D0\x03\x02\x02\x02\u06FA\u06D3\x03\x02\x02\x02\u06FA\u06D6\x03\x02" +
    "\x02\x02\u06FA\u06D7\x03\x02\x02\x02\u06FA\u06D8\x03\x02\x02\x02\u06FA" +
    "\u06D9\x03\x02\x02\x02\u06FA\u06DC\x03\x02\x02\x02\u06FA\u06DF\x03\x02" +
    "\x02\x02\u06FA\u06E2\x03\x02\x02\x02\u06FA\u06E3\x03\x02\x02\x02\u06FA" +
    "\u06E4\x03\x02\x02\x02\u06FA\u06E5\x03\x02\x02\x02\u06FA\u06E8\x03\x02" +
    "\x02\x02\u06FA\u06EB\x03\x02\x02\x02\u06FA\u06EE\x03\x02\x02\x02\u06FA" +
    "\u06EF\x03\x02\x02\x02\u06FA\u06F0\x03\x02\x02\x02\u06FA\u06F1\x03\x02" +
    "\x02\x02\u06FA\u06F4\x03\x02\x02\x02\u06FA\u06F7\x03\x02\x02\x02\u06FB" +
    "\u0109\x03\x02\x02\x02\u06FC\u06FE\t\x05\x02\x02\u06FD\u06FC\x03\x02\x02" +
    "\x02\u06FD\u06FE\x03\x02\x02\x02\u06FE\u06FF\x03\x02\x02\x02\u06FF\u0700" +
    "\x07\xC3\x02\x02\u0700\u010B\x03\x02\x02\x02\u0701\u0702\x05\u0126\x94" +
    "\x02\u0702\u010D\x03\x02\x02\x02\u0703\u0704\x07\xC1\x02\x02\u0704\u0705" +
    "\x05\u0112\x8A\x02\u0705\u0706\x07\xCE\x02\x02\u0706\u070E\x03\x02\x02" +
    "\x02\u0707\u0708\x07\xCD\x02\x02\u0708\u0709\x07\xB3\x02\x02\u0709\u070A" +
    "\x05\u0106\x84\x02\u070A\u070B\x05\u0112\x8A\x02\u070B\u070C\x07\xCE\x02" +
    "\x02\u070C\u070E\x03\x02\x02\x02\u070D\u0703\x03\x02\x02\x02\u070D\u0707" +
    "\x03\x02\x02\x02\u070E\u010F\x03\x02\x02\x02\u070F\u0710\x07\xC2\x02\x02" +
    "\u0710\u0711\x05\u0112\x8A\x02\u0711\u0712\x07\xCE\x02\x02\u0712\u0111" +
    "\x03\x02\x02\x02\u0713\u0714\x07S\x02\x02\u0714\u0716\x05\u0116\x8C\x02" +
    "\u0715\u0713\x03\x02\x02\x02\u0715\u0716\x03\x02\x02\x02\u0716\u0719\x03" +
    "\x02\x02\x02\u0717\u0718\x07\xBF\x02\x02\u0718\u071A\x05\u0118\x8D\x02" +
    "\u0719\u0717\x03\x02\x02\x02\u0719\u071A\x03\x02\x02\x02\u071A\u071E\x03" +
    "\x02\x02\x02\u071B\u071D\x05\u0114\x8B\x02\u071C\u071B\x03\x02\x02\x02" +
    "\u071D\u0720\x03\x02\x02\x02\u071E\u071C\x03\x02\x02\x02\u071E\u071F\x03" +
    "\x02\x02\x02\u071F\u0722\x03\x02\x02\x02\u0720\u071E\x03\x02\x02\x02\u0721" +
    "\u0723\x05\xFE\x80\x02\u0722\u0721\x03\x02\x02\x02\u0722\u0723\x03\x02" +
    "\x02\x02\u0723\u0726\x03\x02\x02\x02\u0724\u0725\x070\x02\x02\u0725\u0727" +
    "\x05\u011E\x90\x02\u0726\u0724\x03\x02\x02\x02\u0726\u0727\x03\x02\x02" +
    "\x02\u0727\u0113\x03\x02\x02\x02\u0728\u0729\x077\x02\x02\u0729\u072A" +
    "\x07\xBE\x02\x02\u072A\u072B\x07\xD2\x02\x02\u072B\u0751\x07\xC7\x02\x02" +
    "\u072C\u072D\x077\x02\x02\u072D\u072E\x07c\x02\x02\u072E\u072F\x07d\x02" +
    "\x02\u072F\u0751\x05\xEEx\x02\u0730\u0731\x077\x02\x02\u0731\u0737\x07" +
    "\xBC\x02\x02\u0732\u0733\x07\xC9\x02\x02\u0733\u0734\x07\xBD\x02\x02\u0734" +
    "\u0735\x07\xD2\x02\x02\u0735\u0736\x07\xC3\x02\x02\u0736\u0738\x07\xCA" +
    "\x02\x02\u0737\u0732\x03\x02\x02\x02\u0737\u0738\x03\x02\x02\x02\u0738" +
    "\u0751\x03\x02\x02\x02\u0739\u073A\x077\x02\x02\u073A\u073B\x07\xBB\x02" +
    "\x02\u073B\u073C\x07S\x02\x02\u073C\u073D\x07\xC9\x02\x02\u073D\u073E" +
    "\x05\u0122\x92\x02\u073E\u073F\x07\xCA\x02\x02\u073F\u0751\x03\x02\x02" +
    "\x02\u0740\u0741\x077\x02\x02\u0741\u0742\x07\xBB\x02\x02\u0742\u0743" +
    "\x07\xD2\x02\x02\u0743\u0751\x07\xC7\x02\x02\u0744\u0745\x077\x02\x02" +
    "\u0745\u0746\x07\xBA\x02\x02\u0746\u0747\x07\xD2\x02\x02\u0747\u0751\x07" +
    "\xC7\x02\x02\u0748\u0749\x077\x02\x02\u0749\u074A\x07\xB9\x02\x02\u074A" +
    "\u074B\x07\xD2\x02\x02\u074B\u0751\x07\xC7\x02\x02\u074C\u074D\x077\x02" +
    "\x02\u074D\u0751\x07k\x02\x02\u074E\u074F\x077\x02\x02\u074F\u0751\x07" +
    "j\x02\x02\u0750\u0728\x03\x02\x02\x02\u0750\u072C\x03\x02\x02\x02\u0750" +
    "\u0730\x03\x02\x02\x02\u0750\u0739\x03\x02\x02\x02\u0750\u0740\x03\x02" +
    "\x02\x02\u0750\u0744\x03\x02\x02\x02\u0750\u0748\x03\x02\x02\x02\u0750" +
    "\u074C\x03\x02\x02\x02\u0750\u074E\x03\x02\x02\x02\u0751\u0115\x03\x02" +
    "\x02\x02\u0752\u0753\t\x15\x02\x02\u0753\u0754\x07\xB8\x02\x02\u0754\u0117" +
    "\x03\x02\x02\x02\u0755\u075A\x05\u011A\x8E\x02\u0756\u0757\x07\xD0\x02" +
    "\x02\u0757\u0759\x05\u0118\x8D\x02\u0758\u0756\x03\x02\x02\x02\u0759\u075C" +
    "\x03\x02\x02\x02\u075A\u0758\x03\x02\x02\x02\u075A\u075B\x03\x02\x02\x02" +
    "\u075B\u0119\x03\x02\x02\x02\u075C\u075A\x03\x02\x02\x02\u075D\u0777\x05" +
    "\u0124\x93\x02\u075E\u075F\x07\xC9\x02\x02\u075F\u0762\x05\u011C\x8F\x02" +
    "\u0760\u0761\x07C\x02\x02\u0761\u0763\x05\xDEp\x02\u0762\u0760\x03\x02" +
    "\x02\x02\u0762\u0763\x03\x02\x02\x02\u0763\u0768\x03\x02\x02\x02\u0764" +
    "\u0765\x07A\x02\x02\u0765\u0766\x07\xC0\x02\x02\u0766\u0767\x07\xD2\x02" +
    "\x02\u0767\u0769\x05\u0124\x93\x02\u0768\u0764\x03\x02\x02\x02\u0768\u0769" +
    "\x03\x02\x02\x02\u0769\u076D\x03\x02\x02\x02\u076A\u076B\x07D\x02\x02" +
    "\u076B\u076C\x07E\x02\x02\u076C\u076E\x05\xFA~\x02\u076D\u076A\x03\x02" +
    "\x02\x02\u076D\u076E\x03\x02\x02\x02\u076E\u0770\x03\x02\x02\x02\u076F" +
    "\u0771\x05\xFE\x80\x02\u0770\u076F\x03\x02\x02\x02\u0770\u0771\x03\x02" +
    "\x02\x02\u0771\u0773\x03\x02\x02\x02\u0772\u0774\x05\u0100\x81\x02\u0773" +
    "\u0772\x03\x02\x02\x02\u0773\u0774\x03\x02\x02\x02\u0774\u0775\x03\x02" +
    "\x02\x02\u0775\u0776\x07\xCA\x02\x02\u0776\u0778\x03\x02\x02\x02\u0777" +
    "\u075E\x03\x02\x02\x02\u0777\u0778\x03\x02\x02\x02\u0778\u011B\x03\x02" +
    "\x02\x02\u0779\u077E\x05\u0124\x93\x02\u077A\u077B\x07\xD0\x02\x02\u077B" +
    "\u077D\x05\u011C\x8F\x02\u077C\u077A\x03\x02\x02\x02\u077D\u0780\x03\x02" +
    "\x02\x02\u077E\u077C\x03\x02\x02\x02\u077E\u077F\x03\x02\x02\x02\u077F" +
    "\u0787\x03\x02\x02\x02\u0780\u077E\x03\x02\x02\x02\u0781\u0782\x07a\x02" +
    "\x02\u0782\u0783\x07\xC9\x02\x02\u0783\u0784\x05\u0124\x93\x02\u0784\u0785" +
    "\x07\xCA\x02\x02\u0785\u0787\x03\x02\x02\x02\u0786\u0779\x03\x02\x02\x02" +
    "\u0786\u0781\x03\x02\x02\x02\u0787\u011D\x03\x02\x02\x02\u0788\u078B\x05" +
    "\u0120\x91\x02\u0789\u078A\x07\xD0\x02\x02\u078A\u078C\x05\u011E\x90\x02" +
    "\u078B\u0789\x03\x02\x02\x02\u078B\u078C\x03\x02\x02\x02\u078C\u011F\x03" +
    "\x02\x02\x02\u078D\u078E\t\x16\x02\x02\u078E\u0121\x03\x02\x02\x02\u078F" +
    "\u0792\x07\xC7\x02\x02\u0790\u0791\x07\xD0\x02\x02\u0791\u0793\x05\u0122" +
    "\x92\x02\u0792\u0790\x03\x02\x02\x02\u0792\u0793\x03\x02\x02\x02\u0793" +
    "\u0123\x03\x02\x02\x02\u0794\u0799\x05\u0126\x94\x02\u0795\u0796\x07\xD1" +
    "\x02\x02\u0796\u0798\x05\u0124\x93\x02\u0797\u0795\x03\x02\x02\x02\u0798" +
    "\u079B\x03\x02\x02\x02\u0799\u0797\x03\x02\x02\x02\u0799\u079A\x03\x02" +
    "\x02\x02\u079A\u0125\x03\x02\x02\x02\u079B\u0799\x03\x02\x02\x02\u079C" +
    "\u079D\t\x17\x02\x02\u079D\u0127\x03\x02\x02\x02\u079E\u079F\t\x18\x02" +
    "\x02\u079F\u0129\x03\x02\x02\x02\xC0\u0134\u0142\u014A\u014F\u0157\u015E" +
    "\u0165\u0169\u016F\u0173\u017B\u0184\u018B\u0194\u019B\u01A4\u01AB\u01B1" +
    "\u01B5\u01CA\u01D3\u01DB\u01DF\u01E5\u01F5\u01FD\u0202\u020D\u0213\u021B" +
    "\u021F\u0221\u022A\u0233\u0238\u023C\u0240\u0244\u0246\u024E\u0257\u025D" +
    "\u0268\u0272\u0275\u0279\u027E\u0288\u0290\u0293\u0296\u029E\u02A9\u02C3" +
    "\u02CA\u02D3\u02E1\u02E7\u02EC\u02F3\u02FE\u0306\u030C\u0319\u031C\u031F" +
    "\u0323\u0336\u033D\u0344\u034B\u0352\u0356\u035C\u0365\u0370\u0375\u037A" +
    "\u037F\u0386\u0393\u0397\u039B\u039D\u03A1\u03B3\u03C8\u03D8\u03DE\u0403" +
    "\u040F\u0411\u0421\u0426\u042D\u0433\u0436\u043B\u0445\u044C\u0454\u0462" +
    "\u0464\u046C\u047B\u0482\u048F\u0492\u0495\u0498\u049B\u049E\u04A1\u04A4" +
    "\u04A9\u04B0\u04B3\u04B6\u04BB\u04C2\u04C7\u04CB\u04D1\u04D4\u04DB\u04E0" +
    "\u04E5\u04E9\u04F1\u04F6\u04FA\u0500\u0503\u0586\u058E\u0599\u059D\u05A4" +
    "\u05A7\u05B8\u05C7\u05CF\u05D4\u05DB\u05E5\u05F6\u0602\u0604\u060C\u0614" +
    "\u061A\u062A\u0631\u063F\u0644\u064D\u0658\u0666\u066B\u0676\u067B\u067F" +
    "\u0683\u0687\u0689\u068F\u0695\u069E\u06FA\u06FD\u070D\u0715\u0719\u071E" +
    "\u0722\u0726\u0737\u0750\u075A\u0762\u0768\u076D\u0770\u0773\u0777\u077E" +
    "\u0786\u078B\u0792\u0799";
ApexParser._serializedATN = Utils.join([
    ApexParser._serializedATNSegment0,
    ApexParser._serializedATNSegment1,
    ApexParser._serializedATNSegment2,
    ApexParser._serializedATNSegment3,
], "");
class TriggerUnitContext extends ParserRuleContext_1.ParserRuleContext {
    TRIGGER() { return this.getToken(ApexParser.TRIGGER, 0); }
    id(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdContext);
        }
        else {
            return this.getRuleContext(i, IdContext);
        }
    }
    ON() { return this.getToken(ApexParser.ON, 0); }
    LPAREN() { return this.getToken(ApexParser.LPAREN, 0); }
    triggerCase(i) {
        if (i === undefined) {
            return this.getRuleContexts(TriggerCaseContext);
        }
        else {
            return this.getRuleContext(i, TriggerCaseContext);
        }
    }
    RPAREN() { return this.getToken(ApexParser.RPAREN, 0); }
    triggerBlock() {
        return this.getRuleContext(0, TriggerBlockContext);
    }
    EOF() { return this.getToken(ApexParser.EOF, 0); }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_triggerUnit; }
    // @Override
    enterRule(listener) {
        if (listener.enterTriggerUnit) {
            listener.enterTriggerUnit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTriggerUnit) {
            listener.exitTriggerUnit(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTriggerUnit) {
            return visitor.visitTriggerUnit(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TriggerUnitContext = TriggerUnitContext;
class TriggerCaseContext extends ParserRuleContext_1.ParserRuleContext {
    BEFORE() { return this.tryGetToken(ApexParser.BEFORE, 0); }
    AFTER() { return this.tryGetToken(ApexParser.AFTER, 0); }
    INSERT() { return this.tryGetToken(ApexParser.INSERT, 0); }
    UPDATE() { return this.tryGetToken(ApexParser.UPDATE, 0); }
    DELETE() { return this.tryGetToken(ApexParser.DELETE, 0); }
    UNDELETE() { return this.tryGetToken(ApexParser.UNDELETE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_triggerCase; }
    // @Override
    enterRule(listener) {
        if (listener.enterTriggerCase) {
            listener.enterTriggerCase(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTriggerCase) {
            listener.exitTriggerCase(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTriggerCase) {
            return visitor.visitTriggerCase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TriggerCaseContext = TriggerCaseContext;
class TriggerBlockContext extends ParserRuleContext_1.ParserRuleContext {
    LBRACE() { return this.getToken(ApexParser.LBRACE, 0); }
    RBRACE() { return this.getToken(ApexParser.RBRACE, 0); }
    triggerBlockMember(i) {
        if (i === undefined) {
            return this.getRuleContexts(TriggerBlockMemberContext);
        }
        else {
            return this.getRuleContext(i, TriggerBlockMemberContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_triggerBlock; }
    // @Override
    enterRule(listener) {
        if (listener.enterTriggerBlock) {
            listener.enterTriggerBlock(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTriggerBlock) {
            listener.exitTriggerBlock(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTriggerBlock) {
            return visitor.visitTriggerBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TriggerBlockContext = TriggerBlockContext;
class TriggerBlockMemberContext extends ParserRuleContext_1.ParserRuleContext {
    triggerMemberDeclaration() {
        return this.tryGetRuleContext(0, TriggerMemberDeclarationContext);
    }
    modifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(ModifierContext);
        }
        else {
            return this.getRuleContext(i, ModifierContext);
        }
    }
    statement() {
        return this.tryGetRuleContext(0, StatementContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_triggerBlockMember; }
    // @Override
    enterRule(listener) {
        if (listener.enterTriggerBlockMember) {
            listener.enterTriggerBlockMember(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTriggerBlockMember) {
            listener.exitTriggerBlockMember(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTriggerBlockMember) {
            return visitor.visitTriggerBlockMember(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TriggerBlockMemberContext = TriggerBlockMemberContext;
class CompilationUnitContext extends ParserRuleContext_1.ParserRuleContext {
    typeDeclaration() {
        return this.getRuleContext(0, TypeDeclarationContext);
    }
    EOF() { return this.getToken(ApexParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_compilationUnit; }
    // @Override
    enterRule(listener) {
        if (listener.enterCompilationUnit) {
            listener.enterCompilationUnit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCompilationUnit) {
            listener.exitCompilationUnit(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCompilationUnit) {
            return visitor.visitCompilationUnit(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.CompilationUnitContext = CompilationUnitContext;
class TypeDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    classDeclaration() {
        return this.tryGetRuleContext(0, ClassDeclarationContext);
    }
    modifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(ModifierContext);
        }
        else {
            return this.getRuleContext(i, ModifierContext);
        }
    }
    enumDeclaration() {
        return this.tryGetRuleContext(0, EnumDeclarationContext);
    }
    interfaceDeclaration() {
        return this.tryGetRuleContext(0, InterfaceDeclarationContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_typeDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeDeclaration) {
            listener.enterTypeDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeDeclaration) {
            listener.exitTypeDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTypeDeclaration) {
            return visitor.visitTypeDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TypeDeclarationContext = TypeDeclarationContext;
class ClassDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    CLASS() { return this.getToken(ApexParser.CLASS, 0); }
    id() {
        return this.getRuleContext(0, IdContext);
    }
    classBody() {
        return this.getRuleContext(0, ClassBodyContext);
    }
    EXTENDS() { return this.tryGetToken(ApexParser.EXTENDS, 0); }
    typeRef() {
        return this.tryGetRuleContext(0, TypeRefContext);
    }
    IMPLEMENTS() { return this.tryGetToken(ApexParser.IMPLEMENTS, 0); }
    typeList() {
        return this.tryGetRuleContext(0, TypeListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_classDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterClassDeclaration) {
            listener.enterClassDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitClassDeclaration) {
            listener.exitClassDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitClassDeclaration) {
            return visitor.visitClassDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ClassDeclarationContext = ClassDeclarationContext;
class EnumDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    ENUM() { return this.getToken(ApexParser.ENUM, 0); }
    id() {
        return this.getRuleContext(0, IdContext);
    }
    LBRACE() { return this.getToken(ApexParser.LBRACE, 0); }
    RBRACE() { return this.getToken(ApexParser.RBRACE, 0); }
    enumConstants() {
        return this.tryGetRuleContext(0, EnumConstantsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_enumDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterEnumDeclaration) {
            listener.enterEnumDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitEnumDeclaration) {
            listener.exitEnumDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitEnumDeclaration) {
            return visitor.visitEnumDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.EnumDeclarationContext = EnumDeclarationContext;
class EnumConstantsContext extends ParserRuleContext_1.ParserRuleContext {
    id(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdContext);
        }
        else {
            return this.getRuleContext(i, IdContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_enumConstants; }
    // @Override
    enterRule(listener) {
        if (listener.enterEnumConstants) {
            listener.enterEnumConstants(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitEnumConstants) {
            listener.exitEnumConstants(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitEnumConstants) {
            return visitor.visitEnumConstants(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.EnumConstantsContext = EnumConstantsContext;
class InterfaceDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    INTERFACE() { return this.getToken(ApexParser.INTERFACE, 0); }
    id() {
        return this.getRuleContext(0, IdContext);
    }
    interfaceBody() {
        return this.getRuleContext(0, InterfaceBodyContext);
    }
    EXTENDS() { return this.tryGetToken(ApexParser.EXTENDS, 0); }
    typeList() {
        return this.tryGetRuleContext(0, TypeListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_interfaceDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterInterfaceDeclaration) {
            listener.enterInterfaceDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInterfaceDeclaration) {
            listener.exitInterfaceDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitInterfaceDeclaration) {
            return visitor.visitInterfaceDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.InterfaceDeclarationContext = InterfaceDeclarationContext;
class TypeListContext extends ParserRuleContext_1.ParserRuleContext {
    typeRef(i) {
        if (i === undefined) {
            return this.getRuleContexts(TypeRefContext);
        }
        else {
            return this.getRuleContext(i, TypeRefContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_typeList; }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeList) {
            listener.enterTypeList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeList) {
            listener.exitTypeList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTypeList) {
            return visitor.visitTypeList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TypeListContext = TypeListContext;
class ClassBodyContext extends ParserRuleContext_1.ParserRuleContext {
    LBRACE() { return this.getToken(ApexParser.LBRACE, 0); }
    RBRACE() { return this.getToken(ApexParser.RBRACE, 0); }
    classBodyDeclaration(i) {
        if (i === undefined) {
            return this.getRuleContexts(ClassBodyDeclarationContext);
        }
        else {
            return this.getRuleContext(i, ClassBodyDeclarationContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_classBody; }
    // @Override
    enterRule(listener) {
        if (listener.enterClassBody) {
            listener.enterClassBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitClassBody) {
            listener.exitClassBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitClassBody) {
            return visitor.visitClassBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ClassBodyContext = ClassBodyContext;
class InterfaceBodyContext extends ParserRuleContext_1.ParserRuleContext {
    LBRACE() { return this.getToken(ApexParser.LBRACE, 0); }
    RBRACE() { return this.getToken(ApexParser.RBRACE, 0); }
    interfaceMethodDeclaration(i) {
        if (i === undefined) {
            return this.getRuleContexts(InterfaceMethodDeclarationContext);
        }
        else {
            return this.getRuleContext(i, InterfaceMethodDeclarationContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_interfaceBody; }
    // @Override
    enterRule(listener) {
        if (listener.enterInterfaceBody) {
            listener.enterInterfaceBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInterfaceBody) {
            listener.exitInterfaceBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitInterfaceBody) {
            return visitor.visitInterfaceBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.InterfaceBodyContext = InterfaceBodyContext;
class ClassBodyDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    SEMI() { return this.tryGetToken(ApexParser.SEMI, 0); }
    block() {
        return this.tryGetRuleContext(0, BlockContext);
    }
    STATIC() { return this.tryGetToken(ApexParser.STATIC, 0); }
    memberDeclaration() {
        return this.tryGetRuleContext(0, MemberDeclarationContext);
    }
    modifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(ModifierContext);
        }
        else {
            return this.getRuleContext(i, ModifierContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_classBodyDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterClassBodyDeclaration) {
            listener.enterClassBodyDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitClassBodyDeclaration) {
            listener.exitClassBodyDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitClassBodyDeclaration) {
            return visitor.visitClassBodyDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ClassBodyDeclarationContext = ClassBodyDeclarationContext;
class ModifierContext extends ParserRuleContext_1.ParserRuleContext {
    annotation() {
        return this.tryGetRuleContext(0, AnnotationContext);
    }
    GLOBAL() { return this.tryGetToken(ApexParser.GLOBAL, 0); }
    PUBLIC() { return this.tryGetToken(ApexParser.PUBLIC, 0); }
    PROTECTED() { return this.tryGetToken(ApexParser.PROTECTED, 0); }
    PRIVATE() { return this.tryGetToken(ApexParser.PRIVATE, 0); }
    TRANSIENT() { return this.tryGetToken(ApexParser.TRANSIENT, 0); }
    STATIC() { return this.tryGetToken(ApexParser.STATIC, 0); }
    ABSTRACT() { return this.tryGetToken(ApexParser.ABSTRACT, 0); }
    FINAL() { return this.tryGetToken(ApexParser.FINAL, 0); }
    WEBSERVICE() { return this.tryGetToken(ApexParser.WEBSERVICE, 0); }
    OVERRIDE() { return this.tryGetToken(ApexParser.OVERRIDE, 0); }
    VIRTUAL() { return this.tryGetToken(ApexParser.VIRTUAL, 0); }
    TESTMETHOD() { return this.tryGetToken(ApexParser.TESTMETHOD, 0); }
    WITH() { return this.tryGetToken(ApexParser.WITH, 0); }
    SHARING() { return this.tryGetToken(ApexParser.SHARING, 0); }
    WITHOUT() { return this.tryGetToken(ApexParser.WITHOUT, 0); }
    INHERITED() { return this.tryGetToken(ApexParser.INHERITED, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_modifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterModifier) {
            listener.enterModifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitModifier) {
            listener.exitModifier(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitModifier) {
            return visitor.visitModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ModifierContext = ModifierContext;
class MemberDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    methodDeclaration() {
        return this.tryGetRuleContext(0, MethodDeclarationContext);
    }
    fieldDeclaration() {
        return this.tryGetRuleContext(0, FieldDeclarationContext);
    }
    constructorDeclaration() {
        return this.tryGetRuleContext(0, ConstructorDeclarationContext);
    }
    interfaceDeclaration() {
        return this.tryGetRuleContext(0, InterfaceDeclarationContext);
    }
    classDeclaration() {
        return this.tryGetRuleContext(0, ClassDeclarationContext);
    }
    enumDeclaration() {
        return this.tryGetRuleContext(0, EnumDeclarationContext);
    }
    propertyDeclaration() {
        return this.tryGetRuleContext(0, PropertyDeclarationContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_memberDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterMemberDeclaration) {
            listener.enterMemberDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMemberDeclaration) {
            listener.exitMemberDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitMemberDeclaration) {
            return visitor.visitMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.MemberDeclarationContext = MemberDeclarationContext;
class TriggerMemberDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    methodDeclaration() {
        return this.tryGetRuleContext(0, MethodDeclarationContext);
    }
    fieldDeclaration() {
        return this.tryGetRuleContext(0, FieldDeclarationContext);
    }
    interfaceDeclaration() {
        return this.tryGetRuleContext(0, InterfaceDeclarationContext);
    }
    classDeclaration() {
        return this.tryGetRuleContext(0, ClassDeclarationContext);
    }
    enumDeclaration() {
        return this.tryGetRuleContext(0, EnumDeclarationContext);
    }
    propertyDeclaration() {
        return this.tryGetRuleContext(0, PropertyDeclarationContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_triggerMemberDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterTriggerMemberDeclaration) {
            listener.enterTriggerMemberDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTriggerMemberDeclaration) {
            listener.exitTriggerMemberDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTriggerMemberDeclaration) {
            return visitor.visitTriggerMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TriggerMemberDeclarationContext = TriggerMemberDeclarationContext;
class MethodDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    id() {
        return this.getRuleContext(0, IdContext);
    }
    formalParameters() {
        return this.getRuleContext(0, FormalParametersContext);
    }
    typeRef() {
        return this.tryGetRuleContext(0, TypeRefContext);
    }
    VOID() { return this.tryGetToken(ApexParser.VOID, 0); }
    block() {
        return this.tryGetRuleContext(0, BlockContext);
    }
    SEMI() { return this.tryGetToken(ApexParser.SEMI, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_methodDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterMethodDeclaration) {
            listener.enterMethodDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMethodDeclaration) {
            listener.exitMethodDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitMethodDeclaration) {
            return visitor.visitMethodDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.MethodDeclarationContext = MethodDeclarationContext;
class ConstructorDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    qualifiedName() {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    formalParameters() {
        return this.getRuleContext(0, FormalParametersContext);
    }
    block() {
        return this.getRuleContext(0, BlockContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_constructorDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterConstructorDeclaration) {
            listener.enterConstructorDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitConstructorDeclaration) {
            listener.exitConstructorDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitConstructorDeclaration) {
            return visitor.visitConstructorDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ConstructorDeclarationContext = ConstructorDeclarationContext;
class FieldDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    typeRef() {
        return this.getRuleContext(0, TypeRefContext);
    }
    variableDeclarators() {
        return this.getRuleContext(0, VariableDeclaratorsContext);
    }
    SEMI() { return this.getToken(ApexParser.SEMI, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_fieldDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterFieldDeclaration) {
            listener.enterFieldDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFieldDeclaration) {
            listener.exitFieldDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFieldDeclaration) {
            return visitor.visitFieldDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FieldDeclarationContext = FieldDeclarationContext;
class PropertyDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    typeRef() {
        return this.getRuleContext(0, TypeRefContext);
    }
    id() {
        return this.getRuleContext(0, IdContext);
    }
    LBRACE() { return this.getToken(ApexParser.LBRACE, 0); }
    RBRACE() { return this.getToken(ApexParser.RBRACE, 0); }
    propertyBlock(i) {
        if (i === undefined) {
            return this.getRuleContexts(PropertyBlockContext);
        }
        else {
            return this.getRuleContext(i, PropertyBlockContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_propertyDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterPropertyDeclaration) {
            listener.enterPropertyDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPropertyDeclaration) {
            listener.exitPropertyDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPropertyDeclaration) {
            return visitor.visitPropertyDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.PropertyDeclarationContext = PropertyDeclarationContext;
class InterfaceMethodDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    id() {
        return this.getRuleContext(0, IdContext);
    }
    formalParameters() {
        return this.getRuleContext(0, FormalParametersContext);
    }
    SEMI() { return this.getToken(ApexParser.SEMI, 0); }
    typeRef() {
        return this.tryGetRuleContext(0, TypeRefContext);
    }
    VOID() { return this.tryGetToken(ApexParser.VOID, 0); }
    modifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(ModifierContext);
        }
        else {
            return this.getRuleContext(i, ModifierContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_interfaceMethodDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterInterfaceMethodDeclaration) {
            listener.enterInterfaceMethodDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInterfaceMethodDeclaration) {
            listener.exitInterfaceMethodDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitInterfaceMethodDeclaration) {
            return visitor.visitInterfaceMethodDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext;
class VariableDeclaratorsContext extends ParserRuleContext_1.ParserRuleContext {
    variableDeclarator(i) {
        if (i === undefined) {
            return this.getRuleContexts(VariableDeclaratorContext);
        }
        else {
            return this.getRuleContext(i, VariableDeclaratorContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_variableDeclarators; }
    // @Override
    enterRule(listener) {
        if (listener.enterVariableDeclarators) {
            listener.enterVariableDeclarators(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVariableDeclarators) {
            listener.exitVariableDeclarators(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitVariableDeclarators) {
            return visitor.visitVariableDeclarators(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.VariableDeclaratorsContext = VariableDeclaratorsContext;
class VariableDeclaratorContext extends ParserRuleContext_1.ParserRuleContext {
    id() {
        return this.getRuleContext(0, IdContext);
    }
    ASSIGN() { return this.tryGetToken(ApexParser.ASSIGN, 0); }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_variableDeclarator; }
    // @Override
    enterRule(listener) {
        if (listener.enterVariableDeclarator) {
            listener.enterVariableDeclarator(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVariableDeclarator) {
            listener.exitVariableDeclarator(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitVariableDeclarator) {
            return visitor.visitVariableDeclarator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.VariableDeclaratorContext = VariableDeclaratorContext;
class ArrayInitializerContext extends ParserRuleContext_1.ParserRuleContext {
    LBRACE() { return this.getToken(ApexParser.LBRACE, 0); }
    RBRACE() { return this.getToken(ApexParser.RBRACE, 0); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_arrayInitializer; }
    // @Override
    enterRule(listener) {
        if (listener.enterArrayInitializer) {
            listener.enterArrayInitializer(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArrayInitializer) {
            listener.exitArrayInitializer(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitArrayInitializer) {
            return visitor.visitArrayInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ArrayInitializerContext = ArrayInitializerContext;
class TypeRefContext extends ParserRuleContext_1.ParserRuleContext {
    typeName(i) {
        if (i === undefined) {
            return this.getRuleContexts(TypeNameContext);
        }
        else {
            return this.getRuleContext(i, TypeNameContext);
        }
    }
    arraySubscripts() {
        return this.getRuleContext(0, ArraySubscriptsContext);
    }
    DOT(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.DOT);
        }
        else {
            return this.getToken(ApexParser.DOT, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_typeRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeRef) {
            listener.enterTypeRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeRef) {
            listener.exitTypeRef(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTypeRef) {
            return visitor.visitTypeRef(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TypeRefContext = TypeRefContext;
class ArraySubscriptsContext extends ParserRuleContext_1.ParserRuleContext {
    LBRACK(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.LBRACK);
        }
        else {
            return this.getToken(ApexParser.LBRACK, i);
        }
    }
    RBRACK(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.RBRACK);
        }
        else {
            return this.getToken(ApexParser.RBRACK, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_arraySubscripts; }
    // @Override
    enterRule(listener) {
        if (listener.enterArraySubscripts) {
            listener.enterArraySubscripts(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArraySubscripts) {
            listener.exitArraySubscripts(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitArraySubscripts) {
            return visitor.visitArraySubscripts(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ArraySubscriptsContext = ArraySubscriptsContext;
class TypeNameContext extends ParserRuleContext_1.ParserRuleContext {
    LIST() { return this.tryGetToken(ApexParser.LIST, 0); }
    typeArguments() {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    }
    SET() { return this.tryGetToken(ApexParser.SET, 0); }
    MAP() { return this.tryGetToken(ApexParser.MAP, 0); }
    id() {
        return this.tryGetRuleContext(0, IdContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_typeName; }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeName) {
            listener.enterTypeName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeName) {
            listener.exitTypeName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTypeName) {
            return visitor.visitTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TypeNameContext = TypeNameContext;
class TypeArgumentsContext extends ParserRuleContext_1.ParserRuleContext {
    LT() { return this.getToken(ApexParser.LT, 0); }
    typeList() {
        return this.getRuleContext(0, TypeListContext);
    }
    GT() { return this.getToken(ApexParser.GT, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_typeArguments; }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeArguments) {
            listener.enterTypeArguments(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeArguments) {
            listener.exitTypeArguments(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTypeArguments) {
            return visitor.visitTypeArguments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TypeArgumentsContext = TypeArgumentsContext;
class FormalParametersContext extends ParserRuleContext_1.ParserRuleContext {
    LPAREN() { return this.getToken(ApexParser.LPAREN, 0); }
    RPAREN() { return this.getToken(ApexParser.RPAREN, 0); }
    formalParameterList() {
        return this.tryGetRuleContext(0, FormalParameterListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_formalParameters; }
    // @Override
    enterRule(listener) {
        if (listener.enterFormalParameters) {
            listener.enterFormalParameters(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFormalParameters) {
            listener.exitFormalParameters(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFormalParameters) {
            return visitor.visitFormalParameters(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FormalParametersContext = FormalParametersContext;
class FormalParameterListContext extends ParserRuleContext_1.ParserRuleContext {
    formalParameter(i) {
        if (i === undefined) {
            return this.getRuleContexts(FormalParameterContext);
        }
        else {
            return this.getRuleContext(i, FormalParameterContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_formalParameterList; }
    // @Override
    enterRule(listener) {
        if (listener.enterFormalParameterList) {
            listener.enterFormalParameterList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFormalParameterList) {
            listener.exitFormalParameterList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFormalParameterList) {
            return visitor.visitFormalParameterList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FormalParameterListContext = FormalParameterListContext;
class FormalParameterContext extends ParserRuleContext_1.ParserRuleContext {
    typeRef() {
        return this.getRuleContext(0, TypeRefContext);
    }
    id() {
        return this.getRuleContext(0, IdContext);
    }
    modifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(ModifierContext);
        }
        else {
            return this.getRuleContext(i, ModifierContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_formalParameter; }
    // @Override
    enterRule(listener) {
        if (listener.enterFormalParameter) {
            listener.enterFormalParameter(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFormalParameter) {
            listener.exitFormalParameter(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFormalParameter) {
            return visitor.visitFormalParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FormalParameterContext = FormalParameterContext;
class QualifiedNameContext extends ParserRuleContext_1.ParserRuleContext {
    id(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdContext);
        }
        else {
            return this.getRuleContext(i, IdContext);
        }
    }
    DOT(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.DOT);
        }
        else {
            return this.getToken(ApexParser.DOT, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_qualifiedName; }
    // @Override
    enterRule(listener) {
        if (listener.enterQualifiedName) {
            listener.enterQualifiedName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQualifiedName) {
            listener.exitQualifiedName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitQualifiedName) {
            return visitor.visitQualifiedName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.QualifiedNameContext = QualifiedNameContext;
class LiteralContext extends ParserRuleContext_1.ParserRuleContext {
    IntegerLiteral() { return this.tryGetToken(ApexParser.IntegerLiteral, 0); }
    LongLiteral() { return this.tryGetToken(ApexParser.LongLiteral, 0); }
    NumberLiteral() { return this.tryGetToken(ApexParser.NumberLiteral, 0); }
    StringLiteral() { return this.tryGetToken(ApexParser.StringLiteral, 0); }
    BooleanLiteral() { return this.tryGetToken(ApexParser.BooleanLiteral, 0); }
    NULL() { return this.tryGetToken(ApexParser.NULL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_literal; }
    // @Override
    enterRule(listener) {
        if (listener.enterLiteral) {
            listener.enterLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLiteral) {
            listener.exitLiteral(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLiteral) {
            return visitor.visitLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.LiteralContext = LiteralContext;
class AnnotationContext extends ParserRuleContext_1.ParserRuleContext {
    ATSIGN() { return this.getToken(ApexParser.ATSIGN, 0); }
    qualifiedName() {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    LPAREN() { return this.tryGetToken(ApexParser.LPAREN, 0); }
    RPAREN() { return this.tryGetToken(ApexParser.RPAREN, 0); }
    elementValuePairs() {
        return this.tryGetRuleContext(0, ElementValuePairsContext);
    }
    elementValue() {
        return this.tryGetRuleContext(0, ElementValueContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_annotation; }
    // @Override
    enterRule(listener) {
        if (listener.enterAnnotation) {
            listener.enterAnnotation(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAnnotation) {
            listener.exitAnnotation(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitAnnotation) {
            return visitor.visitAnnotation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.AnnotationContext = AnnotationContext;
class ElementValuePairsContext extends ParserRuleContext_1.ParserRuleContext {
    elementValuePair(i) {
        if (i === undefined) {
            return this.getRuleContexts(ElementValuePairContext);
        }
        else {
            return this.getRuleContext(i, ElementValuePairContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_elementValuePairs; }
    // @Override
    enterRule(listener) {
        if (listener.enterElementValuePairs) {
            listener.enterElementValuePairs(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitElementValuePairs) {
            listener.exitElementValuePairs(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitElementValuePairs) {
            return visitor.visitElementValuePairs(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ElementValuePairsContext = ElementValuePairsContext;
class ElementValuePairContext extends ParserRuleContext_1.ParserRuleContext {
    id() {
        return this.getRuleContext(0, IdContext);
    }
    ASSIGN() { return this.getToken(ApexParser.ASSIGN, 0); }
    elementValue() {
        return this.getRuleContext(0, ElementValueContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_elementValuePair; }
    // @Override
    enterRule(listener) {
        if (listener.enterElementValuePair) {
            listener.enterElementValuePair(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitElementValuePair) {
            listener.exitElementValuePair(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitElementValuePair) {
            return visitor.visitElementValuePair(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ElementValuePairContext = ElementValuePairContext;
class ElementValueContext extends ParserRuleContext_1.ParserRuleContext {
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    annotation() {
        return this.tryGetRuleContext(0, AnnotationContext);
    }
    elementValueArrayInitializer() {
        return this.tryGetRuleContext(0, ElementValueArrayInitializerContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_elementValue; }
    // @Override
    enterRule(listener) {
        if (listener.enterElementValue) {
            listener.enterElementValue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitElementValue) {
            listener.exitElementValue(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitElementValue) {
            return visitor.visitElementValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ElementValueContext = ElementValueContext;
class ElementValueArrayInitializerContext extends ParserRuleContext_1.ParserRuleContext {
    LBRACE() { return this.getToken(ApexParser.LBRACE, 0); }
    RBRACE() { return this.getToken(ApexParser.RBRACE, 0); }
    elementValue(i) {
        if (i === undefined) {
            return this.getRuleContexts(ElementValueContext);
        }
        else {
            return this.getRuleContext(i, ElementValueContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_elementValueArrayInitializer; }
    // @Override
    enterRule(listener) {
        if (listener.enterElementValueArrayInitializer) {
            listener.enterElementValueArrayInitializer(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitElementValueArrayInitializer) {
            listener.exitElementValueArrayInitializer(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitElementValueArrayInitializer) {
            return visitor.visitElementValueArrayInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext;
class BlockContext extends ParserRuleContext_1.ParserRuleContext {
    LBRACE() { return this.getToken(ApexParser.LBRACE, 0); }
    RBRACE() { return this.getToken(ApexParser.RBRACE, 0); }
    statement(i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_block; }
    // @Override
    enterRule(listener) {
        if (listener.enterBlock) {
            listener.enterBlock(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBlock) {
            listener.exitBlock(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitBlock) {
            return visitor.visitBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.BlockContext = BlockContext;
class LocalVariableDeclarationStatementContext extends ParserRuleContext_1.ParserRuleContext {
    localVariableDeclaration() {
        return this.getRuleContext(0, LocalVariableDeclarationContext);
    }
    SEMI() { return this.getToken(ApexParser.SEMI, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_localVariableDeclarationStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterLocalVariableDeclarationStatement) {
            listener.enterLocalVariableDeclarationStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLocalVariableDeclarationStatement) {
            listener.exitLocalVariableDeclarationStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLocalVariableDeclarationStatement) {
            return visitor.visitLocalVariableDeclarationStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.LocalVariableDeclarationStatementContext = LocalVariableDeclarationStatementContext;
class LocalVariableDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    typeRef() {
        return this.getRuleContext(0, TypeRefContext);
    }
    variableDeclarators() {
        return this.getRuleContext(0, VariableDeclaratorsContext);
    }
    modifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(ModifierContext);
        }
        else {
            return this.getRuleContext(i, ModifierContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_localVariableDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterLocalVariableDeclaration) {
            listener.enterLocalVariableDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLocalVariableDeclaration) {
            listener.exitLocalVariableDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLocalVariableDeclaration) {
            return visitor.visitLocalVariableDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.LocalVariableDeclarationContext = LocalVariableDeclarationContext;
class StatementContext extends ParserRuleContext_1.ParserRuleContext {
    block() {
        return this.tryGetRuleContext(0, BlockContext);
    }
    ifStatement() {
        return this.tryGetRuleContext(0, IfStatementContext);
    }
    switchStatement() {
        return this.tryGetRuleContext(0, SwitchStatementContext);
    }
    forStatement() {
        return this.tryGetRuleContext(0, ForStatementContext);
    }
    whileStatement() {
        return this.tryGetRuleContext(0, WhileStatementContext);
    }
    doWhileStatement() {
        return this.tryGetRuleContext(0, DoWhileStatementContext);
    }
    tryStatement() {
        return this.tryGetRuleContext(0, TryStatementContext);
    }
    returnStatement() {
        return this.tryGetRuleContext(0, ReturnStatementContext);
    }
    throwStatement() {
        return this.tryGetRuleContext(0, ThrowStatementContext);
    }
    breakStatement() {
        return this.tryGetRuleContext(0, BreakStatementContext);
    }
    continueStatement() {
        return this.tryGetRuleContext(0, ContinueStatementContext);
    }
    insertStatement() {
        return this.tryGetRuleContext(0, InsertStatementContext);
    }
    updateStatement() {
        return this.tryGetRuleContext(0, UpdateStatementContext);
    }
    deleteStatement() {
        return this.tryGetRuleContext(0, DeleteStatementContext);
    }
    undeleteStatement() {
        return this.tryGetRuleContext(0, UndeleteStatementContext);
    }
    upsertStatement() {
        return this.tryGetRuleContext(0, UpsertStatementContext);
    }
    mergeStatement() {
        return this.tryGetRuleContext(0, MergeStatementContext);
    }
    runAsStatement() {
        return this.tryGetRuleContext(0, RunAsStatementContext);
    }
    localVariableDeclarationStatement() {
        return this.tryGetRuleContext(0, LocalVariableDeclarationStatementContext);
    }
    expressionStatement() {
        return this.tryGetRuleContext(0, ExpressionStatementContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_statement; }
    // @Override
    enterRule(listener) {
        if (listener.enterStatement) {
            listener.enterStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStatement) {
            listener.exitStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStatement) {
            return visitor.visitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.StatementContext = StatementContext;
class IfStatementContext extends ParserRuleContext_1.ParserRuleContext {
    IF() { return this.getToken(ApexParser.IF, 0); }
    parExpression() {
        return this.getRuleContext(0, ParExpressionContext);
    }
    statement(i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    }
    ELSE() { return this.tryGetToken(ApexParser.ELSE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_ifStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterIfStatement) {
            listener.enterIfStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIfStatement) {
            listener.exitIfStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIfStatement) {
            return visitor.visitIfStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.IfStatementContext = IfStatementContext;
class SwitchStatementContext extends ParserRuleContext_1.ParserRuleContext {
    SWITCH() { return this.getToken(ApexParser.SWITCH, 0); }
    ON() { return this.getToken(ApexParser.ON, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    LBRACE() { return this.getToken(ApexParser.LBRACE, 0); }
    RBRACE() { return this.getToken(ApexParser.RBRACE, 0); }
    whenControl(i) {
        if (i === undefined) {
            return this.getRuleContexts(WhenControlContext);
        }
        else {
            return this.getRuleContext(i, WhenControlContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_switchStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterSwitchStatement) {
            listener.enterSwitchStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSwitchStatement) {
            listener.exitSwitchStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSwitchStatement) {
            return visitor.visitSwitchStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SwitchStatementContext = SwitchStatementContext;
class WhenControlContext extends ParserRuleContext_1.ParserRuleContext {
    WHEN() { return this.getToken(ApexParser.WHEN, 0); }
    whenValue() {
        return this.getRuleContext(0, WhenValueContext);
    }
    block() {
        return this.getRuleContext(0, BlockContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_whenControl; }
    // @Override
    enterRule(listener) {
        if (listener.enterWhenControl) {
            listener.enterWhenControl(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWhenControl) {
            listener.exitWhenControl(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWhenControl) {
            return visitor.visitWhenControl(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.WhenControlContext = WhenControlContext;
class WhenValueContext extends ParserRuleContext_1.ParserRuleContext {
    ELSE() { return this.tryGetToken(ApexParser.ELSE, 0); }
    whenLiteral(i) {
        if (i === undefined) {
            return this.getRuleContexts(WhenLiteralContext);
        }
        else {
            return this.getRuleContext(i, WhenLiteralContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    id(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdContext);
        }
        else {
            return this.getRuleContext(i, IdContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_whenValue; }
    // @Override
    enterRule(listener) {
        if (listener.enterWhenValue) {
            listener.enterWhenValue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWhenValue) {
            listener.exitWhenValue(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWhenValue) {
            return visitor.visitWhenValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.WhenValueContext = WhenValueContext;
class WhenLiteralContext extends ParserRuleContext_1.ParserRuleContext {
    IntegerLiteral() { return this.tryGetToken(ApexParser.IntegerLiteral, 0); }
    SUB(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.SUB);
        }
        else {
            return this.getToken(ApexParser.SUB, i);
        }
    }
    ADD(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.ADD);
        }
        else {
            return this.getToken(ApexParser.ADD, i);
        }
    }
    LongLiteral() { return this.tryGetToken(ApexParser.LongLiteral, 0); }
    StringLiteral() { return this.tryGetToken(ApexParser.StringLiteral, 0); }
    NULL() { return this.tryGetToken(ApexParser.NULL, 0); }
    id() {
        return this.tryGetRuleContext(0, IdContext);
    }
    LPAREN() { return this.tryGetToken(ApexParser.LPAREN, 0); }
    whenLiteral() {
        return this.tryGetRuleContext(0, WhenLiteralContext);
    }
    RPAREN() { return this.tryGetToken(ApexParser.RPAREN, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_whenLiteral; }
    // @Override
    enterRule(listener) {
        if (listener.enterWhenLiteral) {
            listener.enterWhenLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWhenLiteral) {
            listener.exitWhenLiteral(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWhenLiteral) {
            return visitor.visitWhenLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.WhenLiteralContext = WhenLiteralContext;
class ForStatementContext extends ParserRuleContext_1.ParserRuleContext {
    FOR() { return this.getToken(ApexParser.FOR, 0); }
    LPAREN() { return this.getToken(ApexParser.LPAREN, 0); }
    forControl() {
        return this.getRuleContext(0, ForControlContext);
    }
    RPAREN() { return this.getToken(ApexParser.RPAREN, 0); }
    statement() {
        return this.tryGetRuleContext(0, StatementContext);
    }
    SEMI() { return this.tryGetToken(ApexParser.SEMI, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_forStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterForStatement) {
            listener.enterForStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitForStatement) {
            listener.exitForStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitForStatement) {
            return visitor.visitForStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ForStatementContext = ForStatementContext;
class WhileStatementContext extends ParserRuleContext_1.ParserRuleContext {
    WHILE() { return this.getToken(ApexParser.WHILE, 0); }
    parExpression() {
        return this.getRuleContext(0, ParExpressionContext);
    }
    statement() {
        return this.tryGetRuleContext(0, StatementContext);
    }
    SEMI() { return this.tryGetToken(ApexParser.SEMI, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_whileStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterWhileStatement) {
            listener.enterWhileStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWhileStatement) {
            listener.exitWhileStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWhileStatement) {
            return visitor.visitWhileStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.WhileStatementContext = WhileStatementContext;
class DoWhileStatementContext extends ParserRuleContext_1.ParserRuleContext {
    DO() { return this.getToken(ApexParser.DO, 0); }
    block() {
        return this.getRuleContext(0, BlockContext);
    }
    WHILE() { return this.getToken(ApexParser.WHILE, 0); }
    parExpression() {
        return this.getRuleContext(0, ParExpressionContext);
    }
    SEMI() { return this.getToken(ApexParser.SEMI, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_doWhileStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterDoWhileStatement) {
            listener.enterDoWhileStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDoWhileStatement) {
            listener.exitDoWhileStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDoWhileStatement) {
            return visitor.visitDoWhileStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.DoWhileStatementContext = DoWhileStatementContext;
class TryStatementContext extends ParserRuleContext_1.ParserRuleContext {
    TRY() { return this.getToken(ApexParser.TRY, 0); }
    block() {
        return this.getRuleContext(0, BlockContext);
    }
    finallyBlock() {
        return this.tryGetRuleContext(0, FinallyBlockContext);
    }
    catchClause(i) {
        if (i === undefined) {
            return this.getRuleContexts(CatchClauseContext);
        }
        else {
            return this.getRuleContext(i, CatchClauseContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_tryStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterTryStatement) {
            listener.enterTryStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTryStatement) {
            listener.exitTryStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTryStatement) {
            return visitor.visitTryStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TryStatementContext = TryStatementContext;
class ReturnStatementContext extends ParserRuleContext_1.ParserRuleContext {
    RETURN() { return this.getToken(ApexParser.RETURN, 0); }
    SEMI() { return this.getToken(ApexParser.SEMI, 0); }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_returnStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterReturnStatement) {
            listener.enterReturnStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReturnStatement) {
            listener.exitReturnStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitReturnStatement) {
            return visitor.visitReturnStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ReturnStatementContext = ReturnStatementContext;
class ThrowStatementContext extends ParserRuleContext_1.ParserRuleContext {
    THROW() { return this.getToken(ApexParser.THROW, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    SEMI() { return this.getToken(ApexParser.SEMI, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_throwStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterThrowStatement) {
            listener.enterThrowStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitThrowStatement) {
            listener.exitThrowStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitThrowStatement) {
            return visitor.visitThrowStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ThrowStatementContext = ThrowStatementContext;
class BreakStatementContext extends ParserRuleContext_1.ParserRuleContext {
    BREAK() { return this.getToken(ApexParser.BREAK, 0); }
    SEMI() { return this.getToken(ApexParser.SEMI, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_breakStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterBreakStatement) {
            listener.enterBreakStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBreakStatement) {
            listener.exitBreakStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitBreakStatement) {
            return visitor.visitBreakStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.BreakStatementContext = BreakStatementContext;
class ContinueStatementContext extends ParserRuleContext_1.ParserRuleContext {
    CONTINUE() { return this.getToken(ApexParser.CONTINUE, 0); }
    SEMI() { return this.getToken(ApexParser.SEMI, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_continueStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterContinueStatement) {
            listener.enterContinueStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitContinueStatement) {
            listener.exitContinueStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitContinueStatement) {
            return visitor.visitContinueStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ContinueStatementContext = ContinueStatementContext;
class AccessLevelContext extends ParserRuleContext_1.ParserRuleContext {
    AS() { return this.getToken(ApexParser.AS, 0); }
    SYSTEM() { return this.tryGetToken(ApexParser.SYSTEM, 0); }
    USER() { return this.tryGetToken(ApexParser.USER, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_accessLevel; }
    // @Override
    enterRule(listener) {
        if (listener.enterAccessLevel) {
            listener.enterAccessLevel(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAccessLevel) {
            listener.exitAccessLevel(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitAccessLevel) {
            return visitor.visitAccessLevel(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.AccessLevelContext = AccessLevelContext;
class InsertStatementContext extends ParserRuleContext_1.ParserRuleContext {
    INSERT() { return this.getToken(ApexParser.INSERT, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    SEMI() { return this.getToken(ApexParser.SEMI, 0); }
    accessLevel() {
        return this.tryGetRuleContext(0, AccessLevelContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_insertStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterInsertStatement) {
            listener.enterInsertStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInsertStatement) {
            listener.exitInsertStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitInsertStatement) {
            return visitor.visitInsertStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.InsertStatementContext = InsertStatementContext;
class UpdateStatementContext extends ParserRuleContext_1.ParserRuleContext {
    UPDATE() { return this.getToken(ApexParser.UPDATE, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    SEMI() { return this.getToken(ApexParser.SEMI, 0); }
    accessLevel() {
        return this.tryGetRuleContext(0, AccessLevelContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_updateStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterUpdateStatement) {
            listener.enterUpdateStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUpdateStatement) {
            listener.exitUpdateStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUpdateStatement) {
            return visitor.visitUpdateStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.UpdateStatementContext = UpdateStatementContext;
class DeleteStatementContext extends ParserRuleContext_1.ParserRuleContext {
    DELETE() { return this.getToken(ApexParser.DELETE, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    SEMI() { return this.getToken(ApexParser.SEMI, 0); }
    accessLevel() {
        return this.tryGetRuleContext(0, AccessLevelContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_deleteStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterDeleteStatement) {
            listener.enterDeleteStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDeleteStatement) {
            listener.exitDeleteStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDeleteStatement) {
            return visitor.visitDeleteStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.DeleteStatementContext = DeleteStatementContext;
class UndeleteStatementContext extends ParserRuleContext_1.ParserRuleContext {
    UNDELETE() { return this.getToken(ApexParser.UNDELETE, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    SEMI() { return this.getToken(ApexParser.SEMI, 0); }
    accessLevel() {
        return this.tryGetRuleContext(0, AccessLevelContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_undeleteStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterUndeleteStatement) {
            listener.enterUndeleteStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUndeleteStatement) {
            listener.exitUndeleteStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUndeleteStatement) {
            return visitor.visitUndeleteStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.UndeleteStatementContext = UndeleteStatementContext;
class UpsertStatementContext extends ParserRuleContext_1.ParserRuleContext {
    UPSERT() { return this.getToken(ApexParser.UPSERT, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    SEMI() { return this.getToken(ApexParser.SEMI, 0); }
    accessLevel() {
        return this.tryGetRuleContext(0, AccessLevelContext);
    }
    qualifiedName() {
        return this.tryGetRuleContext(0, QualifiedNameContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_upsertStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterUpsertStatement) {
            listener.enterUpsertStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUpsertStatement) {
            listener.exitUpsertStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUpsertStatement) {
            return visitor.visitUpsertStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.UpsertStatementContext = UpsertStatementContext;
class MergeStatementContext extends ParserRuleContext_1.ParserRuleContext {
    MERGE() { return this.getToken(ApexParser.MERGE, 0); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    SEMI() { return this.getToken(ApexParser.SEMI, 0); }
    accessLevel() {
        return this.tryGetRuleContext(0, AccessLevelContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_mergeStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterMergeStatement) {
            listener.enterMergeStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMergeStatement) {
            listener.exitMergeStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitMergeStatement) {
            return visitor.visitMergeStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.MergeStatementContext = MergeStatementContext;
class RunAsStatementContext extends ParserRuleContext_1.ParserRuleContext {
    SYSTEMRUNAS() { return this.getToken(ApexParser.SYSTEMRUNAS, 0); }
    LPAREN() { return this.getToken(ApexParser.LPAREN, 0); }
    RPAREN() { return this.getToken(ApexParser.RPAREN, 0); }
    block() {
        return this.getRuleContext(0, BlockContext);
    }
    expressionList() {
        return this.tryGetRuleContext(0, ExpressionListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_runAsStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterRunAsStatement) {
            listener.enterRunAsStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRunAsStatement) {
            listener.exitRunAsStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitRunAsStatement) {
            return visitor.visitRunAsStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.RunAsStatementContext = RunAsStatementContext;
class ExpressionStatementContext extends ParserRuleContext_1.ParserRuleContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    SEMI() { return this.getToken(ApexParser.SEMI, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_expressionStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterExpressionStatement) {
            listener.enterExpressionStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExpressionStatement) {
            listener.exitExpressionStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitExpressionStatement) {
            return visitor.visitExpressionStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ExpressionStatementContext = ExpressionStatementContext;
class PropertyBlockContext extends ParserRuleContext_1.ParserRuleContext {
    getter() {
        return this.tryGetRuleContext(0, GetterContext);
    }
    setter() {
        return this.tryGetRuleContext(0, SetterContext);
    }
    modifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(ModifierContext);
        }
        else {
            return this.getRuleContext(i, ModifierContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_propertyBlock; }
    // @Override
    enterRule(listener) {
        if (listener.enterPropertyBlock) {
            listener.enterPropertyBlock(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPropertyBlock) {
            listener.exitPropertyBlock(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPropertyBlock) {
            return visitor.visitPropertyBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.PropertyBlockContext = PropertyBlockContext;
class GetterContext extends ParserRuleContext_1.ParserRuleContext {
    GET() { return this.getToken(ApexParser.GET, 0); }
    SEMI() { return this.tryGetToken(ApexParser.SEMI, 0); }
    block() {
        return this.tryGetRuleContext(0, BlockContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_getter; }
    // @Override
    enterRule(listener) {
        if (listener.enterGetter) {
            listener.enterGetter(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGetter) {
            listener.exitGetter(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitGetter) {
            return visitor.visitGetter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.GetterContext = GetterContext;
class SetterContext extends ParserRuleContext_1.ParserRuleContext {
    SET() { return this.getToken(ApexParser.SET, 0); }
    SEMI() { return this.tryGetToken(ApexParser.SEMI, 0); }
    block() {
        return this.tryGetRuleContext(0, BlockContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_setter; }
    // @Override
    enterRule(listener) {
        if (listener.enterSetter) {
            listener.enterSetter(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSetter) {
            listener.exitSetter(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSetter) {
            return visitor.visitSetter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SetterContext = SetterContext;
class CatchClauseContext extends ParserRuleContext_1.ParserRuleContext {
    CATCH() { return this.getToken(ApexParser.CATCH, 0); }
    LPAREN() { return this.getToken(ApexParser.LPAREN, 0); }
    qualifiedName() {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    id() {
        return this.getRuleContext(0, IdContext);
    }
    RPAREN() { return this.getToken(ApexParser.RPAREN, 0); }
    block() {
        return this.getRuleContext(0, BlockContext);
    }
    modifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(ModifierContext);
        }
        else {
            return this.getRuleContext(i, ModifierContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_catchClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterCatchClause) {
            listener.enterCatchClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCatchClause) {
            listener.exitCatchClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCatchClause) {
            return visitor.visitCatchClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.CatchClauseContext = CatchClauseContext;
class FinallyBlockContext extends ParserRuleContext_1.ParserRuleContext {
    FINALLY() { return this.getToken(ApexParser.FINALLY, 0); }
    block() {
        return this.getRuleContext(0, BlockContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_finallyBlock; }
    // @Override
    enterRule(listener) {
        if (listener.enterFinallyBlock) {
            listener.enterFinallyBlock(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFinallyBlock) {
            listener.exitFinallyBlock(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFinallyBlock) {
            return visitor.visitFinallyBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FinallyBlockContext = FinallyBlockContext;
class ForControlContext extends ParserRuleContext_1.ParserRuleContext {
    enhancedForControl() {
        return this.tryGetRuleContext(0, EnhancedForControlContext);
    }
    SEMI(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.SEMI);
        }
        else {
            return this.getToken(ApexParser.SEMI, i);
        }
    }
    forInit() {
        return this.tryGetRuleContext(0, ForInitContext);
    }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    forUpdate() {
        return this.tryGetRuleContext(0, ForUpdateContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_forControl; }
    // @Override
    enterRule(listener) {
        if (listener.enterForControl) {
            listener.enterForControl(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitForControl) {
            listener.exitForControl(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitForControl) {
            return visitor.visitForControl(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ForControlContext = ForControlContext;
class ForInitContext extends ParserRuleContext_1.ParserRuleContext {
    localVariableDeclaration() {
        return this.tryGetRuleContext(0, LocalVariableDeclarationContext);
    }
    expressionList() {
        return this.tryGetRuleContext(0, ExpressionListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_forInit; }
    // @Override
    enterRule(listener) {
        if (listener.enterForInit) {
            listener.enterForInit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitForInit) {
            listener.exitForInit(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitForInit) {
            return visitor.visitForInit(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ForInitContext = ForInitContext;
class EnhancedForControlContext extends ParserRuleContext_1.ParserRuleContext {
    typeRef() {
        return this.getRuleContext(0, TypeRefContext);
    }
    id() {
        return this.getRuleContext(0, IdContext);
    }
    COLON() { return this.getToken(ApexParser.COLON, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_enhancedForControl; }
    // @Override
    enterRule(listener) {
        if (listener.enterEnhancedForControl) {
            listener.enterEnhancedForControl(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitEnhancedForControl) {
            listener.exitEnhancedForControl(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitEnhancedForControl) {
            return visitor.visitEnhancedForControl(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.EnhancedForControlContext = EnhancedForControlContext;
class ForUpdateContext extends ParserRuleContext_1.ParserRuleContext {
    expressionList() {
        return this.getRuleContext(0, ExpressionListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_forUpdate; }
    // @Override
    enterRule(listener) {
        if (listener.enterForUpdate) {
            listener.enterForUpdate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitForUpdate) {
            listener.exitForUpdate(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitForUpdate) {
            return visitor.visitForUpdate(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ForUpdateContext = ForUpdateContext;
class ParExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    LPAREN() { return this.getToken(ApexParser.LPAREN, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    RPAREN() { return this.getToken(ApexParser.RPAREN, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_parExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterParExpression) {
            listener.enterParExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitParExpression) {
            listener.exitParExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitParExpression) {
            return visitor.visitParExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ParExpressionContext = ParExpressionContext;
class ExpressionListContext extends ParserRuleContext_1.ParserRuleContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_expressionList; }
    // @Override
    enterRule(listener) {
        if (listener.enterExpressionList) {
            listener.enterExpressionList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExpressionList) {
            listener.exitExpressionList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitExpressionList) {
            return visitor.visitExpressionList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ExpressionListContext = ExpressionListContext;
class ExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_expression; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
exports.ExpressionContext = ExpressionContext;
class PrimaryExpressionContext extends ExpressionContext {
    primary() {
        return this.getRuleContext(0, PrimaryContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPrimaryExpression) {
            listener.enterPrimaryExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPrimaryExpression) {
            listener.exitPrimaryExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPrimaryExpression) {
            return visitor.visitPrimaryExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.PrimaryExpressionContext = PrimaryExpressionContext;
class DotExpressionContext extends ExpressionContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    DOT() { return this.tryGetToken(ApexParser.DOT, 0); }
    QUESTIONDOT() { return this.tryGetToken(ApexParser.QUESTIONDOT, 0); }
    dotMethodCall() {
        return this.tryGetRuleContext(0, DotMethodCallContext);
    }
    anyId() {
        return this.tryGetRuleContext(0, AnyIdContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterDotExpression) {
            listener.enterDotExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDotExpression) {
            listener.exitDotExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDotExpression) {
            return visitor.visitDotExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.DotExpressionContext = DotExpressionContext;
class ArrayExpressionContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    LBRACK() { return this.getToken(ApexParser.LBRACK, 0); }
    RBRACK() { return this.getToken(ApexParser.RBRACK, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterArrayExpression) {
            listener.enterArrayExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArrayExpression) {
            listener.exitArrayExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitArrayExpression) {
            return visitor.visitArrayExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ArrayExpressionContext = ArrayExpressionContext;
class MethodCallExpressionContext extends ExpressionContext {
    methodCall() {
        return this.getRuleContext(0, MethodCallContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterMethodCallExpression) {
            listener.enterMethodCallExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMethodCallExpression) {
            listener.exitMethodCallExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitMethodCallExpression) {
            return visitor.visitMethodCallExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.MethodCallExpressionContext = MethodCallExpressionContext;
class NewExpressionContext extends ExpressionContext {
    NEW() { return this.getToken(ApexParser.NEW, 0); }
    creator() {
        return this.getRuleContext(0, CreatorContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterNewExpression) {
            listener.enterNewExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNewExpression) {
            listener.exitNewExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNewExpression) {
            return visitor.visitNewExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.NewExpressionContext = NewExpressionContext;
class CastExpressionContext extends ExpressionContext {
    LPAREN() { return this.getToken(ApexParser.LPAREN, 0); }
    typeRef() {
        return this.getRuleContext(0, TypeRefContext);
    }
    RPAREN() { return this.getToken(ApexParser.RPAREN, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterCastExpression) {
            listener.enterCastExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCastExpression) {
            listener.exitCastExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCastExpression) {
            return visitor.visitCastExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.CastExpressionContext = CastExpressionContext;
class SubExpressionContext extends ExpressionContext {
    LPAREN() { return this.getToken(ApexParser.LPAREN, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    RPAREN() { return this.getToken(ApexParser.RPAREN, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSubExpression) {
            listener.enterSubExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSubExpression) {
            listener.exitSubExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSubExpression) {
            return visitor.visitSubExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SubExpressionContext = SubExpressionContext;
class PostOpExpressionContext extends ExpressionContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    INC() { return this.tryGetToken(ApexParser.INC, 0); }
    DEC() { return this.tryGetToken(ApexParser.DEC, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPostOpExpression) {
            listener.enterPostOpExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPostOpExpression) {
            listener.exitPostOpExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPostOpExpression) {
            return visitor.visitPostOpExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.PostOpExpressionContext = PostOpExpressionContext;
class PreOpExpressionContext extends ExpressionContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    ADD() { return this.tryGetToken(ApexParser.ADD, 0); }
    SUB() { return this.tryGetToken(ApexParser.SUB, 0); }
    INC() { return this.tryGetToken(ApexParser.INC, 0); }
    DEC() { return this.tryGetToken(ApexParser.DEC, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPreOpExpression) {
            listener.enterPreOpExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPreOpExpression) {
            listener.exitPreOpExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPreOpExpression) {
            return visitor.visitPreOpExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.PreOpExpressionContext = PreOpExpressionContext;
class NegExpressionContext extends ExpressionContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    TILDE() { return this.tryGetToken(ApexParser.TILDE, 0); }
    BANG() { return this.tryGetToken(ApexParser.BANG, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterNegExpression) {
            listener.enterNegExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNegExpression) {
            listener.exitNegExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNegExpression) {
            return visitor.visitNegExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.NegExpressionContext = NegExpressionContext;
class Arth1ExpressionContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    MUL() { return this.tryGetToken(ApexParser.MUL, 0); }
    DIV() { return this.tryGetToken(ApexParser.DIV, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterArth1Expression) {
            listener.enterArth1Expression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArth1Expression) {
            listener.exitArth1Expression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitArth1Expression) {
            return visitor.visitArth1Expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.Arth1ExpressionContext = Arth1ExpressionContext;
class Arth2ExpressionContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    ADD() { return this.tryGetToken(ApexParser.ADD, 0); }
    SUB() { return this.tryGetToken(ApexParser.SUB, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterArth2Expression) {
            listener.enterArth2Expression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArth2Expression) {
            listener.exitArth2Expression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitArth2Expression) {
            return visitor.visitArth2Expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.Arth2ExpressionContext = Arth2ExpressionContext;
class BitExpressionContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    LT(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.LT);
        }
        else {
            return this.getToken(ApexParser.LT, i);
        }
    }
    GT(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.GT);
        }
        else {
            return this.getToken(ApexParser.GT, i);
        }
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterBitExpression) {
            listener.enterBitExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitExpression) {
            listener.exitBitExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitBitExpression) {
            return visitor.visitBitExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.BitExpressionContext = BitExpressionContext;
class CmpExpressionContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    GT() { return this.tryGetToken(ApexParser.GT, 0); }
    LT() { return this.tryGetToken(ApexParser.LT, 0); }
    ASSIGN() { return this.tryGetToken(ApexParser.ASSIGN, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterCmpExpression) {
            listener.enterCmpExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCmpExpression) {
            listener.exitCmpExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCmpExpression) {
            return visitor.visitCmpExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.CmpExpressionContext = CmpExpressionContext;
class InstanceOfExpressionContext extends ExpressionContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    INSTANCEOF() { return this.getToken(ApexParser.INSTANCEOF, 0); }
    typeRef() {
        return this.getRuleContext(0, TypeRefContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterInstanceOfExpression) {
            listener.enterInstanceOfExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInstanceOfExpression) {
            listener.exitInstanceOfExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitInstanceOfExpression) {
            return visitor.visitInstanceOfExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.InstanceOfExpressionContext = InstanceOfExpressionContext;
class EqualityExpressionContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    TRIPLEEQUAL() { return this.tryGetToken(ApexParser.TRIPLEEQUAL, 0); }
    TRIPLENOTEQUAL() { return this.tryGetToken(ApexParser.TRIPLENOTEQUAL, 0); }
    EQUAL() { return this.tryGetToken(ApexParser.EQUAL, 0); }
    NOTEQUAL() { return this.tryGetToken(ApexParser.NOTEQUAL, 0); }
    LESSANDGREATER() { return this.tryGetToken(ApexParser.LESSANDGREATER, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterEqualityExpression) {
            listener.enterEqualityExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitEqualityExpression) {
            listener.exitEqualityExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitEqualityExpression) {
            return visitor.visitEqualityExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.EqualityExpressionContext = EqualityExpressionContext;
class BitAndExpressionContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    BITAND() { return this.getToken(ApexParser.BITAND, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterBitAndExpression) {
            listener.enterBitAndExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitAndExpression) {
            listener.exitBitAndExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitBitAndExpression) {
            return visitor.visitBitAndExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.BitAndExpressionContext = BitAndExpressionContext;
class BitNotExpressionContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    CARET() { return this.getToken(ApexParser.CARET, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterBitNotExpression) {
            listener.enterBitNotExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitNotExpression) {
            listener.exitBitNotExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitBitNotExpression) {
            return visitor.visitBitNotExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.BitNotExpressionContext = BitNotExpressionContext;
class BitOrExpressionContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    BITOR() { return this.getToken(ApexParser.BITOR, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterBitOrExpression) {
            listener.enterBitOrExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitOrExpression) {
            listener.exitBitOrExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitBitOrExpression) {
            return visitor.visitBitOrExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.BitOrExpressionContext = BitOrExpressionContext;
class LogAndExpressionContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    AND() { return this.getToken(ApexParser.AND, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterLogAndExpression) {
            listener.enterLogAndExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLogAndExpression) {
            listener.exitLogAndExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLogAndExpression) {
            return visitor.visitLogAndExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.LogAndExpressionContext = LogAndExpressionContext;
class LogOrExpressionContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    OR() { return this.getToken(ApexParser.OR, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterLogOrExpression) {
            listener.enterLogOrExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLogOrExpression) {
            listener.exitLogOrExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLogOrExpression) {
            return visitor.visitLogOrExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.LogOrExpressionContext = LogOrExpressionContext;
class CoalExpressionContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    COAL() { return this.getToken(ApexParser.COAL, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterCoalExpression) {
            listener.enterCoalExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCoalExpression) {
            listener.exitCoalExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCoalExpression) {
            return visitor.visitCoalExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.CoalExpressionContext = CoalExpressionContext;
class CondExpressionContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    QUESTION() { return this.getToken(ApexParser.QUESTION, 0); }
    COLON() { return this.getToken(ApexParser.COLON, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterCondExpression) {
            listener.enterCondExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCondExpression) {
            listener.exitCondExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCondExpression) {
            return visitor.visitCondExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.CondExpressionContext = CondExpressionContext;
class AssignExpressionContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    ASSIGN() { return this.tryGetToken(ApexParser.ASSIGN, 0); }
    ADD_ASSIGN() { return this.tryGetToken(ApexParser.ADD_ASSIGN, 0); }
    SUB_ASSIGN() { return this.tryGetToken(ApexParser.SUB_ASSIGN, 0); }
    MUL_ASSIGN() { return this.tryGetToken(ApexParser.MUL_ASSIGN, 0); }
    DIV_ASSIGN() { return this.tryGetToken(ApexParser.DIV_ASSIGN, 0); }
    AND_ASSIGN() { return this.tryGetToken(ApexParser.AND_ASSIGN, 0); }
    OR_ASSIGN() { return this.tryGetToken(ApexParser.OR_ASSIGN, 0); }
    XOR_ASSIGN() { return this.tryGetToken(ApexParser.XOR_ASSIGN, 0); }
    RSHIFT_ASSIGN() { return this.tryGetToken(ApexParser.RSHIFT_ASSIGN, 0); }
    URSHIFT_ASSIGN() { return this.tryGetToken(ApexParser.URSHIFT_ASSIGN, 0); }
    LSHIFT_ASSIGN() { return this.tryGetToken(ApexParser.LSHIFT_ASSIGN, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterAssignExpression) {
            listener.enterAssignExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAssignExpression) {
            listener.exitAssignExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitAssignExpression) {
            return visitor.visitAssignExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.AssignExpressionContext = AssignExpressionContext;
class PrimaryContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_primary; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
exports.PrimaryContext = PrimaryContext;
class ThisPrimaryContext extends PrimaryContext {
    THIS() { return this.getToken(ApexParser.THIS, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterThisPrimary) {
            listener.enterThisPrimary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitThisPrimary) {
            listener.exitThisPrimary(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitThisPrimary) {
            return visitor.visitThisPrimary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ThisPrimaryContext = ThisPrimaryContext;
class SuperPrimaryContext extends PrimaryContext {
    SUPER() { return this.getToken(ApexParser.SUPER, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSuperPrimary) {
            listener.enterSuperPrimary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSuperPrimary) {
            listener.exitSuperPrimary(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSuperPrimary) {
            return visitor.visitSuperPrimary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SuperPrimaryContext = SuperPrimaryContext;
class LiteralPrimaryContext extends PrimaryContext {
    literal() {
        return this.getRuleContext(0, LiteralContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterLiteralPrimary) {
            listener.enterLiteralPrimary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLiteralPrimary) {
            listener.exitLiteralPrimary(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLiteralPrimary) {
            return visitor.visitLiteralPrimary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.LiteralPrimaryContext = LiteralPrimaryContext;
class TypeRefPrimaryContext extends PrimaryContext {
    typeRef() {
        return this.getRuleContext(0, TypeRefContext);
    }
    DOT() { return this.getToken(ApexParser.DOT, 0); }
    CLASS() { return this.getToken(ApexParser.CLASS, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeRefPrimary) {
            listener.enterTypeRefPrimary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeRefPrimary) {
            listener.exitTypeRefPrimary(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTypeRefPrimary) {
            return visitor.visitTypeRefPrimary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TypeRefPrimaryContext = TypeRefPrimaryContext;
class VoidPrimaryContext extends PrimaryContext {
    VOID() { return this.getToken(ApexParser.VOID, 0); }
    DOT() { return this.getToken(ApexParser.DOT, 0); }
    CLASS() { return this.getToken(ApexParser.CLASS, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterVoidPrimary) {
            listener.enterVoidPrimary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVoidPrimary) {
            listener.exitVoidPrimary(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitVoidPrimary) {
            return visitor.visitVoidPrimary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.VoidPrimaryContext = VoidPrimaryContext;
class IdPrimaryContext extends PrimaryContext {
    id() {
        return this.getRuleContext(0, IdContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterIdPrimary) {
            listener.enterIdPrimary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdPrimary) {
            listener.exitIdPrimary(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIdPrimary) {
            return visitor.visitIdPrimary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.IdPrimaryContext = IdPrimaryContext;
class SoqlPrimaryContext extends PrimaryContext {
    soqlLiteral() {
        return this.getRuleContext(0, SoqlLiteralContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSoqlPrimary) {
            listener.enterSoqlPrimary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSoqlPrimary) {
            listener.exitSoqlPrimary(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSoqlPrimary) {
            return visitor.visitSoqlPrimary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SoqlPrimaryContext = SoqlPrimaryContext;
class SoslPrimaryContext extends PrimaryContext {
    soslLiteral() {
        return this.getRuleContext(0, SoslLiteralContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSoslPrimary) {
            listener.enterSoslPrimary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSoslPrimary) {
            listener.exitSoslPrimary(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSoslPrimary) {
            return visitor.visitSoslPrimary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SoslPrimaryContext = SoslPrimaryContext;
class MethodCallContext extends ParserRuleContext_1.ParserRuleContext {
    id() {
        return this.tryGetRuleContext(0, IdContext);
    }
    LPAREN() { return this.getToken(ApexParser.LPAREN, 0); }
    RPAREN() { return this.getToken(ApexParser.RPAREN, 0); }
    expressionList() {
        return this.tryGetRuleContext(0, ExpressionListContext);
    }
    THIS() { return this.tryGetToken(ApexParser.THIS, 0); }
    SUPER() { return this.tryGetToken(ApexParser.SUPER, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_methodCall; }
    // @Override
    enterRule(listener) {
        if (listener.enterMethodCall) {
            listener.enterMethodCall(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMethodCall) {
            listener.exitMethodCall(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitMethodCall) {
            return visitor.visitMethodCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.MethodCallContext = MethodCallContext;
class DotMethodCallContext extends ParserRuleContext_1.ParserRuleContext {
    anyId() {
        return this.getRuleContext(0, AnyIdContext);
    }
    LPAREN() { return this.getToken(ApexParser.LPAREN, 0); }
    RPAREN() { return this.getToken(ApexParser.RPAREN, 0); }
    expressionList() {
        return this.tryGetRuleContext(0, ExpressionListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_dotMethodCall; }
    // @Override
    enterRule(listener) {
        if (listener.enterDotMethodCall) {
            listener.enterDotMethodCall(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDotMethodCall) {
            listener.exitDotMethodCall(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDotMethodCall) {
            return visitor.visitDotMethodCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.DotMethodCallContext = DotMethodCallContext;
class CreatorContext extends ParserRuleContext_1.ParserRuleContext {
    createdName() {
        return this.getRuleContext(0, CreatedNameContext);
    }
    noRest() {
        return this.tryGetRuleContext(0, NoRestContext);
    }
    classCreatorRest() {
        return this.tryGetRuleContext(0, ClassCreatorRestContext);
    }
    arrayCreatorRest() {
        return this.tryGetRuleContext(0, ArrayCreatorRestContext);
    }
    mapCreatorRest() {
        return this.tryGetRuleContext(0, MapCreatorRestContext);
    }
    setCreatorRest() {
        return this.tryGetRuleContext(0, SetCreatorRestContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_creator; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreator) {
            listener.enterCreator(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreator) {
            listener.exitCreator(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCreator) {
            return visitor.visitCreator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.CreatorContext = CreatorContext;
class CreatedNameContext extends ParserRuleContext_1.ParserRuleContext {
    idCreatedNamePair(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdCreatedNamePairContext);
        }
        else {
            return this.getRuleContext(i, IdCreatedNamePairContext);
        }
    }
    DOT(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.DOT);
        }
        else {
            return this.getToken(ApexParser.DOT, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_createdName; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreatedName) {
            listener.enterCreatedName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreatedName) {
            listener.exitCreatedName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCreatedName) {
            return visitor.visitCreatedName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.CreatedNameContext = CreatedNameContext;
class IdCreatedNamePairContext extends ParserRuleContext_1.ParserRuleContext {
    anyId() {
        return this.getRuleContext(0, AnyIdContext);
    }
    LT() { return this.tryGetToken(ApexParser.LT, 0); }
    typeList() {
        return this.tryGetRuleContext(0, TypeListContext);
    }
    GT() { return this.tryGetToken(ApexParser.GT, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_idCreatedNamePair; }
    // @Override
    enterRule(listener) {
        if (listener.enterIdCreatedNamePair) {
            listener.enterIdCreatedNamePair(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdCreatedNamePair) {
            listener.exitIdCreatedNamePair(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIdCreatedNamePair) {
            return visitor.visitIdCreatedNamePair(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.IdCreatedNamePairContext = IdCreatedNamePairContext;
class NoRestContext extends ParserRuleContext_1.ParserRuleContext {
    LBRACE() { return this.getToken(ApexParser.LBRACE, 0); }
    RBRACE() { return this.getToken(ApexParser.RBRACE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_noRest; }
    // @Override
    enterRule(listener) {
        if (listener.enterNoRest) {
            listener.enterNoRest(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNoRest) {
            listener.exitNoRest(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNoRest) {
            return visitor.visitNoRest(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.NoRestContext = NoRestContext;
class ClassCreatorRestContext extends ParserRuleContext_1.ParserRuleContext {
    arguments() {
        return this.getRuleContext(0, ArgumentsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_classCreatorRest; }
    // @Override
    enterRule(listener) {
        if (listener.enterClassCreatorRest) {
            listener.enterClassCreatorRest(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitClassCreatorRest) {
            listener.exitClassCreatorRest(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitClassCreatorRest) {
            return visitor.visitClassCreatorRest(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ClassCreatorRestContext = ClassCreatorRestContext;
class ArrayCreatorRestContext extends ParserRuleContext_1.ParserRuleContext {
    LBRACK() { return this.getToken(ApexParser.LBRACK, 0); }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    RBRACK() { return this.getToken(ApexParser.RBRACK, 0); }
    arrayInitializer() {
        return this.tryGetRuleContext(0, ArrayInitializerContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_arrayCreatorRest; }
    // @Override
    enterRule(listener) {
        if (listener.enterArrayCreatorRest) {
            listener.enterArrayCreatorRest(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArrayCreatorRest) {
            listener.exitArrayCreatorRest(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitArrayCreatorRest) {
            return visitor.visitArrayCreatorRest(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ArrayCreatorRestContext = ArrayCreatorRestContext;
class MapCreatorRestContext extends ParserRuleContext_1.ParserRuleContext {
    LBRACE() { return this.getToken(ApexParser.LBRACE, 0); }
    mapCreatorRestPair(i) {
        if (i === undefined) {
            return this.getRuleContexts(MapCreatorRestPairContext);
        }
        else {
            return this.getRuleContext(i, MapCreatorRestPairContext);
        }
    }
    RBRACE() { return this.getToken(ApexParser.RBRACE, 0); }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_mapCreatorRest; }
    // @Override
    enterRule(listener) {
        if (listener.enterMapCreatorRest) {
            listener.enterMapCreatorRest(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMapCreatorRest) {
            listener.exitMapCreatorRest(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitMapCreatorRest) {
            return visitor.visitMapCreatorRest(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.MapCreatorRestContext = MapCreatorRestContext;
class MapCreatorRestPairContext extends ParserRuleContext_1.ParserRuleContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    MAPTO() { return this.getToken(ApexParser.MAPTO, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_mapCreatorRestPair; }
    // @Override
    enterRule(listener) {
        if (listener.enterMapCreatorRestPair) {
            listener.enterMapCreatorRestPair(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMapCreatorRestPair) {
            listener.exitMapCreatorRestPair(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitMapCreatorRestPair) {
            return visitor.visitMapCreatorRestPair(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.MapCreatorRestPairContext = MapCreatorRestPairContext;
class SetCreatorRestContext extends ParserRuleContext_1.ParserRuleContext {
    LBRACE() { return this.getToken(ApexParser.LBRACE, 0); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    RBRACE() { return this.getToken(ApexParser.RBRACE, 0); }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_setCreatorRest; }
    // @Override
    enterRule(listener) {
        if (listener.enterSetCreatorRest) {
            listener.enterSetCreatorRest(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSetCreatorRest) {
            listener.exitSetCreatorRest(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSetCreatorRest) {
            return visitor.visitSetCreatorRest(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SetCreatorRestContext = SetCreatorRestContext;
class ArgumentsContext extends ParserRuleContext_1.ParserRuleContext {
    LPAREN() { return this.getToken(ApexParser.LPAREN, 0); }
    RPAREN() { return this.getToken(ApexParser.RPAREN, 0); }
    expressionList() {
        return this.tryGetRuleContext(0, ExpressionListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_arguments; }
    // @Override
    enterRule(listener) {
        if (listener.enterArguments) {
            listener.enterArguments(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArguments) {
            listener.exitArguments(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitArguments) {
            return visitor.visitArguments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ArgumentsContext = ArgumentsContext;
class SoqlLiteralContext extends ParserRuleContext_1.ParserRuleContext {
    LBRACK() { return this.getToken(ApexParser.LBRACK, 0); }
    query() {
        return this.getRuleContext(0, QueryContext);
    }
    RBRACK() { return this.getToken(ApexParser.RBRACK, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_soqlLiteral; }
    // @Override
    enterRule(listener) {
        if (listener.enterSoqlLiteral) {
            listener.enterSoqlLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSoqlLiteral) {
            listener.exitSoqlLiteral(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSoqlLiteral) {
            return visitor.visitSoqlLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SoqlLiteralContext = SoqlLiteralContext;
class QueryContext extends ParserRuleContext_1.ParserRuleContext {
    SELECT() { return this.getToken(ApexParser.SELECT, 0); }
    selectList() {
        return this.getRuleContext(0, SelectListContext);
    }
    FROM() { return this.getToken(ApexParser.FROM, 0); }
    fromNameList() {
        return this.getRuleContext(0, FromNameListContext);
    }
    forClauses() {
        return this.getRuleContext(0, ForClausesContext);
    }
    usingScope() {
        return this.tryGetRuleContext(0, UsingScopeContext);
    }
    whereClause() {
        return this.tryGetRuleContext(0, WhereClauseContext);
    }
    withClause() {
        return this.tryGetRuleContext(0, WithClauseContext);
    }
    groupByClause() {
        return this.tryGetRuleContext(0, GroupByClauseContext);
    }
    orderByClause() {
        return this.tryGetRuleContext(0, OrderByClauseContext);
    }
    limitClause() {
        return this.tryGetRuleContext(0, LimitClauseContext);
    }
    offsetClause() {
        return this.tryGetRuleContext(0, OffsetClauseContext);
    }
    allRowsClause() {
        return this.tryGetRuleContext(0, AllRowsClauseContext);
    }
    UPDATE() { return this.tryGetToken(ApexParser.UPDATE, 0); }
    updateList() {
        return this.tryGetRuleContext(0, UpdateListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_query; }
    // @Override
    enterRule(listener) {
        if (listener.enterQuery) {
            listener.enterQuery(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQuery) {
            listener.exitQuery(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitQuery) {
            return visitor.visitQuery(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.QueryContext = QueryContext;
class SubQueryContext extends ParserRuleContext_1.ParserRuleContext {
    SELECT() { return this.getToken(ApexParser.SELECT, 0); }
    subFieldList() {
        return this.getRuleContext(0, SubFieldListContext);
    }
    FROM() { return this.getToken(ApexParser.FROM, 0); }
    fromNameList() {
        return this.getRuleContext(0, FromNameListContext);
    }
    forClauses() {
        return this.getRuleContext(0, ForClausesContext);
    }
    whereClause() {
        return this.tryGetRuleContext(0, WhereClauseContext);
    }
    orderByClause() {
        return this.tryGetRuleContext(0, OrderByClauseContext);
    }
    limitClause() {
        return this.tryGetRuleContext(0, LimitClauseContext);
    }
    UPDATE() { return this.tryGetToken(ApexParser.UPDATE, 0); }
    updateList() {
        return this.tryGetRuleContext(0, UpdateListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_subQuery; }
    // @Override
    enterRule(listener) {
        if (listener.enterSubQuery) {
            listener.enterSubQuery(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSubQuery) {
            listener.exitSubQuery(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSubQuery) {
            return visitor.visitSubQuery(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SubQueryContext = SubQueryContext;
class SelectListContext extends ParserRuleContext_1.ParserRuleContext {
    selectEntry(i) {
        if (i === undefined) {
            return this.getRuleContexts(SelectEntryContext);
        }
        else {
            return this.getRuleContext(i, SelectEntryContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_selectList; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelectList) {
            listener.enterSelectList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelectList) {
            listener.exitSelectList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSelectList) {
            return visitor.visitSelectList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SelectListContext = SelectListContext;
class SelectEntryContext extends ParserRuleContext_1.ParserRuleContext {
    fieldName() {
        return this.tryGetRuleContext(0, FieldNameContext);
    }
    soqlId() {
        return this.tryGetRuleContext(0, SoqlIdContext);
    }
    soqlFunction() {
        return this.tryGetRuleContext(0, SoqlFunctionContext);
    }
    LPAREN() { return this.tryGetToken(ApexParser.LPAREN, 0); }
    subQuery() {
        return this.tryGetRuleContext(0, SubQueryContext);
    }
    RPAREN() { return this.tryGetToken(ApexParser.RPAREN, 0); }
    typeOf() {
        return this.tryGetRuleContext(0, TypeOfContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_selectEntry; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelectEntry) {
            listener.enterSelectEntry(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelectEntry) {
            listener.exitSelectEntry(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSelectEntry) {
            return visitor.visitSelectEntry(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SelectEntryContext = SelectEntryContext;
class FieldNameContext extends ParserRuleContext_1.ParserRuleContext {
    soqlId(i) {
        if (i === undefined) {
            return this.getRuleContexts(SoqlIdContext);
        }
        else {
            return this.getRuleContext(i, SoqlIdContext);
        }
    }
    DOT(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.DOT);
        }
        else {
            return this.getToken(ApexParser.DOT, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_fieldName; }
    // @Override
    enterRule(listener) {
        if (listener.enterFieldName) {
            listener.enterFieldName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFieldName) {
            listener.exitFieldName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFieldName) {
            return visitor.visitFieldName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FieldNameContext = FieldNameContext;
class FromNameListContext extends ParserRuleContext_1.ParserRuleContext {
    fieldName(i) {
        if (i === undefined) {
            return this.getRuleContexts(FieldNameContext);
        }
        else {
            return this.getRuleContext(i, FieldNameContext);
        }
    }
    soqlId(i) {
        if (i === undefined) {
            return this.getRuleContexts(SoqlIdContext);
        }
        else {
            return this.getRuleContext(i, SoqlIdContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_fromNameList; }
    // @Override
    enterRule(listener) {
        if (listener.enterFromNameList) {
            listener.enterFromNameList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFromNameList) {
            listener.exitFromNameList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFromNameList) {
            return visitor.visitFromNameList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FromNameListContext = FromNameListContext;
class SubFieldListContext extends ParserRuleContext_1.ParserRuleContext {
    subFieldEntry(i) {
        if (i === undefined) {
            return this.getRuleContexts(SubFieldEntryContext);
        }
        else {
            return this.getRuleContext(i, SubFieldEntryContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_subFieldList; }
    // @Override
    enterRule(listener) {
        if (listener.enterSubFieldList) {
            listener.enterSubFieldList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSubFieldList) {
            listener.exitSubFieldList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSubFieldList) {
            return visitor.visitSubFieldList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SubFieldListContext = SubFieldListContext;
class SubFieldEntryContext extends ParserRuleContext_1.ParserRuleContext {
    fieldName() {
        return this.tryGetRuleContext(0, FieldNameContext);
    }
    soqlId() {
        return this.tryGetRuleContext(0, SoqlIdContext);
    }
    soqlFunction() {
        return this.tryGetRuleContext(0, SoqlFunctionContext);
    }
    LPAREN() { return this.tryGetToken(ApexParser.LPAREN, 0); }
    subQuery() {
        return this.tryGetRuleContext(0, SubQueryContext);
    }
    RPAREN() { return this.tryGetToken(ApexParser.RPAREN, 0); }
    typeOf() {
        return this.tryGetRuleContext(0, TypeOfContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_subFieldEntry; }
    // @Override
    enterRule(listener) {
        if (listener.enterSubFieldEntry) {
            listener.enterSubFieldEntry(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSubFieldEntry) {
            listener.exitSubFieldEntry(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSubFieldEntry) {
            return visitor.visitSubFieldEntry(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SubFieldEntryContext = SubFieldEntryContext;
class SoqlFieldsParameterContext extends ParserRuleContext_1.ParserRuleContext {
    ALL() { return this.tryGetToken(ApexParser.ALL, 0); }
    CUSTOM() { return this.tryGetToken(ApexParser.CUSTOM, 0); }
    STANDARD() { return this.tryGetToken(ApexParser.STANDARD, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_soqlFieldsParameter; }
    // @Override
    enterRule(listener) {
        if (listener.enterSoqlFieldsParameter) {
            listener.enterSoqlFieldsParameter(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSoqlFieldsParameter) {
            listener.exitSoqlFieldsParameter(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSoqlFieldsParameter) {
            return visitor.visitSoqlFieldsParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SoqlFieldsParameterContext = SoqlFieldsParameterContext;
class SoqlFunctionContext extends ParserRuleContext_1.ParserRuleContext {
    AVG() { return this.tryGetToken(ApexParser.AVG, 0); }
    LPAREN() { return this.getToken(ApexParser.LPAREN, 0); }
    fieldName() {
        return this.tryGetRuleContext(0, FieldNameContext);
    }
    RPAREN() { return this.getToken(ApexParser.RPAREN, 0); }
    COUNT() { return this.tryGetToken(ApexParser.COUNT, 0); }
    COUNT_DISTINCT() { return this.tryGetToken(ApexParser.COUNT_DISTINCT, 0); }
    MIN() { return this.tryGetToken(ApexParser.MIN, 0); }
    MAX() { return this.tryGetToken(ApexParser.MAX, 0); }
    SUM() { return this.tryGetToken(ApexParser.SUM, 0); }
    TOLABEL() { return this.tryGetToken(ApexParser.TOLABEL, 0); }
    FORMAT() { return this.tryGetToken(ApexParser.FORMAT, 0); }
    CALENDAR_MONTH() { return this.tryGetToken(ApexParser.CALENDAR_MONTH, 0); }
    dateFieldName() {
        return this.tryGetRuleContext(0, DateFieldNameContext);
    }
    CALENDAR_QUARTER() { return this.tryGetToken(ApexParser.CALENDAR_QUARTER, 0); }
    CALENDAR_YEAR() { return this.tryGetToken(ApexParser.CALENDAR_YEAR, 0); }
    DAY_IN_MONTH() { return this.tryGetToken(ApexParser.DAY_IN_MONTH, 0); }
    DAY_IN_WEEK() { return this.tryGetToken(ApexParser.DAY_IN_WEEK, 0); }
    DAY_IN_YEAR() { return this.tryGetToken(ApexParser.DAY_IN_YEAR, 0); }
    DAY_ONLY() { return this.tryGetToken(ApexParser.DAY_ONLY, 0); }
    FISCAL_MONTH() { return this.tryGetToken(ApexParser.FISCAL_MONTH, 0); }
    FISCAL_QUARTER() { return this.tryGetToken(ApexParser.FISCAL_QUARTER, 0); }
    FISCAL_YEAR() { return this.tryGetToken(ApexParser.FISCAL_YEAR, 0); }
    HOUR_IN_DAY() { return this.tryGetToken(ApexParser.HOUR_IN_DAY, 0); }
    WEEK_IN_MONTH() { return this.tryGetToken(ApexParser.WEEK_IN_MONTH, 0); }
    WEEK_IN_YEAR() { return this.tryGetToken(ApexParser.WEEK_IN_YEAR, 0); }
    FIELDS() { return this.tryGetToken(ApexParser.FIELDS, 0); }
    soqlFieldsParameter() {
        return this.tryGetRuleContext(0, SoqlFieldsParameterContext);
    }
    DISTANCE() { return this.tryGetToken(ApexParser.DISTANCE, 0); }
    locationValue(i) {
        if (i === undefined) {
            return this.getRuleContexts(LocationValueContext);
        }
        else {
            return this.getRuleContext(i, LocationValueContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    StringLiteral() { return this.tryGetToken(ApexParser.StringLiteral, 0); }
    GROUPING() { return this.tryGetToken(ApexParser.GROUPING, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_soqlFunction; }
    // @Override
    enterRule(listener) {
        if (listener.enterSoqlFunction) {
            listener.enterSoqlFunction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSoqlFunction) {
            listener.exitSoqlFunction(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSoqlFunction) {
            return visitor.visitSoqlFunction(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SoqlFunctionContext = SoqlFunctionContext;
class DateFieldNameContext extends ParserRuleContext_1.ParserRuleContext {
    CONVERT_TIMEZONE() { return this.tryGetToken(ApexParser.CONVERT_TIMEZONE, 0); }
    LPAREN() { return this.tryGetToken(ApexParser.LPAREN, 0); }
    fieldName() {
        return this.getRuleContext(0, FieldNameContext);
    }
    RPAREN() { return this.tryGetToken(ApexParser.RPAREN, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_dateFieldName; }
    // @Override
    enterRule(listener) {
        if (listener.enterDateFieldName) {
            listener.enterDateFieldName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDateFieldName) {
            listener.exitDateFieldName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDateFieldName) {
            return visitor.visitDateFieldName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.DateFieldNameContext = DateFieldNameContext;
class LocationValueContext extends ParserRuleContext_1.ParserRuleContext {
    fieldName() {
        return this.tryGetRuleContext(0, FieldNameContext);
    }
    boundExpression() {
        return this.tryGetRuleContext(0, BoundExpressionContext);
    }
    GEOLOCATION() { return this.tryGetToken(ApexParser.GEOLOCATION, 0); }
    LPAREN() { return this.tryGetToken(ApexParser.LPAREN, 0); }
    coordinateValue(i) {
        if (i === undefined) {
            return this.getRuleContexts(CoordinateValueContext);
        }
        else {
            return this.getRuleContext(i, CoordinateValueContext);
        }
    }
    COMMA() { return this.tryGetToken(ApexParser.COMMA, 0); }
    RPAREN() { return this.tryGetToken(ApexParser.RPAREN, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_locationValue; }
    // @Override
    enterRule(listener) {
        if (listener.enterLocationValue) {
            listener.enterLocationValue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLocationValue) {
            listener.exitLocationValue(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLocationValue) {
            return visitor.visitLocationValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.LocationValueContext = LocationValueContext;
class CoordinateValueContext extends ParserRuleContext_1.ParserRuleContext {
    signedNumber() {
        return this.tryGetRuleContext(0, SignedNumberContext);
    }
    boundExpression() {
        return this.tryGetRuleContext(0, BoundExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_coordinateValue; }
    // @Override
    enterRule(listener) {
        if (listener.enterCoordinateValue) {
            listener.enterCoordinateValue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCoordinateValue) {
            listener.exitCoordinateValue(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCoordinateValue) {
            return visitor.visitCoordinateValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.CoordinateValueContext = CoordinateValueContext;
class TypeOfContext extends ParserRuleContext_1.ParserRuleContext {
    TYPEOF() { return this.getToken(ApexParser.TYPEOF, 0); }
    fieldName() {
        return this.getRuleContext(0, FieldNameContext);
    }
    END() { return this.getToken(ApexParser.END, 0); }
    whenClause(i) {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }
        else {
            return this.getRuleContext(i, WhenClauseContext);
        }
    }
    elseClause() {
        return this.tryGetRuleContext(0, ElseClauseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_typeOf; }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeOf) {
            listener.enterTypeOf(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeOf) {
            listener.exitTypeOf(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTypeOf) {
            return visitor.visitTypeOf(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TypeOfContext = TypeOfContext;
class WhenClauseContext extends ParserRuleContext_1.ParserRuleContext {
    WHEN() { return this.getToken(ApexParser.WHEN, 0); }
    fieldName() {
        return this.getRuleContext(0, FieldNameContext);
    }
    THEN() { return this.getToken(ApexParser.THEN, 0); }
    fieldNameList() {
        return this.getRuleContext(0, FieldNameListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_whenClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterWhenClause) {
            listener.enterWhenClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWhenClause) {
            listener.exitWhenClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWhenClause) {
            return visitor.visitWhenClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.WhenClauseContext = WhenClauseContext;
class ElseClauseContext extends ParserRuleContext_1.ParserRuleContext {
    ELSE() { return this.getToken(ApexParser.ELSE, 0); }
    fieldNameList() {
        return this.getRuleContext(0, FieldNameListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_elseClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterElseClause) {
            listener.enterElseClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitElseClause) {
            listener.exitElseClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitElseClause) {
            return visitor.visitElseClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ElseClauseContext = ElseClauseContext;
class FieldNameListContext extends ParserRuleContext_1.ParserRuleContext {
    fieldName(i) {
        if (i === undefined) {
            return this.getRuleContexts(FieldNameContext);
        }
        else {
            return this.getRuleContext(i, FieldNameContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_fieldNameList; }
    // @Override
    enterRule(listener) {
        if (listener.enterFieldNameList) {
            listener.enterFieldNameList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFieldNameList) {
            listener.exitFieldNameList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFieldNameList) {
            return visitor.visitFieldNameList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FieldNameListContext = FieldNameListContext;
class UsingScopeContext extends ParserRuleContext_1.ParserRuleContext {
    USING() { return this.getToken(ApexParser.USING, 0); }
    SCOPE() { return this.getToken(ApexParser.SCOPE, 0); }
    soqlId() {
        return this.getRuleContext(0, SoqlIdContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_usingScope; }
    // @Override
    enterRule(listener) {
        if (listener.enterUsingScope) {
            listener.enterUsingScope(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUsingScope) {
            listener.exitUsingScope(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUsingScope) {
            return visitor.visitUsingScope(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.UsingScopeContext = UsingScopeContext;
class WhereClauseContext extends ParserRuleContext_1.ParserRuleContext {
    WHERE() { return this.getToken(ApexParser.WHERE, 0); }
    logicalExpression() {
        return this.getRuleContext(0, LogicalExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_whereClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterWhereClause) {
            listener.enterWhereClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWhereClause) {
            listener.exitWhereClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.WhereClauseContext = WhereClauseContext;
class LogicalExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    conditionalExpression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ConditionalExpressionContext);
        }
        else {
            return this.getRuleContext(i, ConditionalExpressionContext);
        }
    }
    SOQLAND(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.SOQLAND);
        }
        else {
            return this.getToken(ApexParser.SOQLAND, i);
        }
    }
    SOQLOR(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.SOQLOR);
        }
        else {
            return this.getToken(ApexParser.SOQLOR, i);
        }
    }
    NOT() { return this.tryGetToken(ApexParser.NOT, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_logicalExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterLogicalExpression) {
            listener.enterLogicalExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLogicalExpression) {
            listener.exitLogicalExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLogicalExpression) {
            return visitor.visitLogicalExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.LogicalExpressionContext = LogicalExpressionContext;
class ConditionalExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    LPAREN() { return this.tryGetToken(ApexParser.LPAREN, 0); }
    logicalExpression() {
        return this.tryGetRuleContext(0, LogicalExpressionContext);
    }
    RPAREN() { return this.tryGetToken(ApexParser.RPAREN, 0); }
    fieldExpression() {
        return this.tryGetRuleContext(0, FieldExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_conditionalExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterConditionalExpression) {
            listener.enterConditionalExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitConditionalExpression) {
            listener.exitConditionalExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitConditionalExpression) {
            return visitor.visitConditionalExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ConditionalExpressionContext = ConditionalExpressionContext;
class FieldExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    fieldName() {
        return this.tryGetRuleContext(0, FieldNameContext);
    }
    comparisonOperator() {
        return this.getRuleContext(0, ComparisonOperatorContext);
    }
    value() {
        return this.getRuleContext(0, ValueContext);
    }
    soqlFunction() {
        return this.tryGetRuleContext(0, SoqlFunctionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_fieldExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterFieldExpression) {
            listener.enterFieldExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFieldExpression) {
            listener.exitFieldExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFieldExpression) {
            return visitor.visitFieldExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FieldExpressionContext = FieldExpressionContext;
class ComparisonOperatorContext extends ParserRuleContext_1.ParserRuleContext {
    ASSIGN() { return this.tryGetToken(ApexParser.ASSIGN, 0); }
    NOTEQUAL() { return this.tryGetToken(ApexParser.NOTEQUAL, 0); }
    LT() { return this.tryGetToken(ApexParser.LT, 0); }
    GT() { return this.tryGetToken(ApexParser.GT, 0); }
    LESSANDGREATER() { return this.tryGetToken(ApexParser.LESSANDGREATER, 0); }
    LIKE() { return this.tryGetToken(ApexParser.LIKE, 0); }
    IN() { return this.tryGetToken(ApexParser.IN, 0); }
    NOT() { return this.tryGetToken(ApexParser.NOT, 0); }
    INCLUDES() { return this.tryGetToken(ApexParser.INCLUDES, 0); }
    EXCLUDES() { return this.tryGetToken(ApexParser.EXCLUDES, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_comparisonOperator; }
    // @Override
    enterRule(listener) {
        if (listener.enterComparisonOperator) {
            listener.enterComparisonOperator(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitComparisonOperator) {
            listener.exitComparisonOperator(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ComparisonOperatorContext = ComparisonOperatorContext;
class ValueContext extends ParserRuleContext_1.ParserRuleContext {
    NULL() { return this.tryGetToken(ApexParser.NULL, 0); }
    BooleanLiteral() { return this.tryGetToken(ApexParser.BooleanLiteral, 0); }
    signedNumber() {
        return this.tryGetRuleContext(0, SignedNumberContext);
    }
    StringLiteral() { return this.tryGetToken(ApexParser.StringLiteral, 0); }
    DateLiteral() { return this.tryGetToken(ApexParser.DateLiteral, 0); }
    DateTimeLiteral() { return this.tryGetToken(ApexParser.DateTimeLiteral, 0); }
    dateFormula() {
        return this.tryGetRuleContext(0, DateFormulaContext);
    }
    IntegralCurrencyLiteral() { return this.tryGetToken(ApexParser.IntegralCurrencyLiteral, 0); }
    DOT() { return this.tryGetToken(ApexParser.DOT, 0); }
    IntegerLiteral() { return this.tryGetToken(ApexParser.IntegerLiteral, 0); }
    LPAREN() { return this.tryGetToken(ApexParser.LPAREN, 0); }
    subQuery() {
        return this.tryGetRuleContext(0, SubQueryContext);
    }
    RPAREN() { return this.tryGetToken(ApexParser.RPAREN, 0); }
    valueList() {
        return this.tryGetRuleContext(0, ValueListContext);
    }
    boundExpression() {
        return this.tryGetRuleContext(0, BoundExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_value; }
    // @Override
    enterRule(listener) {
        if (listener.enterValue) {
            listener.enterValue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitValue) {
            listener.exitValue(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitValue) {
            return visitor.visitValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ValueContext = ValueContext;
class ValueListContext extends ParserRuleContext_1.ParserRuleContext {
    LPAREN() { return this.getToken(ApexParser.LPAREN, 0); }
    value(i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueContext);
        }
        else {
            return this.getRuleContext(i, ValueContext);
        }
    }
    RPAREN() { return this.getToken(ApexParser.RPAREN, 0); }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_valueList; }
    // @Override
    enterRule(listener) {
        if (listener.enterValueList) {
            listener.enterValueList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitValueList) {
            listener.exitValueList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitValueList) {
            return visitor.visitValueList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ValueListContext = ValueListContext;
class SignedNumberContext extends ParserRuleContext_1.ParserRuleContext {
    IntegerLiteral() { return this.tryGetToken(ApexParser.IntegerLiteral, 0); }
    NumberLiteral() { return this.tryGetToken(ApexParser.NumberLiteral, 0); }
    ADD() { return this.tryGetToken(ApexParser.ADD, 0); }
    SUB() { return this.tryGetToken(ApexParser.SUB, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_signedNumber; }
    // @Override
    enterRule(listener) {
        if (listener.enterSignedNumber) {
            listener.enterSignedNumber(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSignedNumber) {
            listener.exitSignedNumber(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSignedNumber) {
            return visitor.visitSignedNumber(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SignedNumberContext = SignedNumberContext;
class WithClauseContext extends ParserRuleContext_1.ParserRuleContext {
    WITH() { return this.getToken(ApexParser.WITH, 0); }
    DATA() { return this.tryGetToken(ApexParser.DATA, 0); }
    CATEGORY() { return this.tryGetToken(ApexParser.CATEGORY, 0); }
    filteringExpression() {
        return this.tryGetRuleContext(0, FilteringExpressionContext);
    }
    SECURITY_ENFORCED() { return this.tryGetToken(ApexParser.SECURITY_ENFORCED, 0); }
    SYSTEM_MODE() { return this.tryGetToken(ApexParser.SYSTEM_MODE, 0); }
    USER_MODE() { return this.tryGetToken(ApexParser.USER_MODE, 0); }
    logicalExpression() {
        return this.tryGetRuleContext(0, LogicalExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_withClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterWithClause) {
            listener.enterWithClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWithClause) {
            listener.exitWithClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWithClause) {
            return visitor.visitWithClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.WithClauseContext = WithClauseContext;
class FilteringExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    dataCategorySelection(i) {
        if (i === undefined) {
            return this.getRuleContexts(DataCategorySelectionContext);
        }
        else {
            return this.getRuleContext(i, DataCategorySelectionContext);
        }
    }
    AND(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.AND);
        }
        else {
            return this.getToken(ApexParser.AND, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_filteringExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterFilteringExpression) {
            listener.enterFilteringExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFilteringExpression) {
            listener.exitFilteringExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFilteringExpression) {
            return visitor.visitFilteringExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FilteringExpressionContext = FilteringExpressionContext;
class DataCategorySelectionContext extends ParserRuleContext_1.ParserRuleContext {
    soqlId() {
        return this.getRuleContext(0, SoqlIdContext);
    }
    filteringSelector() {
        return this.getRuleContext(0, FilteringSelectorContext);
    }
    dataCategoryName() {
        return this.getRuleContext(0, DataCategoryNameContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_dataCategorySelection; }
    // @Override
    enterRule(listener) {
        if (listener.enterDataCategorySelection) {
            listener.enterDataCategorySelection(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDataCategorySelection) {
            listener.exitDataCategorySelection(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDataCategorySelection) {
            return visitor.visitDataCategorySelection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.DataCategorySelectionContext = DataCategorySelectionContext;
class DataCategoryNameContext extends ParserRuleContext_1.ParserRuleContext {
    soqlId(i) {
        if (i === undefined) {
            return this.getRuleContexts(SoqlIdContext);
        }
        else {
            return this.getRuleContext(i, SoqlIdContext);
        }
    }
    LPAREN(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.LPAREN);
        }
        else {
            return this.getToken(ApexParser.LPAREN, i);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_dataCategoryName; }
    // @Override
    enterRule(listener) {
        if (listener.enterDataCategoryName) {
            listener.enterDataCategoryName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDataCategoryName) {
            listener.exitDataCategoryName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDataCategoryName) {
            return visitor.visitDataCategoryName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.DataCategoryNameContext = DataCategoryNameContext;
class FilteringSelectorContext extends ParserRuleContext_1.ParserRuleContext {
    AT() { return this.tryGetToken(ApexParser.AT, 0); }
    ABOVE() { return this.tryGetToken(ApexParser.ABOVE, 0); }
    BELOW() { return this.tryGetToken(ApexParser.BELOW, 0); }
    ABOVE_OR_BELOW() { return this.tryGetToken(ApexParser.ABOVE_OR_BELOW, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_filteringSelector; }
    // @Override
    enterRule(listener) {
        if (listener.enterFilteringSelector) {
            listener.enterFilteringSelector(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFilteringSelector) {
            listener.exitFilteringSelector(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFilteringSelector) {
            return visitor.visitFilteringSelector(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FilteringSelectorContext = FilteringSelectorContext;
class GroupByClauseContext extends ParserRuleContext_1.ParserRuleContext {
    GROUP() { return this.getToken(ApexParser.GROUP, 0); }
    BY() { return this.getToken(ApexParser.BY, 0); }
    selectList() {
        return this.tryGetRuleContext(0, SelectListContext);
    }
    HAVING() { return this.tryGetToken(ApexParser.HAVING, 0); }
    logicalExpression() {
        return this.tryGetRuleContext(0, LogicalExpressionContext);
    }
    ROLLUP() { return this.tryGetToken(ApexParser.ROLLUP, 0); }
    LPAREN() { return this.tryGetToken(ApexParser.LPAREN, 0); }
    fieldName(i) {
        if (i === undefined) {
            return this.getRuleContexts(FieldNameContext);
        }
        else {
            return this.getRuleContext(i, FieldNameContext);
        }
    }
    RPAREN() { return this.tryGetToken(ApexParser.RPAREN, 0); }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    CUBE() { return this.tryGetToken(ApexParser.CUBE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_groupByClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroupByClause) {
            listener.enterGroupByClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroupByClause) {
            listener.exitGroupByClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.GroupByClauseContext = GroupByClauseContext;
class OrderByClauseContext extends ParserRuleContext_1.ParserRuleContext {
    ORDER() { return this.getToken(ApexParser.ORDER, 0); }
    BY() { return this.getToken(ApexParser.BY, 0); }
    fieldOrderList() {
        return this.getRuleContext(0, FieldOrderListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_orderByClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterOrderByClause) {
            listener.enterOrderByClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOrderByClause) {
            listener.exitOrderByClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitOrderByClause) {
            return visitor.visitOrderByClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.OrderByClauseContext = OrderByClauseContext;
class FieldOrderListContext extends ParserRuleContext_1.ParserRuleContext {
    fieldOrder(i) {
        if (i === undefined) {
            return this.getRuleContexts(FieldOrderContext);
        }
        else {
            return this.getRuleContext(i, FieldOrderContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_fieldOrderList; }
    // @Override
    enterRule(listener) {
        if (listener.enterFieldOrderList) {
            listener.enterFieldOrderList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFieldOrderList) {
            listener.exitFieldOrderList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFieldOrderList) {
            return visitor.visitFieldOrderList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FieldOrderListContext = FieldOrderListContext;
class FieldOrderContext extends ParserRuleContext_1.ParserRuleContext {
    fieldName() {
        return this.tryGetRuleContext(0, FieldNameContext);
    }
    NULLS() { return this.tryGetToken(ApexParser.NULLS, 0); }
    ASC() { return this.tryGetToken(ApexParser.ASC, 0); }
    DESC() { return this.tryGetToken(ApexParser.DESC, 0); }
    FIRST() { return this.tryGetToken(ApexParser.FIRST, 0); }
    LAST() { return this.tryGetToken(ApexParser.LAST, 0); }
    soqlFunction() {
        return this.tryGetRuleContext(0, SoqlFunctionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_fieldOrder; }
    // @Override
    enterRule(listener) {
        if (listener.enterFieldOrder) {
            listener.enterFieldOrder(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFieldOrder) {
            listener.exitFieldOrder(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFieldOrder) {
            return visitor.visitFieldOrder(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FieldOrderContext = FieldOrderContext;
class LimitClauseContext extends ParserRuleContext_1.ParserRuleContext {
    LIMIT() { return this.getToken(ApexParser.LIMIT, 0); }
    IntegerLiteral() { return this.tryGetToken(ApexParser.IntegerLiteral, 0); }
    boundExpression() {
        return this.tryGetRuleContext(0, BoundExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_limitClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterLimitClause) {
            listener.enterLimitClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLimitClause) {
            listener.exitLimitClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.LimitClauseContext = LimitClauseContext;
class OffsetClauseContext extends ParserRuleContext_1.ParserRuleContext {
    OFFSET() { return this.getToken(ApexParser.OFFSET, 0); }
    IntegerLiteral() { return this.tryGetToken(ApexParser.IntegerLiteral, 0); }
    boundExpression() {
        return this.tryGetRuleContext(0, BoundExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_offsetClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterOffsetClause) {
            listener.enterOffsetClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOffsetClause) {
            listener.exitOffsetClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitOffsetClause) {
            return visitor.visitOffsetClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.OffsetClauseContext = OffsetClauseContext;
class AllRowsClauseContext extends ParserRuleContext_1.ParserRuleContext {
    ALL() { return this.getToken(ApexParser.ALL, 0); }
    ROWS() { return this.getToken(ApexParser.ROWS, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_allRowsClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterAllRowsClause) {
            listener.enterAllRowsClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAllRowsClause) {
            listener.exitAllRowsClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitAllRowsClause) {
            return visitor.visitAllRowsClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.AllRowsClauseContext = AllRowsClauseContext;
class ForClausesContext extends ParserRuleContext_1.ParserRuleContext {
    FOR(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.FOR);
        }
        else {
            return this.getToken(ApexParser.FOR, i);
        }
    }
    VIEW(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.VIEW);
        }
        else {
            return this.getToken(ApexParser.VIEW, i);
        }
    }
    UPDATE(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.UPDATE);
        }
        else {
            return this.getToken(ApexParser.UPDATE, i);
        }
    }
    REFERENCE(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.REFERENCE);
        }
        else {
            return this.getToken(ApexParser.REFERENCE, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_forClauses; }
    // @Override
    enterRule(listener) {
        if (listener.enterForClauses) {
            listener.enterForClauses(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitForClauses) {
            listener.exitForClauses(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitForClauses) {
            return visitor.visitForClauses(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ForClausesContext = ForClausesContext;
class BoundExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    COLON() { return this.getToken(ApexParser.COLON, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_boundExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterBoundExpression) {
            listener.enterBoundExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBoundExpression) {
            listener.exitBoundExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitBoundExpression) {
            return visitor.visitBoundExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.BoundExpressionContext = BoundExpressionContext;
class DateFormulaContext extends ParserRuleContext_1.ParserRuleContext {
    YESTERDAY() { return this.tryGetToken(ApexParser.YESTERDAY, 0); }
    TODAY() { return this.tryGetToken(ApexParser.TODAY, 0); }
    TOMORROW() { return this.tryGetToken(ApexParser.TOMORROW, 0); }
    LAST_WEEK() { return this.tryGetToken(ApexParser.LAST_WEEK, 0); }
    THIS_WEEK() { return this.tryGetToken(ApexParser.THIS_WEEK, 0); }
    NEXT_WEEK() { return this.tryGetToken(ApexParser.NEXT_WEEK, 0); }
    LAST_MONTH() { return this.tryGetToken(ApexParser.LAST_MONTH, 0); }
    THIS_MONTH() { return this.tryGetToken(ApexParser.THIS_MONTH, 0); }
    NEXT_MONTH() { return this.tryGetToken(ApexParser.NEXT_MONTH, 0); }
    LAST_90_DAYS() { return this.tryGetToken(ApexParser.LAST_90_DAYS, 0); }
    NEXT_90_DAYS() { return this.tryGetToken(ApexParser.NEXT_90_DAYS, 0); }
    LAST_N_DAYS_N() { return this.tryGetToken(ApexParser.LAST_N_DAYS_N, 0); }
    COLON() { return this.tryGetToken(ApexParser.COLON, 0); }
    signedInteger() {
        return this.tryGetRuleContext(0, SignedIntegerContext);
    }
    NEXT_N_DAYS_N() { return this.tryGetToken(ApexParser.NEXT_N_DAYS_N, 0); }
    N_DAYS_AGO_N() { return this.tryGetToken(ApexParser.N_DAYS_AGO_N, 0); }
    NEXT_N_WEEKS_N() { return this.tryGetToken(ApexParser.NEXT_N_WEEKS_N, 0); }
    LAST_N_WEEKS_N() { return this.tryGetToken(ApexParser.LAST_N_WEEKS_N, 0); }
    N_WEEKS_AGO_N() { return this.tryGetToken(ApexParser.N_WEEKS_AGO_N, 0); }
    NEXT_N_MONTHS_N() { return this.tryGetToken(ApexParser.NEXT_N_MONTHS_N, 0); }
    LAST_N_MONTHS_N() { return this.tryGetToken(ApexParser.LAST_N_MONTHS_N, 0); }
    N_MONTHS_AGO_N() { return this.tryGetToken(ApexParser.N_MONTHS_AGO_N, 0); }
    THIS_QUARTER() { return this.tryGetToken(ApexParser.THIS_QUARTER, 0); }
    LAST_QUARTER() { return this.tryGetToken(ApexParser.LAST_QUARTER, 0); }
    NEXT_QUARTER() { return this.tryGetToken(ApexParser.NEXT_QUARTER, 0); }
    NEXT_N_QUARTERS_N() { return this.tryGetToken(ApexParser.NEXT_N_QUARTERS_N, 0); }
    LAST_N_QUARTERS_N() { return this.tryGetToken(ApexParser.LAST_N_QUARTERS_N, 0); }
    N_QUARTERS_AGO_N() { return this.tryGetToken(ApexParser.N_QUARTERS_AGO_N, 0); }
    THIS_YEAR() { return this.tryGetToken(ApexParser.THIS_YEAR, 0); }
    LAST_YEAR() { return this.tryGetToken(ApexParser.LAST_YEAR, 0); }
    NEXT_YEAR() { return this.tryGetToken(ApexParser.NEXT_YEAR, 0); }
    NEXT_N_YEARS_N() { return this.tryGetToken(ApexParser.NEXT_N_YEARS_N, 0); }
    LAST_N_YEARS_N() { return this.tryGetToken(ApexParser.LAST_N_YEARS_N, 0); }
    N_YEARS_AGO_N() { return this.tryGetToken(ApexParser.N_YEARS_AGO_N, 0); }
    THIS_FISCAL_QUARTER() { return this.tryGetToken(ApexParser.THIS_FISCAL_QUARTER, 0); }
    LAST_FISCAL_QUARTER() { return this.tryGetToken(ApexParser.LAST_FISCAL_QUARTER, 0); }
    NEXT_FISCAL_QUARTER() { return this.tryGetToken(ApexParser.NEXT_FISCAL_QUARTER, 0); }
    NEXT_N_FISCAL_QUARTERS_N() { return this.tryGetToken(ApexParser.NEXT_N_FISCAL_QUARTERS_N, 0); }
    LAST_N_FISCAL_QUARTERS_N() { return this.tryGetToken(ApexParser.LAST_N_FISCAL_QUARTERS_N, 0); }
    N_FISCAL_QUARTERS_AGO_N() { return this.tryGetToken(ApexParser.N_FISCAL_QUARTERS_AGO_N, 0); }
    THIS_FISCAL_YEAR() { return this.tryGetToken(ApexParser.THIS_FISCAL_YEAR, 0); }
    LAST_FISCAL_YEAR() { return this.tryGetToken(ApexParser.LAST_FISCAL_YEAR, 0); }
    NEXT_FISCAL_YEAR() { return this.tryGetToken(ApexParser.NEXT_FISCAL_YEAR, 0); }
    NEXT_N_FISCAL_YEARS_N() { return this.tryGetToken(ApexParser.NEXT_N_FISCAL_YEARS_N, 0); }
    LAST_N_FISCAL_YEARS_N() { return this.tryGetToken(ApexParser.LAST_N_FISCAL_YEARS_N, 0); }
    N_FISCAL_YEARS_AGO_N() { return this.tryGetToken(ApexParser.N_FISCAL_YEARS_AGO_N, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_dateFormula; }
    // @Override
    enterRule(listener) {
        if (listener.enterDateFormula) {
            listener.enterDateFormula(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDateFormula) {
            listener.exitDateFormula(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDateFormula) {
            return visitor.visitDateFormula(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.DateFormulaContext = DateFormulaContext;
class SignedIntegerContext extends ParserRuleContext_1.ParserRuleContext {
    IntegerLiteral() { return this.getToken(ApexParser.IntegerLiteral, 0); }
    ADD() { return this.tryGetToken(ApexParser.ADD, 0); }
    SUB() { return this.tryGetToken(ApexParser.SUB, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_signedInteger; }
    // @Override
    enterRule(listener) {
        if (listener.enterSignedInteger) {
            listener.enterSignedInteger(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSignedInteger) {
            listener.exitSignedInteger(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSignedInteger) {
            return visitor.visitSignedInteger(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SignedIntegerContext = SignedIntegerContext;
class SoqlIdContext extends ParserRuleContext_1.ParserRuleContext {
    id() {
        return this.getRuleContext(0, IdContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_soqlId; }
    // @Override
    enterRule(listener) {
        if (listener.enterSoqlId) {
            listener.enterSoqlId(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSoqlId) {
            listener.exitSoqlId(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSoqlId) {
            return visitor.visitSoqlId(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SoqlIdContext = SoqlIdContext;
class SoslLiteralContext extends ParserRuleContext_1.ParserRuleContext {
    FindLiteral() { return this.tryGetToken(ApexParser.FindLiteral, 0); }
    soslClauses() {
        return this.getRuleContext(0, SoslClausesContext);
    }
    RBRACK() { return this.getToken(ApexParser.RBRACK, 0); }
    LBRACK() { return this.tryGetToken(ApexParser.LBRACK, 0); }
    FIND() { return this.tryGetToken(ApexParser.FIND, 0); }
    boundExpression() {
        return this.tryGetRuleContext(0, BoundExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_soslLiteral; }
    // @Override
    enterRule(listener) {
        if (listener.enterSoslLiteral) {
            listener.enterSoslLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSoslLiteral) {
            listener.exitSoslLiteral(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSoslLiteral) {
            return visitor.visitSoslLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SoslLiteralContext = SoslLiteralContext;
class SoslLiteralAltContext extends ParserRuleContext_1.ParserRuleContext {
    FindLiteralAlt() { return this.getToken(ApexParser.FindLiteralAlt, 0); }
    soslClauses() {
        return this.getRuleContext(0, SoslClausesContext);
    }
    RBRACK() { return this.getToken(ApexParser.RBRACK, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_soslLiteralAlt; }
    // @Override
    enterRule(listener) {
        if (listener.enterSoslLiteralAlt) {
            listener.enterSoslLiteralAlt(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSoslLiteralAlt) {
            listener.exitSoslLiteralAlt(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSoslLiteralAlt) {
            return visitor.visitSoslLiteralAlt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SoslLiteralAltContext = SoslLiteralAltContext;
class SoslClausesContext extends ParserRuleContext_1.ParserRuleContext {
    IN() { return this.tryGetToken(ApexParser.IN, 0); }
    searchGroup() {
        return this.tryGetRuleContext(0, SearchGroupContext);
    }
    RETURNING() { return this.tryGetToken(ApexParser.RETURNING, 0); }
    fieldSpecList() {
        return this.tryGetRuleContext(0, FieldSpecListContext);
    }
    soslWithClause(i) {
        if (i === undefined) {
            return this.getRuleContexts(SoslWithClauseContext);
        }
        else {
            return this.getRuleContext(i, SoslWithClauseContext);
        }
    }
    limitClause() {
        return this.tryGetRuleContext(0, LimitClauseContext);
    }
    UPDATE() { return this.tryGetToken(ApexParser.UPDATE, 0); }
    updateList() {
        return this.tryGetRuleContext(0, UpdateListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_soslClauses; }
    // @Override
    enterRule(listener) {
        if (listener.enterSoslClauses) {
            listener.enterSoslClauses(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSoslClauses) {
            listener.exitSoslClauses(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSoslClauses) {
            return visitor.visitSoslClauses(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SoslClausesContext = SoslClausesContext;
class SoslWithClauseContext extends ParserRuleContext_1.ParserRuleContext {
    WITH() { return this.getToken(ApexParser.WITH, 0); }
    DIVISION() { return this.tryGetToken(ApexParser.DIVISION, 0); }
    ASSIGN() { return this.tryGetToken(ApexParser.ASSIGN, 0); }
    StringLiteral() { return this.tryGetToken(ApexParser.StringLiteral, 0); }
    DATA() { return this.tryGetToken(ApexParser.DATA, 0); }
    CATEGORY() { return this.tryGetToken(ApexParser.CATEGORY, 0); }
    filteringExpression() {
        return this.tryGetRuleContext(0, FilteringExpressionContext);
    }
    SNIPPET() { return this.tryGetToken(ApexParser.SNIPPET, 0); }
    LPAREN() { return this.tryGetToken(ApexParser.LPAREN, 0); }
    TARGET_LENGTH() { return this.tryGetToken(ApexParser.TARGET_LENGTH, 0); }
    IntegerLiteral() { return this.tryGetToken(ApexParser.IntegerLiteral, 0); }
    RPAREN() { return this.tryGetToken(ApexParser.RPAREN, 0); }
    NETWORK() { return this.tryGetToken(ApexParser.NETWORK, 0); }
    IN() { return this.tryGetToken(ApexParser.IN, 0); }
    networkList() {
        return this.tryGetRuleContext(0, NetworkListContext);
    }
    PRICEBOOKID() { return this.tryGetToken(ApexParser.PRICEBOOKID, 0); }
    METADATA() { return this.tryGetToken(ApexParser.METADATA, 0); }
    USER_MODE() { return this.tryGetToken(ApexParser.USER_MODE, 0); }
    SYSTEM_MODE() { return this.tryGetToken(ApexParser.SYSTEM_MODE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_soslWithClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterSoslWithClause) {
            listener.enterSoslWithClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSoslWithClause) {
            listener.exitSoslWithClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSoslWithClause) {
            return visitor.visitSoslWithClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SoslWithClauseContext = SoslWithClauseContext;
class SearchGroupContext extends ParserRuleContext_1.ParserRuleContext {
    FIELDS() { return this.getToken(ApexParser.FIELDS, 0); }
    ALL() { return this.tryGetToken(ApexParser.ALL, 0); }
    EMAIL() { return this.tryGetToken(ApexParser.EMAIL, 0); }
    NAME() { return this.tryGetToken(ApexParser.NAME, 0); }
    PHONE() { return this.tryGetToken(ApexParser.PHONE, 0); }
    SIDEBAR() { return this.tryGetToken(ApexParser.SIDEBAR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_searchGroup; }
    // @Override
    enterRule(listener) {
        if (listener.enterSearchGroup) {
            listener.enterSearchGroup(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSearchGroup) {
            listener.exitSearchGroup(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSearchGroup) {
            return visitor.visitSearchGroup(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SearchGroupContext = SearchGroupContext;
class FieldSpecListContext extends ParserRuleContext_1.ParserRuleContext {
    fieldSpec() {
        return this.getRuleContext(0, FieldSpecContext);
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    fieldSpecList(i) {
        if (i === undefined) {
            return this.getRuleContexts(FieldSpecListContext);
        }
        else {
            return this.getRuleContext(i, FieldSpecListContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_fieldSpecList; }
    // @Override
    enterRule(listener) {
        if (listener.enterFieldSpecList) {
            listener.enterFieldSpecList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFieldSpecList) {
            listener.exitFieldSpecList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFieldSpecList) {
            return visitor.visitFieldSpecList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FieldSpecListContext = FieldSpecListContext;
class FieldSpecContext extends ParserRuleContext_1.ParserRuleContext {
    soslId(i) {
        if (i === undefined) {
            return this.getRuleContexts(SoslIdContext);
        }
        else {
            return this.getRuleContext(i, SoslIdContext);
        }
    }
    LPAREN() { return this.tryGetToken(ApexParser.LPAREN, 0); }
    fieldList() {
        return this.tryGetRuleContext(0, FieldListContext);
    }
    RPAREN() { return this.tryGetToken(ApexParser.RPAREN, 0); }
    WHERE() { return this.tryGetToken(ApexParser.WHERE, 0); }
    logicalExpression() {
        return this.tryGetRuleContext(0, LogicalExpressionContext);
    }
    USING() { return this.tryGetToken(ApexParser.USING, 0); }
    LISTVIEW() { return this.tryGetToken(ApexParser.LISTVIEW, 0); }
    ASSIGN() { return this.tryGetToken(ApexParser.ASSIGN, 0); }
    ORDER() { return this.tryGetToken(ApexParser.ORDER, 0); }
    BY() { return this.tryGetToken(ApexParser.BY, 0); }
    fieldOrderList() {
        return this.tryGetRuleContext(0, FieldOrderListContext);
    }
    limitClause() {
        return this.tryGetRuleContext(0, LimitClauseContext);
    }
    offsetClause() {
        return this.tryGetRuleContext(0, OffsetClauseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_fieldSpec; }
    // @Override
    enterRule(listener) {
        if (listener.enterFieldSpec) {
            listener.enterFieldSpec(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFieldSpec) {
            listener.exitFieldSpec(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFieldSpec) {
            return visitor.visitFieldSpec(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FieldSpecContext = FieldSpecContext;
class FieldListContext extends ParserRuleContext_1.ParserRuleContext {
    soslId() {
        return this.getRuleContext(0, SoslIdContext);
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.COMMA);
        }
        else {
            return this.getToken(ApexParser.COMMA, i);
        }
    }
    fieldList(i) {
        if (i === undefined) {
            return this.getRuleContexts(FieldListContext);
        }
        else {
            return this.getRuleContext(i, FieldListContext);
        }
    }
    TOLABEL() { return this.tryGetToken(ApexParser.TOLABEL, 0); }
    LPAREN() { return this.tryGetToken(ApexParser.LPAREN, 0); }
    RPAREN() { return this.tryGetToken(ApexParser.RPAREN, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_fieldList; }
    // @Override
    enterRule(listener) {
        if (listener.enterFieldList) {
            listener.enterFieldList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFieldList) {
            listener.exitFieldList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFieldList) {
            return visitor.visitFieldList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FieldListContext = FieldListContext;
class UpdateListContext extends ParserRuleContext_1.ParserRuleContext {
    updateType() {
        return this.getRuleContext(0, UpdateTypeContext);
    }
    COMMA() { return this.tryGetToken(ApexParser.COMMA, 0); }
    updateList() {
        return this.tryGetRuleContext(0, UpdateListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_updateList; }
    // @Override
    enterRule(listener) {
        if (listener.enterUpdateList) {
            listener.enterUpdateList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUpdateList) {
            listener.exitUpdateList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUpdateList) {
            return visitor.visitUpdateList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.UpdateListContext = UpdateListContext;
class UpdateTypeContext extends ParserRuleContext_1.ParserRuleContext {
    TRACKING() { return this.tryGetToken(ApexParser.TRACKING, 0); }
    VIEWSTAT() { return this.tryGetToken(ApexParser.VIEWSTAT, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_updateType; }
    // @Override
    enterRule(listener) {
        if (listener.enterUpdateType) {
            listener.enterUpdateType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUpdateType) {
            listener.exitUpdateType(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUpdateType) {
            return visitor.visitUpdateType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.UpdateTypeContext = UpdateTypeContext;
class NetworkListContext extends ParserRuleContext_1.ParserRuleContext {
    StringLiteral() { return this.getToken(ApexParser.StringLiteral, 0); }
    COMMA() { return this.tryGetToken(ApexParser.COMMA, 0); }
    networkList() {
        return this.tryGetRuleContext(0, NetworkListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_networkList; }
    // @Override
    enterRule(listener) {
        if (listener.enterNetworkList) {
            listener.enterNetworkList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNetworkList) {
            listener.exitNetworkList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNetworkList) {
            return visitor.visitNetworkList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.NetworkListContext = NetworkListContext;
class SoslIdContext extends ParserRuleContext_1.ParserRuleContext {
    id() {
        return this.getRuleContext(0, IdContext);
    }
    DOT(i) {
        if (i === undefined) {
            return this.getTokens(ApexParser.DOT);
        }
        else {
            return this.getToken(ApexParser.DOT, i);
        }
    }
    soslId(i) {
        if (i === undefined) {
            return this.getRuleContexts(SoslIdContext);
        }
        else {
            return this.getRuleContext(i, SoslIdContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_soslId; }
    // @Override
    enterRule(listener) {
        if (listener.enterSoslId) {
            listener.enterSoslId(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSoslId) {
            listener.exitSoslId(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSoslId) {
            return visitor.visitSoslId(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SoslIdContext = SoslIdContext;
class IdContext extends ParserRuleContext_1.ParserRuleContext {
    Identifier() { return this.tryGetToken(ApexParser.Identifier, 0); }
    AFTER() { return this.tryGetToken(ApexParser.AFTER, 0); }
    BEFORE() { return this.tryGetToken(ApexParser.BEFORE, 0); }
    GET() { return this.tryGetToken(ApexParser.GET, 0); }
    INHERITED() { return this.tryGetToken(ApexParser.INHERITED, 0); }
    INSTANCEOF() { return this.tryGetToken(ApexParser.INSTANCEOF, 0); }
    SET() { return this.tryGetToken(ApexParser.SET, 0); }
    SHARING() { return this.tryGetToken(ApexParser.SHARING, 0); }
    SWITCH() { return this.tryGetToken(ApexParser.SWITCH, 0); }
    TRANSIENT() { return this.tryGetToken(ApexParser.TRANSIENT, 0); }
    TRIGGER() { return this.tryGetToken(ApexParser.TRIGGER, 0); }
    WHEN() { return this.tryGetToken(ApexParser.WHEN, 0); }
    WITH() { return this.tryGetToken(ApexParser.WITH, 0); }
    WITHOUT() { return this.tryGetToken(ApexParser.WITHOUT, 0); }
    USER() { return this.tryGetToken(ApexParser.USER, 0); }
    SYSTEM() { return this.tryGetToken(ApexParser.SYSTEM, 0); }
    IntegralCurrencyLiteral() { return this.tryGetToken(ApexParser.IntegralCurrencyLiteral, 0); }
    SELECT() { return this.tryGetToken(ApexParser.SELECT, 0); }
    COUNT() { return this.tryGetToken(ApexParser.COUNT, 0); }
    FROM() { return this.tryGetToken(ApexParser.FROM, 0); }
    AS() { return this.tryGetToken(ApexParser.AS, 0); }
    USING() { return this.tryGetToken(ApexParser.USING, 0); }
    SCOPE() { return this.tryGetToken(ApexParser.SCOPE, 0); }
    WHERE() { return this.tryGetToken(ApexParser.WHERE, 0); }
    ORDER() { return this.tryGetToken(ApexParser.ORDER, 0); }
    BY() { return this.tryGetToken(ApexParser.BY, 0); }
    LIMIT() { return this.tryGetToken(ApexParser.LIMIT, 0); }
    SOQLAND() { return this.tryGetToken(ApexParser.SOQLAND, 0); }
    SOQLOR() { return this.tryGetToken(ApexParser.SOQLOR, 0); }
    NOT() { return this.tryGetToken(ApexParser.NOT, 0); }
    AVG() { return this.tryGetToken(ApexParser.AVG, 0); }
    COUNT_DISTINCT() { return this.tryGetToken(ApexParser.COUNT_DISTINCT, 0); }
    MIN() { return this.tryGetToken(ApexParser.MIN, 0); }
    MAX() { return this.tryGetToken(ApexParser.MAX, 0); }
    SUM() { return this.tryGetToken(ApexParser.SUM, 0); }
    TYPEOF() { return this.tryGetToken(ApexParser.TYPEOF, 0); }
    END() { return this.tryGetToken(ApexParser.END, 0); }
    THEN() { return this.tryGetToken(ApexParser.THEN, 0); }
    LIKE() { return this.tryGetToken(ApexParser.LIKE, 0); }
    IN() { return this.tryGetToken(ApexParser.IN, 0); }
    INCLUDES() { return this.tryGetToken(ApexParser.INCLUDES, 0); }
    EXCLUDES() { return this.tryGetToken(ApexParser.EXCLUDES, 0); }
    ASC() { return this.tryGetToken(ApexParser.ASC, 0); }
    DESC() { return this.tryGetToken(ApexParser.DESC, 0); }
    NULLS() { return this.tryGetToken(ApexParser.NULLS, 0); }
    FIRST() { return this.tryGetToken(ApexParser.FIRST, 0); }
    LAST() { return this.tryGetToken(ApexParser.LAST, 0); }
    GROUP() { return this.tryGetToken(ApexParser.GROUP, 0); }
    ALL() { return this.tryGetToken(ApexParser.ALL, 0); }
    ROWS() { return this.tryGetToken(ApexParser.ROWS, 0); }
    VIEW() { return this.tryGetToken(ApexParser.VIEW, 0); }
    HAVING() { return this.tryGetToken(ApexParser.HAVING, 0); }
    ROLLUP() { return this.tryGetToken(ApexParser.ROLLUP, 0); }
    TOLABEL() { return this.tryGetToken(ApexParser.TOLABEL, 0); }
    OFFSET() { return this.tryGetToken(ApexParser.OFFSET, 0); }
    DATA() { return this.tryGetToken(ApexParser.DATA, 0); }
    CATEGORY() { return this.tryGetToken(ApexParser.CATEGORY, 0); }
    AT() { return this.tryGetToken(ApexParser.AT, 0); }
    ABOVE() { return this.tryGetToken(ApexParser.ABOVE, 0); }
    BELOW() { return this.tryGetToken(ApexParser.BELOW, 0); }
    ABOVE_OR_BELOW() { return this.tryGetToken(ApexParser.ABOVE_OR_BELOW, 0); }
    SECURITY_ENFORCED() { return this.tryGetToken(ApexParser.SECURITY_ENFORCED, 0); }
    USER_MODE() { return this.tryGetToken(ApexParser.USER_MODE, 0); }
    SYSTEM_MODE() { return this.tryGetToken(ApexParser.SYSTEM_MODE, 0); }
    REFERENCE() { return this.tryGetToken(ApexParser.REFERENCE, 0); }
    CUBE() { return this.tryGetToken(ApexParser.CUBE, 0); }
    FORMAT() { return this.tryGetToken(ApexParser.FORMAT, 0); }
    TRACKING() { return this.tryGetToken(ApexParser.TRACKING, 0); }
    VIEWSTAT() { return this.tryGetToken(ApexParser.VIEWSTAT, 0); }
    STANDARD() { return this.tryGetToken(ApexParser.STANDARD, 0); }
    CUSTOM() { return this.tryGetToken(ApexParser.CUSTOM, 0); }
    DISTANCE() { return this.tryGetToken(ApexParser.DISTANCE, 0); }
    GEOLOCATION() { return this.tryGetToken(ApexParser.GEOLOCATION, 0); }
    GROUPING() { return this.tryGetToken(ApexParser.GROUPING, 0); }
    CALENDAR_MONTH() { return this.tryGetToken(ApexParser.CALENDAR_MONTH, 0); }
    CALENDAR_QUARTER() { return this.tryGetToken(ApexParser.CALENDAR_QUARTER, 0); }
    CALENDAR_YEAR() { return this.tryGetToken(ApexParser.CALENDAR_YEAR, 0); }
    DAY_IN_MONTH() { return this.tryGetToken(ApexParser.DAY_IN_MONTH, 0); }
    DAY_IN_WEEK() { return this.tryGetToken(ApexParser.DAY_IN_WEEK, 0); }
    DAY_IN_YEAR() { return this.tryGetToken(ApexParser.DAY_IN_YEAR, 0); }
    DAY_ONLY() { return this.tryGetToken(ApexParser.DAY_ONLY, 0); }
    FISCAL_MONTH() { return this.tryGetToken(ApexParser.FISCAL_MONTH, 0); }
    FISCAL_QUARTER() { return this.tryGetToken(ApexParser.FISCAL_QUARTER, 0); }
    FISCAL_YEAR() { return this.tryGetToken(ApexParser.FISCAL_YEAR, 0); }
    HOUR_IN_DAY() { return this.tryGetToken(ApexParser.HOUR_IN_DAY, 0); }
    WEEK_IN_MONTH() { return this.tryGetToken(ApexParser.WEEK_IN_MONTH, 0); }
    WEEK_IN_YEAR() { return this.tryGetToken(ApexParser.WEEK_IN_YEAR, 0); }
    CONVERT_TIMEZONE() { return this.tryGetToken(ApexParser.CONVERT_TIMEZONE, 0); }
    YESTERDAY() { return this.tryGetToken(ApexParser.YESTERDAY, 0); }
    TODAY() { return this.tryGetToken(ApexParser.TODAY, 0); }
    TOMORROW() { return this.tryGetToken(ApexParser.TOMORROW, 0); }
    LAST_WEEK() { return this.tryGetToken(ApexParser.LAST_WEEK, 0); }
    THIS_WEEK() { return this.tryGetToken(ApexParser.THIS_WEEK, 0); }
    NEXT_WEEK() { return this.tryGetToken(ApexParser.NEXT_WEEK, 0); }
    LAST_MONTH() { return this.tryGetToken(ApexParser.LAST_MONTH, 0); }
    THIS_MONTH() { return this.tryGetToken(ApexParser.THIS_MONTH, 0); }
    NEXT_MONTH() { return this.tryGetToken(ApexParser.NEXT_MONTH, 0); }
    LAST_90_DAYS() { return this.tryGetToken(ApexParser.LAST_90_DAYS, 0); }
    NEXT_90_DAYS() { return this.tryGetToken(ApexParser.NEXT_90_DAYS, 0); }
    LAST_N_DAYS_N() { return this.tryGetToken(ApexParser.LAST_N_DAYS_N, 0); }
    NEXT_N_DAYS_N() { return this.tryGetToken(ApexParser.NEXT_N_DAYS_N, 0); }
    N_DAYS_AGO_N() { return this.tryGetToken(ApexParser.N_DAYS_AGO_N, 0); }
    NEXT_N_WEEKS_N() { return this.tryGetToken(ApexParser.NEXT_N_WEEKS_N, 0); }
    LAST_N_WEEKS_N() { return this.tryGetToken(ApexParser.LAST_N_WEEKS_N, 0); }
    N_WEEKS_AGO_N() { return this.tryGetToken(ApexParser.N_WEEKS_AGO_N, 0); }
    NEXT_N_MONTHS_N() { return this.tryGetToken(ApexParser.NEXT_N_MONTHS_N, 0); }
    LAST_N_MONTHS_N() { return this.tryGetToken(ApexParser.LAST_N_MONTHS_N, 0); }
    N_MONTHS_AGO_N() { return this.tryGetToken(ApexParser.N_MONTHS_AGO_N, 0); }
    THIS_QUARTER() { return this.tryGetToken(ApexParser.THIS_QUARTER, 0); }
    LAST_QUARTER() { return this.tryGetToken(ApexParser.LAST_QUARTER, 0); }
    NEXT_QUARTER() { return this.tryGetToken(ApexParser.NEXT_QUARTER, 0); }
    NEXT_N_QUARTERS_N() { return this.tryGetToken(ApexParser.NEXT_N_QUARTERS_N, 0); }
    LAST_N_QUARTERS_N() { return this.tryGetToken(ApexParser.LAST_N_QUARTERS_N, 0); }
    N_QUARTERS_AGO_N() { return this.tryGetToken(ApexParser.N_QUARTERS_AGO_N, 0); }
    THIS_YEAR() { return this.tryGetToken(ApexParser.THIS_YEAR, 0); }
    LAST_YEAR() { return this.tryGetToken(ApexParser.LAST_YEAR, 0); }
    NEXT_YEAR() { return this.tryGetToken(ApexParser.NEXT_YEAR, 0); }
    NEXT_N_YEARS_N() { return this.tryGetToken(ApexParser.NEXT_N_YEARS_N, 0); }
    LAST_N_YEARS_N() { return this.tryGetToken(ApexParser.LAST_N_YEARS_N, 0); }
    N_YEARS_AGO_N() { return this.tryGetToken(ApexParser.N_YEARS_AGO_N, 0); }
    THIS_FISCAL_QUARTER() { return this.tryGetToken(ApexParser.THIS_FISCAL_QUARTER, 0); }
    LAST_FISCAL_QUARTER() { return this.tryGetToken(ApexParser.LAST_FISCAL_QUARTER, 0); }
    NEXT_FISCAL_QUARTER() { return this.tryGetToken(ApexParser.NEXT_FISCAL_QUARTER, 0); }
    NEXT_N_FISCAL_QUARTERS_N() { return this.tryGetToken(ApexParser.NEXT_N_FISCAL_QUARTERS_N, 0); }
    LAST_N_FISCAL_QUARTERS_N() { return this.tryGetToken(ApexParser.LAST_N_FISCAL_QUARTERS_N, 0); }
    N_FISCAL_QUARTERS_AGO_N() { return this.tryGetToken(ApexParser.N_FISCAL_QUARTERS_AGO_N, 0); }
    THIS_FISCAL_YEAR() { return this.tryGetToken(ApexParser.THIS_FISCAL_YEAR, 0); }
    LAST_FISCAL_YEAR() { return this.tryGetToken(ApexParser.LAST_FISCAL_YEAR, 0); }
    NEXT_FISCAL_YEAR() { return this.tryGetToken(ApexParser.NEXT_FISCAL_YEAR, 0); }
    NEXT_N_FISCAL_YEARS_N() { return this.tryGetToken(ApexParser.NEXT_N_FISCAL_YEARS_N, 0); }
    LAST_N_FISCAL_YEARS_N() { return this.tryGetToken(ApexParser.LAST_N_FISCAL_YEARS_N, 0); }
    N_FISCAL_YEARS_AGO_N() { return this.tryGetToken(ApexParser.N_FISCAL_YEARS_AGO_N, 0); }
    FIND() { return this.tryGetToken(ApexParser.FIND, 0); }
    EMAIL() { return this.tryGetToken(ApexParser.EMAIL, 0); }
    NAME() { return this.tryGetToken(ApexParser.NAME, 0); }
    PHONE() { return this.tryGetToken(ApexParser.PHONE, 0); }
    SIDEBAR() { return this.tryGetToken(ApexParser.SIDEBAR, 0); }
    FIELDS() { return this.tryGetToken(ApexParser.FIELDS, 0); }
    METADATA() { return this.tryGetToken(ApexParser.METADATA, 0); }
    PRICEBOOKID() { return this.tryGetToken(ApexParser.PRICEBOOKID, 0); }
    NETWORK() { return this.tryGetToken(ApexParser.NETWORK, 0); }
    SNIPPET() { return this.tryGetToken(ApexParser.SNIPPET, 0); }
    TARGET_LENGTH() { return this.tryGetToken(ApexParser.TARGET_LENGTH, 0); }
    DIVISION() { return this.tryGetToken(ApexParser.DIVISION, 0); }
    RETURNING() { return this.tryGetToken(ApexParser.RETURNING, 0); }
    LISTVIEW() { return this.tryGetToken(ApexParser.LISTVIEW, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_id; }
    // @Override
    enterRule(listener) {
        if (listener.enterId) {
            listener.enterId(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitId) {
            listener.exitId(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitId) {
            return visitor.visitId(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.IdContext = IdContext;
class AnyIdContext extends ParserRuleContext_1.ParserRuleContext {
    Identifier() { return this.tryGetToken(ApexParser.Identifier, 0); }
    ABSTRACT() { return this.tryGetToken(ApexParser.ABSTRACT, 0); }
    AFTER() { return this.tryGetToken(ApexParser.AFTER, 0); }
    BEFORE() { return this.tryGetToken(ApexParser.BEFORE, 0); }
    BREAK() { return this.tryGetToken(ApexParser.BREAK, 0); }
    CATCH() { return this.tryGetToken(ApexParser.CATCH, 0); }
    CLASS() { return this.tryGetToken(ApexParser.CLASS, 0); }
    CONTINUE() { return this.tryGetToken(ApexParser.CONTINUE, 0); }
    DELETE() { return this.tryGetToken(ApexParser.DELETE, 0); }
    DO() { return this.tryGetToken(ApexParser.DO, 0); }
    ELSE() { return this.tryGetToken(ApexParser.ELSE, 0); }
    ENUM() { return this.tryGetToken(ApexParser.ENUM, 0); }
    EXTENDS() { return this.tryGetToken(ApexParser.EXTENDS, 0); }
    FINAL() { return this.tryGetToken(ApexParser.FINAL, 0); }
    FINALLY() { return this.tryGetToken(ApexParser.FINALLY, 0); }
    FOR() { return this.tryGetToken(ApexParser.FOR, 0); }
    GET() { return this.tryGetToken(ApexParser.GET, 0); }
    GLOBAL() { return this.tryGetToken(ApexParser.GLOBAL, 0); }
    IF() { return this.tryGetToken(ApexParser.IF, 0); }
    IMPLEMENTS() { return this.tryGetToken(ApexParser.IMPLEMENTS, 0); }
    INHERITED() { return this.tryGetToken(ApexParser.INHERITED, 0); }
    INSERT() { return this.tryGetToken(ApexParser.INSERT, 0); }
    INSTANCEOF() { return this.tryGetToken(ApexParser.INSTANCEOF, 0); }
    INTERFACE() { return this.tryGetToken(ApexParser.INTERFACE, 0); }
    LIST() { return this.tryGetToken(ApexParser.LIST, 0); }
    MAP() { return this.tryGetToken(ApexParser.MAP, 0); }
    MERGE() { return this.tryGetToken(ApexParser.MERGE, 0); }
    NEW() { return this.tryGetToken(ApexParser.NEW, 0); }
    NULL() { return this.tryGetToken(ApexParser.NULL, 0); }
    ON() { return this.tryGetToken(ApexParser.ON, 0); }
    OVERRIDE() { return this.tryGetToken(ApexParser.OVERRIDE, 0); }
    PRIVATE() { return this.tryGetToken(ApexParser.PRIVATE, 0); }
    PROTECTED() { return this.tryGetToken(ApexParser.PROTECTED, 0); }
    PUBLIC() { return this.tryGetToken(ApexParser.PUBLIC, 0); }
    RETURN() { return this.tryGetToken(ApexParser.RETURN, 0); }
    SET() { return this.tryGetToken(ApexParser.SET, 0); }
    SHARING() { return this.tryGetToken(ApexParser.SHARING, 0); }
    STATIC() { return this.tryGetToken(ApexParser.STATIC, 0); }
    SUPER() { return this.tryGetToken(ApexParser.SUPER, 0); }
    SWITCH() { return this.tryGetToken(ApexParser.SWITCH, 0); }
    TESTMETHOD() { return this.tryGetToken(ApexParser.TESTMETHOD, 0); }
    THIS() { return this.tryGetToken(ApexParser.THIS, 0); }
    THROW() { return this.tryGetToken(ApexParser.THROW, 0); }
    TRANSIENT() { return this.tryGetToken(ApexParser.TRANSIENT, 0); }
    TRIGGER() { return this.tryGetToken(ApexParser.TRIGGER, 0); }
    TRY() { return this.tryGetToken(ApexParser.TRY, 0); }
    UNDELETE() { return this.tryGetToken(ApexParser.UNDELETE, 0); }
    UPDATE() { return this.tryGetToken(ApexParser.UPDATE, 0); }
    UPSERT() { return this.tryGetToken(ApexParser.UPSERT, 0); }
    VIRTUAL() { return this.tryGetToken(ApexParser.VIRTUAL, 0); }
    WEBSERVICE() { return this.tryGetToken(ApexParser.WEBSERVICE, 0); }
    WHEN() { return this.tryGetToken(ApexParser.WHEN, 0); }
    WHILE() { return this.tryGetToken(ApexParser.WHILE, 0); }
    WITH() { return this.tryGetToken(ApexParser.WITH, 0); }
    WITHOUT() { return this.tryGetToken(ApexParser.WITHOUT, 0); }
    USER() { return this.tryGetToken(ApexParser.USER, 0); }
    SYSTEM() { return this.tryGetToken(ApexParser.SYSTEM, 0); }
    IntegralCurrencyLiteral() { return this.tryGetToken(ApexParser.IntegralCurrencyLiteral, 0); }
    SELECT() { return this.tryGetToken(ApexParser.SELECT, 0); }
    COUNT() { return this.tryGetToken(ApexParser.COUNT, 0); }
    FROM() { return this.tryGetToken(ApexParser.FROM, 0); }
    AS() { return this.tryGetToken(ApexParser.AS, 0); }
    USING() { return this.tryGetToken(ApexParser.USING, 0); }
    SCOPE() { return this.tryGetToken(ApexParser.SCOPE, 0); }
    WHERE() { return this.tryGetToken(ApexParser.WHERE, 0); }
    ORDER() { return this.tryGetToken(ApexParser.ORDER, 0); }
    BY() { return this.tryGetToken(ApexParser.BY, 0); }
    LIMIT() { return this.tryGetToken(ApexParser.LIMIT, 0); }
    SOQLAND() { return this.tryGetToken(ApexParser.SOQLAND, 0); }
    SOQLOR() { return this.tryGetToken(ApexParser.SOQLOR, 0); }
    NOT() { return this.tryGetToken(ApexParser.NOT, 0); }
    AVG() { return this.tryGetToken(ApexParser.AVG, 0); }
    COUNT_DISTINCT() { return this.tryGetToken(ApexParser.COUNT_DISTINCT, 0); }
    MIN() { return this.tryGetToken(ApexParser.MIN, 0); }
    MAX() { return this.tryGetToken(ApexParser.MAX, 0); }
    SUM() { return this.tryGetToken(ApexParser.SUM, 0); }
    TYPEOF() { return this.tryGetToken(ApexParser.TYPEOF, 0); }
    END() { return this.tryGetToken(ApexParser.END, 0); }
    THEN() { return this.tryGetToken(ApexParser.THEN, 0); }
    LIKE() { return this.tryGetToken(ApexParser.LIKE, 0); }
    IN() { return this.tryGetToken(ApexParser.IN, 0); }
    INCLUDES() { return this.tryGetToken(ApexParser.INCLUDES, 0); }
    EXCLUDES() { return this.tryGetToken(ApexParser.EXCLUDES, 0); }
    ASC() { return this.tryGetToken(ApexParser.ASC, 0); }
    DESC() { return this.tryGetToken(ApexParser.DESC, 0); }
    NULLS() { return this.tryGetToken(ApexParser.NULLS, 0); }
    FIRST() { return this.tryGetToken(ApexParser.FIRST, 0); }
    LAST() { return this.tryGetToken(ApexParser.LAST, 0); }
    GROUP() { return this.tryGetToken(ApexParser.GROUP, 0); }
    ALL() { return this.tryGetToken(ApexParser.ALL, 0); }
    ROWS() { return this.tryGetToken(ApexParser.ROWS, 0); }
    VIEW() { return this.tryGetToken(ApexParser.VIEW, 0); }
    HAVING() { return this.tryGetToken(ApexParser.HAVING, 0); }
    ROLLUP() { return this.tryGetToken(ApexParser.ROLLUP, 0); }
    TOLABEL() { return this.tryGetToken(ApexParser.TOLABEL, 0); }
    OFFSET() { return this.tryGetToken(ApexParser.OFFSET, 0); }
    DATA() { return this.tryGetToken(ApexParser.DATA, 0); }
    CATEGORY() { return this.tryGetToken(ApexParser.CATEGORY, 0); }
    AT() { return this.tryGetToken(ApexParser.AT, 0); }
    ABOVE() { return this.tryGetToken(ApexParser.ABOVE, 0); }
    BELOW() { return this.tryGetToken(ApexParser.BELOW, 0); }
    ABOVE_OR_BELOW() { return this.tryGetToken(ApexParser.ABOVE_OR_BELOW, 0); }
    SECURITY_ENFORCED() { return this.tryGetToken(ApexParser.SECURITY_ENFORCED, 0); }
    SYSTEM_MODE() { return this.tryGetToken(ApexParser.SYSTEM_MODE, 0); }
    USER_MODE() { return this.tryGetToken(ApexParser.USER_MODE, 0); }
    REFERENCE() { return this.tryGetToken(ApexParser.REFERENCE, 0); }
    CUBE() { return this.tryGetToken(ApexParser.CUBE, 0); }
    FORMAT() { return this.tryGetToken(ApexParser.FORMAT, 0); }
    TRACKING() { return this.tryGetToken(ApexParser.TRACKING, 0); }
    VIEWSTAT() { return this.tryGetToken(ApexParser.VIEWSTAT, 0); }
    STANDARD() { return this.tryGetToken(ApexParser.STANDARD, 0); }
    CUSTOM() { return this.tryGetToken(ApexParser.CUSTOM, 0); }
    DISTANCE() { return this.tryGetToken(ApexParser.DISTANCE, 0); }
    GEOLOCATION() { return this.tryGetToken(ApexParser.GEOLOCATION, 0); }
    GROUPING() { return this.tryGetToken(ApexParser.GROUPING, 0); }
    CALENDAR_MONTH() { return this.tryGetToken(ApexParser.CALENDAR_MONTH, 0); }
    CALENDAR_QUARTER() { return this.tryGetToken(ApexParser.CALENDAR_QUARTER, 0); }
    CALENDAR_YEAR() { return this.tryGetToken(ApexParser.CALENDAR_YEAR, 0); }
    DAY_IN_MONTH() { return this.tryGetToken(ApexParser.DAY_IN_MONTH, 0); }
    DAY_IN_WEEK() { return this.tryGetToken(ApexParser.DAY_IN_WEEK, 0); }
    DAY_IN_YEAR() { return this.tryGetToken(ApexParser.DAY_IN_YEAR, 0); }
    DAY_ONLY() { return this.tryGetToken(ApexParser.DAY_ONLY, 0); }
    FISCAL_MONTH() { return this.tryGetToken(ApexParser.FISCAL_MONTH, 0); }
    FISCAL_QUARTER() { return this.tryGetToken(ApexParser.FISCAL_QUARTER, 0); }
    FISCAL_YEAR() { return this.tryGetToken(ApexParser.FISCAL_YEAR, 0); }
    HOUR_IN_DAY() { return this.tryGetToken(ApexParser.HOUR_IN_DAY, 0); }
    WEEK_IN_MONTH() { return this.tryGetToken(ApexParser.WEEK_IN_MONTH, 0); }
    WEEK_IN_YEAR() { return this.tryGetToken(ApexParser.WEEK_IN_YEAR, 0); }
    CONVERT_TIMEZONE() { return this.tryGetToken(ApexParser.CONVERT_TIMEZONE, 0); }
    YESTERDAY() { return this.tryGetToken(ApexParser.YESTERDAY, 0); }
    TODAY() { return this.tryGetToken(ApexParser.TODAY, 0); }
    TOMORROW() { return this.tryGetToken(ApexParser.TOMORROW, 0); }
    LAST_WEEK() { return this.tryGetToken(ApexParser.LAST_WEEK, 0); }
    THIS_WEEK() { return this.tryGetToken(ApexParser.THIS_WEEK, 0); }
    NEXT_WEEK() { return this.tryGetToken(ApexParser.NEXT_WEEK, 0); }
    LAST_MONTH() { return this.tryGetToken(ApexParser.LAST_MONTH, 0); }
    THIS_MONTH() { return this.tryGetToken(ApexParser.THIS_MONTH, 0); }
    NEXT_MONTH() { return this.tryGetToken(ApexParser.NEXT_MONTH, 0); }
    LAST_90_DAYS() { return this.tryGetToken(ApexParser.LAST_90_DAYS, 0); }
    NEXT_90_DAYS() { return this.tryGetToken(ApexParser.NEXT_90_DAYS, 0); }
    LAST_N_DAYS_N() { return this.tryGetToken(ApexParser.LAST_N_DAYS_N, 0); }
    NEXT_N_DAYS_N() { return this.tryGetToken(ApexParser.NEXT_N_DAYS_N, 0); }
    N_DAYS_AGO_N() { return this.tryGetToken(ApexParser.N_DAYS_AGO_N, 0); }
    NEXT_N_WEEKS_N() { return this.tryGetToken(ApexParser.NEXT_N_WEEKS_N, 0); }
    LAST_N_WEEKS_N() { return this.tryGetToken(ApexParser.LAST_N_WEEKS_N, 0); }
    N_WEEKS_AGO_N() { return this.tryGetToken(ApexParser.N_WEEKS_AGO_N, 0); }
    NEXT_N_MONTHS_N() { return this.tryGetToken(ApexParser.NEXT_N_MONTHS_N, 0); }
    LAST_N_MONTHS_N() { return this.tryGetToken(ApexParser.LAST_N_MONTHS_N, 0); }
    N_MONTHS_AGO_N() { return this.tryGetToken(ApexParser.N_MONTHS_AGO_N, 0); }
    THIS_QUARTER() { return this.tryGetToken(ApexParser.THIS_QUARTER, 0); }
    LAST_QUARTER() { return this.tryGetToken(ApexParser.LAST_QUARTER, 0); }
    NEXT_QUARTER() { return this.tryGetToken(ApexParser.NEXT_QUARTER, 0); }
    NEXT_N_QUARTERS_N() { return this.tryGetToken(ApexParser.NEXT_N_QUARTERS_N, 0); }
    LAST_N_QUARTERS_N() { return this.tryGetToken(ApexParser.LAST_N_QUARTERS_N, 0); }
    N_QUARTERS_AGO_N() { return this.tryGetToken(ApexParser.N_QUARTERS_AGO_N, 0); }
    THIS_YEAR() { return this.tryGetToken(ApexParser.THIS_YEAR, 0); }
    LAST_YEAR() { return this.tryGetToken(ApexParser.LAST_YEAR, 0); }
    NEXT_YEAR() { return this.tryGetToken(ApexParser.NEXT_YEAR, 0); }
    NEXT_N_YEARS_N() { return this.tryGetToken(ApexParser.NEXT_N_YEARS_N, 0); }
    LAST_N_YEARS_N() { return this.tryGetToken(ApexParser.LAST_N_YEARS_N, 0); }
    N_YEARS_AGO_N() { return this.tryGetToken(ApexParser.N_YEARS_AGO_N, 0); }
    THIS_FISCAL_QUARTER() { return this.tryGetToken(ApexParser.THIS_FISCAL_QUARTER, 0); }
    LAST_FISCAL_QUARTER() { return this.tryGetToken(ApexParser.LAST_FISCAL_QUARTER, 0); }
    NEXT_FISCAL_QUARTER() { return this.tryGetToken(ApexParser.NEXT_FISCAL_QUARTER, 0); }
    NEXT_N_FISCAL_QUARTERS_N() { return this.tryGetToken(ApexParser.NEXT_N_FISCAL_QUARTERS_N, 0); }
    LAST_N_FISCAL_QUARTERS_N() { return this.tryGetToken(ApexParser.LAST_N_FISCAL_QUARTERS_N, 0); }
    N_FISCAL_QUARTERS_AGO_N() { return this.tryGetToken(ApexParser.N_FISCAL_QUARTERS_AGO_N, 0); }
    THIS_FISCAL_YEAR() { return this.tryGetToken(ApexParser.THIS_FISCAL_YEAR, 0); }
    LAST_FISCAL_YEAR() { return this.tryGetToken(ApexParser.LAST_FISCAL_YEAR, 0); }
    NEXT_FISCAL_YEAR() { return this.tryGetToken(ApexParser.NEXT_FISCAL_YEAR, 0); }
    NEXT_N_FISCAL_YEARS_N() { return this.tryGetToken(ApexParser.NEXT_N_FISCAL_YEARS_N, 0); }
    LAST_N_FISCAL_YEARS_N() { return this.tryGetToken(ApexParser.LAST_N_FISCAL_YEARS_N, 0); }
    N_FISCAL_YEARS_AGO_N() { return this.tryGetToken(ApexParser.N_FISCAL_YEARS_AGO_N, 0); }
    FIND() { return this.tryGetToken(ApexParser.FIND, 0); }
    EMAIL() { return this.tryGetToken(ApexParser.EMAIL, 0); }
    NAME() { return this.tryGetToken(ApexParser.NAME, 0); }
    PHONE() { return this.tryGetToken(ApexParser.PHONE, 0); }
    SIDEBAR() { return this.tryGetToken(ApexParser.SIDEBAR, 0); }
    FIELDS() { return this.tryGetToken(ApexParser.FIELDS, 0); }
    METADATA() { return this.tryGetToken(ApexParser.METADATA, 0); }
    PRICEBOOKID() { return this.tryGetToken(ApexParser.PRICEBOOKID, 0); }
    NETWORK() { return this.tryGetToken(ApexParser.NETWORK, 0); }
    SNIPPET() { return this.tryGetToken(ApexParser.SNIPPET, 0); }
    TARGET_LENGTH() { return this.tryGetToken(ApexParser.TARGET_LENGTH, 0); }
    DIVISION() { return this.tryGetToken(ApexParser.DIVISION, 0); }
    RETURNING() { return this.tryGetToken(ApexParser.RETURNING, 0); }
    LISTVIEW() { return this.tryGetToken(ApexParser.LISTVIEW, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ApexParser.RULE_anyId; }
    // @Override
    enterRule(listener) {
        if (listener.enterAnyId) {
            listener.enterAnyId(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAnyId) {
            listener.exitAnyId(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitAnyId) {
            return visitor.visitAnyId(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.AnyIdContext = AnyIdContext;
//# sourceMappingURL=ApexParser.js.map