"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseMigrationTool = void 0;
const utils_1 = require("../utils");
const net_1 = require("../utils/net");
class BaseMigrationTool {
    constructor(namespace, connection, logger, messages, ux) {
        this.namespace = namespace;
        this.connection = connection;
        this.logger = logger;
        this.messages = messages;
        this.ux = ux;
        this.namespacePrefix = namespace ? namespace + '__' : '';
    }
    async uploadTransformedData(objectName, transformedData) {
        return await net_1.NetUtils.create(this.connection, objectName, transformedData.mappedRecords);
    }
    async updateData(transformedData) {
        return await net_1.NetUtils.update(this.connection, transformedData.mappedRecords);
    }
    /**
     * If applicable, removes the namespace prefix from the name of an object property
     *
     * @param fieldName The property name to clean out. Might or might not have the namespace as prefix
     * @returns The property without prefix
     */
    getCleanFieldName(fieldName) {
        const idx = fieldName.indexOf('__');
        if (idx > -1) {
            return fieldName.substring(idx + 2);
        }
        return fieldName;
    }
    validMetaDataName(name) {
        const regex = new RegExp('^[a-zA-Z0-9]{1,}$');
        if (regex.test(name) && name !== '') {
            return true;
        }
        return false;
    }
    cleanName(name, allowUnderscores = false) {
        if (!name)
            return '';
        return allowUnderscores ? name.replace(/[^a-z0-9_]+/gi, '') : name.replace(/[^a-z0-9]+/gi, '');
    }
    async truncate(objectName) {
        utils_1.DebugTimer.getInstance().lap('Truncating ' + objectName);
        const ids = await utils_1.QueryTools.queryIds(this.connection, objectName);
        if (ids.length === 0)
            return;
        const success = await net_1.NetUtils.delete(this.connection, ids);
        if (!success) {
            throw new Error('Could not truncate ' + objectName);
        }
    }
    /**
     * Stores any errors found while validating the source record in the record object
     *
     * @param record The custom object record
     * @param errors An array of errors related to the custom object record
     */
    setRecordErrors(record, ...errors) {
        record['errors'] = errors;
    }
    reportProgress(total, current) {
        const progress = ((100 * current) / total).toFixed(0);
        if (parseInt(progress, 10) % 10 === 0) {
            this.ux.log(`${progress}% complete...`);
        }
    }
}
exports.BaseMigrationTool = BaseMigrationTool;
BaseMigrationTool.NAME_LENGTH = 250;
//# sourceMappingURL=base.js.map