"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetaDataObjNameCheck = void 0;
/* eslint-disable */
const utils_1 = require("../utils");
const base_1 = require("./base");
class MetaDataObjNameCheck extends base_1.BaseMigrationTool {
    async checkName(objName) {
        const result = await this.metaDataObjUniqueNameCheck(objName);
        return { result };
    }
    async metaDataObjUniqueNameCheck(objName) {
        const dupNameSet = new Set(), validNameSet = new Set(), longNameSet = new Set(), originalNameSet = new Set(), nameWithSepcialCharactorSet = new Set(), originalRecords = new Map();
        let lookupStr = Array();
        switch (objName) {
            case 'DRBundle__c':
                lookupStr = ['Name'];
                break;
            case 'VlocityCard__c':
                lookupStr = ['Name', 'Author__c'];
                break;
            case 'OmniScript__c':
                lookupStr = ['Type__c', 'SubType__c', 'Language__c'];
                break;
            default: // no-op;
        }
        const mdObjs = await utils_1.QueryTools.queryAll(this.connection, this.namespace, objName, lookupStr);
        // Start transforming each dataRaptor
        utils_1.DebugTimer.getInstance().lap('Name of Each Object: ');
        for (let obj of mdObjs) {
            // Skip if Type is "Migration"
            if (obj[this.namespacePrefix + 'Type__c'] === 'Migration')
                continue;
            const recordId = obj['Id'];
            let uniqueName;
            switch (objName) {
                case 'DRBundle__c':
                    uniqueName = obj['Name'];
                    ;
                    break;
                case 'VlocityCard__c':
                    uniqueName = obj['Name'] + '_' + obj[this.namespacePrefix + 'Author__c'];
                    break;
                case 'OmniScript__c':
                    uniqueName = obj[this.namespacePrefix + 'Type__c'] + '_' + obj[this.namespacePrefix + 'SubType__c'] + '_' + obj[this.namespacePrefix + 'Language__c'];
                    break;
                default: // no-op;
            }
            originalNameSet.add(uniqueName);
            let origName;
            origName = uniqueName;
            if (this.validMetaDataName(uniqueName) && uniqueName.length < base_1.BaseMigrationTool.NAME_LENGTH) {
                validNameSet.add(uniqueName);
                continue;
            }
            // Name length validation, 250 only
            if (uniqueName.length > base_1.BaseMigrationTool.NAME_LENGTH) {
                longNameSet.add(uniqueName);
                continue;
            }
            nameWithSepcialCharactorSet.add(uniqueName);
            uniqueName = uniqueName.replace(/[^a-zA-Z0-9]/g, '');
            if (validNameSet.has(uniqueName)) {
                dupNameSet.add(uniqueName);
            }
            // Create a map of the original records
            originalRecords.set(recordId, {
                record: obj,
                Name: origName
            });
        }
        ;
        return { originalRecords, validNameSet, originalNameSet, longNameSet, dupNameSet, nameWithSepcialCharactorSet };
    }
}
exports.MetaDataObjNameCheck = MetaDataObjNameCheck;
//# sourceMappingURL=metadataobjnamecheck.js.map