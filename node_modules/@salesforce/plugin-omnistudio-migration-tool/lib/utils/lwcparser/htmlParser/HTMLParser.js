"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/explicit-member-accessibility */
/* eslint-disable @typescript-eslint/restrict-template-expressions */
/* eslint-disable @typescript-eslint/member-ordering */
/* eslint-disable no-console */
const fs = __importStar(require("fs"));
const cheerio = __importStar(require("cheerio"));
class HTMLParser {
    // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility
    constructor(htmlFilePath) {
        // Load the HTML file and initialize cheerio
        const html = this.loadHTMLFromFile(htmlFilePath);
        this.parser = cheerio.load(html);
    }
    // Method to load HTML from a file
    loadHTMLFromFile(filePath) {
        try {
            return fs.readFileSync(filePath, 'utf8');
        }
        catch (error) {
            console.error(`Error reading file from disk: ${error}`);
            throw error;
        }
    }
    // Method to replace custom tags
    replaceCustomTag(oldTag, newTag) {
        this.parser(oldTag).each((_, element) => {
            const newElement = this.parser(`<${newTag}></${newTag}>`).html(this.parser(element).html());
            this.parser(element).replaceWith(newElement);
        });
    }
    // Method to save modified HTML back to a file
    saveToFile(outputFilePath) {
        try {
            const modifiedHtml = this.parser.html();
            fs.writeFileSync(outputFilePath, modifiedHtml);
            console.log(`Modified HTML saved to ${outputFilePath}`);
        }
        catch (error) {
            console.error(`Error writing file to disk: ${error}`);
            throw error;
        }
    }
    // Optional: Method to get the modified HTML as a string
    getModifiedHTML() {
        return this.parser.html();
    }
}
exports.default = HTMLParser;
//# sourceMappingURL=HTMLParser.js.map