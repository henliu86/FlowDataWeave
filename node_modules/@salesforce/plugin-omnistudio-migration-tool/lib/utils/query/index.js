"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SortDirection = exports.QueryTools = void 0;
/* eslint-disable */
class QueryTools {
    static buildCustomObjectQuery(namespace, name, fields, filters) {
        const queryFields = this.buildCustomObjectFields(namespace, ['Id', ...fields]);
        let query = 'SELECT ' + queryFields.join(', ') + ' FROM ' + namespace + '__' + name;
        const andFilters = [];
        if (filters && filters.size > 0) {
            for (let filter of filters.keys()) {
                andFilters.push(`${filter} = ${QueryTools.getFilterValue(filters.get(filter))}`);
            }
            query += ' WHERE ' + andFilters.join(' AND ');
        }
        return query;
    }
    static buildCustomObjectFields(namespace, fields) {
        const queryFields = [];
        fields.forEach((field) => {
            if (field.indexOf('__') > -1) {
                queryFields.push(namespace + '__' + field);
            }
            else {
                queryFields.push(field);
            }
        });
        return queryFields;
    }
    static async queryAll(connection, namespace, objectName, fields) {
        let allrecords = [];
        const query = QueryTools.buildCustomObjectQuery(namespace, objectName, fields);
        // Execute the query
        let results = await connection.query(query);
        if (results && results.totalSize > 0) {
            allrecords = results.records;
            // Load more pages
            while (results.nextRecordsUrl) {
                results = await connection.queryMore(results.nextRecordsUrl);
                results.records.forEach((row) => {
                    allrecords.push(row);
                });
            }
        }
        return allrecords;
    }
    static async queryWithFilter(connection, namespace, objectName, fields, filters) {
        let allrecords = [];
        const query = QueryTools.buildCustomObjectQuery(namespace, objectName, fields, filters);
        // Execute the query
        let results = await connection.query(query);
        if (results && results.totalSize > 0) {
            allrecords = results.records;
            // Load more pages
            while (results.nextRecordsUrl) {
                results = await connection.queryMore(results.nextRecordsUrl);
                results.records.forEach((row) => {
                    allrecords.push(row);
                });
            }
        }
        return allrecords;
    }
    static async queryWithFilterAndSort(connection, namespace, objectName, fields, filters, orderBy) {
        let allrecords = [];
        let query = QueryTools.buildCustomObjectQuery(namespace, objectName, fields, filters);
        if (orderBy && orderBy.length > 0) {
            const sortings = [];
            for (let ob of orderBy) {
                sortings.push(ob.field + ' ' + ob.direction);
            }
            query += ' ORDER BY ' + sortings.join(', ');
        }
        // Execute the query
        let results = await connection.query(query);
        if (results && results.totalSize > 0) {
            allrecords = results.records;
            // Load more pages
            while (results.nextRecordsUrl) {
                results = await connection.queryMore(results.nextRecordsUrl);
                results.records.forEach((row) => {
                    allrecords.push(row);
                });
            }
        }
        return allrecords;
    }
    static async query(connection, objectName, fields, filters, orderBy) {
        let query = 'SELECT ' + fields.join(', ') + ' FROM ' + objectName;
        const andFilters = [];
        if (filters && filters.size > 0) {
            for (let filter of filters.keys()) {
                andFilters.push(`${filter} = ${QueryTools.getFilterValue(filters.get(filter))}`);
            }
            query += ' WHERE ' + andFilters.join(' AND ');
        }
        if (orderBy && orderBy.length > 0) {
            const sortings = [];
            for (let ob of orderBy) {
                sortings.push(ob.field + ' ' + ob.direction);
            }
            query += ' ORDER BY ' + sortings.join(', ');
        }
        // Execute the query
        let results = await connection.query(query);
        let allrecords = [];
        if (results && results.totalSize > 0) {
            allrecords = results.records;
            // Load more pages
            while (results.nextRecordsUrl) {
                results = await connection.queryMore(results.nextRecordsUrl);
                results.records.forEach((row) => {
                    allrecords.push(row);
                });
            }
        }
        return allrecords;
    }
    static async queryIds(connection, objectName, filters) {
        let allrecords = [];
        const andFilters = [];
        let query = `SELECT ID FROM ${objectName}`;
        if (filters && filters.size > 0) {
            for (let filter of filters.keys()) {
                andFilters.push(`${filter} = ${QueryTools.getFilterValue(filters.get(filter))}`);
            }
            query += ' WHERE ' + andFilters.join(' AND ');
        }
        // Execute the query
        let results = await connection.query(query);
        if (results && results.totalSize > 0) {
            allrecords = results.records;
            // Load more pages
            while (results.nextRecordsUrl) {
                results = await connection.queryMore(results.nextRecordsUrl);
                results.records.forEach((row) => {
                    allrecords.push(row);
                });
            }
        }
        return allrecords.map((record) => record['Id']);
    }
    static getFilterValue(val) {
        switch (typeof val) {
            case 'bigint':
            case 'boolean':
            case 'number':
                return `${val}`;
            case 'function':
                return `'${val()}'`;
            case 'undefined':
                return 'NULL';
            case 'string':
            default:
                return `'${val}'`;
        }
    }
}
exports.QueryTools = QueryTools;
var SortDirection;
(function (SortDirection) {
    SortDirection["ASC"] = "asc";
    SortDirection["DESC"] = "desc";
})(SortDirection = exports.SortDirection || (exports.SortDirection = {}));
//# sourceMappingURL=index.js.map